
Full_Fota.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d4  080046d4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080046dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000006c  08004748  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004748  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab1b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237f  00000000  00000000  0002abfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002cf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000753  00000000  00000000  0002d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022309  00000000  00000000  0002e093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d838  00000000  00000000  0005039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a3f  00000000  00000000  0005dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aa0  00000000  00000000  00127614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0012a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043f0 	.word	0x080043f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080043f0 	.word	0x080043f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BL_Print_Message>:
    CBL_OTP_READ_CMD,
    CBL_CHANGE_ROP_Level_CMD
};

/* API Definitions -----------------------------------------------------------*/
void BL_Print_Message(char *format, ...){
 80005ac:	b40f      	push	{r0, r1, r2, r3}
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b09a      	sub	sp, #104	; 0x68
 80005b2:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	2260      	movs	r2, #96	; 0x60
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f003 fa91 	bl	8003ae8 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 80005c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005ca:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fa7e 	bl	8003ad4 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART_PC, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <BL_Print_Message+0x48>)
 80005e2:	f002 fe0f 	bl	8003204 <HAL_UART_Transmit>
#elif (BL_DEBUG_METHOD == BL_ENABLE_CAN_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined CAN */
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80005e6:	bf00      	nop
 80005e8:	3768      	adds	r7, #104	; 0x68
 80005ea:	46bd      	mov	sp, r7
 80005ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f0:	b004      	add	sp, #16
 80005f2:	4770      	bx	lr
 80005f4:	20000160 	.word	0x20000160

080005f8 <BL_UART_Fetch_Host_Command>:

BL_Status BL_UART_Fetch_Host_Command (void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	/* Local Definations Scope */
	BL_Status Status = BL_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	71bb      	strb	r3, [r7, #6]
	uint16_t Data_length = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	80bb      	strh	r3, [r7, #4]
	/* Clear BL_Host_Buffer */
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 800060a:	22c8      	movs	r2, #200	; 0xc8
 800060c:	2100      	movs	r1, #0
 800060e:	4868      	ldr	r0, [pc, #416]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000610:	f003 fa6a 	bl	8003ae8 <memset>
	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2201      	movs	r2, #1
 800061a:	4965      	ldr	r1, [pc, #404]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 800061c:	4865      	ldr	r0, [pc, #404]	; (80007b4 <BL_UART_Fetch_Host_Command+0x1bc>)
 800061e:	f002 fe7c 	bl	800331a <HAL_UART_Receive>
 8000622:	4603      	mov	r3, r0
 8000624:	71bb      	strb	r3, [r7, #6]
	if (HAL_Status != HAL_OK){
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d002      	beq.n	8000632 <BL_UART_Fetch_Host_Command+0x3a>
		  Status = BL_NOT_OK;
 800062c:	2301      	movs	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	e0b9      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
	}
	else{
		Data_length = BL_Host_Buffer[0];
 8000632:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	80bb      	strh	r3, [r7, #4]
		HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, &BL_Host_Buffer[1], Data_length, HAL_MAX_DELAY);
 8000638:	88ba      	ldrh	r2, [r7, #4]
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	495e      	ldr	r1, [pc, #376]	; (80007b8 <BL_UART_Fetch_Host_Command+0x1c0>)
 8000640:	485c      	ldr	r0, [pc, #368]	; (80007b4 <BL_UART_Fetch_Host_Command+0x1bc>)
 8000642:	f002 fe6a 	bl	800331a <HAL_UART_Receive>
 8000646:	4603      	mov	r3, r0
 8000648:	71bb      	strb	r3, [r7, #6]
		if (HAL_Status != HAL_OK){
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <BL_UART_Fetch_Host_Command+0x5e>
		  Status = BL_NOT_OK;
 8000650:	2301      	movs	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	e0a7      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
	   }
		else{	
			switch (BL_Host_Buffer[1]){
 8000656:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000658:	785b      	ldrb	r3, [r3, #1]
 800065a:	3b10      	subs	r3, #16
 800065c:	2b12      	cmp	r3, #18
 800065e:	f200 809e 	bhi.w	800079e <BL_UART_Fetch_Host_Command+0x1a6>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <BL_UART_Fetch_Host_Command+0x70>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	080006b5 	.word	0x080006b5
 800066c:	080006c7 	.word	0x080006c7
 8000670:	080006d9 	.word	0x080006d9
 8000674:	080006eb 	.word	0x080006eb
 8000678:	080006fd 	.word	0x080006fd
 800067c:	0800070f 	.word	0x0800070f
 8000680:	08000721 	.word	0x08000721
 8000684:	08000745 	.word	0x08000745
 8000688:	08000757 	.word	0x08000757
 800068c:	08000769 	.word	0x08000769
 8000690:	0800079f 	.word	0x0800079f
 8000694:	0800079f 	.word	0x0800079f
 8000698:	0800079f 	.word	0x0800079f
 800069c:	0800079f 	.word	0x0800079f
 80006a0:	0800079f 	.word	0x0800079f
 80006a4:	0800079f 	.word	0x0800079f
 80006a8:	0800077b 	.word	0x0800077b
 80006ac:	0800078d 	.word	0x0800078d
 80006b0:	08000733 	.word	0x08000733
				case CBL_GET_VER_CMD:
					BL_Print_Message("Gets the protocol version \r\n");
 80006b4:	4841      	ldr	r0, [pc, #260]	; (80007bc <BL_UART_Fetch_Host_Command+0x1c4>)
 80006b6:	f7ff ff79 	bl	80005ac <BL_Print_Message>
					Bootloader_Get_Version(BL_Host_Buffer);
 80006ba:	483d      	ldr	r0, [pc, #244]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 80006bc:	f000 f95a 	bl	8000974 <Bootloader_Get_Version>
					Status = BL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	71fb      	strb	r3, [r7, #7]
					break;
 80006c4:	e06f      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_GET_HELP_CMD:
					BL_Print_Message("Gets help with Commands ID \r\n");
 80006c6:	483e      	ldr	r0, [pc, #248]	; (80007c0 <BL_UART_Fetch_Host_Command+0x1c8>)
 80006c8:	f7ff ff70 	bl	80005ac <BL_Print_Message>
					Bootloader_Get_Help(BL_Host_Buffer);
 80006cc:	4838      	ldr	r0, [pc, #224]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 80006ce:	f000 f983 	bl	80009d8 <Bootloader_Get_Help>
					Status = BL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
					break;
 80006d6:	e066      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_GET_CID_CMD:
					BL_Print_Message("Gets the chip ID \r\n");
 80006d8:	483a      	ldr	r0, [pc, #232]	; (80007c4 <BL_UART_Fetch_Host_Command+0x1cc>)
 80006da:	f7ff ff67 	bl	80005ac <BL_Print_Message>
					Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80006de:	4834      	ldr	r0, [pc, #208]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 80006e0:	f000 f9a8 	bl	8000a34 <Bootloader_Get_Chip_Identification_Number>
					Status = BL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]
					break;
 80006e8:	e05d      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_GET_RDP_STATUS_CMD:
					BL_Print_Message("Read protection level \r\n");
 80006ea:	4837      	ldr	r0, [pc, #220]	; (80007c8 <BL_UART_Fetch_Host_Command+0x1d0>)
 80006ec:	f7ff ff5e 	bl	80005ac <BL_Print_Message>
					Bootloader_Read_Protection_Level(BL_Host_Buffer);
 80006f0:	482f      	ldr	r0, [pc, #188]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 80006f2:	f000 fbf5 	bl	8000ee0 <Bootloader_Read_Protection_Level>
					Status = BL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
					break;
 80006fa:	e054      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_GO_TO_ADDR_CMD:
					BL_Print_Message("Jumps to specific address located in the flash memory \r\n");
 80006fc:	4833      	ldr	r0, [pc, #204]	; (80007cc <BL_UART_Fetch_Host_Command+0x1d4>)
 80006fe:	f7ff ff55 	bl	80005ac <BL_Print_Message>
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 8000702:	482b      	ldr	r0, [pc, #172]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000704:	f000 fa54 	bl	8000bb0 <Bootloader_Jump_To_Address>
					Status = BL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]
					break;
 800070c:	e04b      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_FLASH_ERASE_CMD:
					BL_Print_Message("Erases some pages in flash memory \r\n");
 800070e:	4830      	ldr	r0, [pc, #192]	; (80007d0 <BL_UART_Fetch_Host_Command+0x1d8>)
 8000710:	f7ff ff4c 	bl	80005ac <BL_Print_Message>
					Bootloader_Erase_Flash(BL_Host_Buffer);
 8000714:	4826      	ldr	r0, [pc, #152]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000716:	f000 fadd 	bl	8000cd4 <Bootloader_Erase_Flash>
					Status = BL_OK;
 800071a:	2300      	movs	r3, #0
 800071c:	71fb      	strb	r3, [r7, #7]
					break;
 800071e:	e042      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_MEM_WRITE_CMD:
					BL_Print_Message("Write bytes in Flash Memory from address specified by the application \r\n");
 8000720:	482c      	ldr	r0, [pc, #176]	; (80007d4 <BL_UART_Fetch_Host_Command+0x1dc>)
 8000722:	f7ff ff43 	bl	80005ac <BL_Print_Message>
					Bootloader_Memory_Write(BL_Host_Buffer);
 8000726:	4822      	ldr	r0, [pc, #136]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000728:	f000 fb68 	bl	8000dfc <Bootloader_Memory_Write>
					Status = BL_OK;
 800072c:	2300      	movs	r3, #0
 800072e:	71fb      	strb	r3, [r7, #7]
					break;
 8000730:	e039      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_GO_TO_USER_APP:
					BL_Print_Message("Jumps to user application code located in the flash memory \r\n");
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <BL_UART_Fetch_Host_Command+0x1e0>)
 8000734:	f7ff ff3a 	bl	80005ac <BL_Print_Message>
					Bootloader_Jump_To_UserApp(BL_Host_Buffer);
 8000738:	481d      	ldr	r0, [pc, #116]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 800073a:	f000 f9b3 	bl	8000aa4 <Bootloader_Jump_To_UserApp>
					Status = BL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
					break;
 8000742:	e030      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_EN_RW_PROTECT_CMD:
					BL_Print_Message("Enable or Disable write protect on different sectors of the user flash \r\n");
 8000744:	4825      	ldr	r0, [pc, #148]	; (80007dc <BL_UART_Fetch_Host_Command+0x1e4>)
 8000746:	f7ff ff31 	bl	80005ac <BL_Print_Message>
					Bootloader_Enable_RW_Protection(BL_Host_Buffer);
 800074a:	4819      	ldr	r0, [pc, #100]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 800074c:	f000 fc05 	bl	8000f5a <Bootloader_Enable_RW_Protection>
					Status = BL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	71fb      	strb	r3, [r7, #7]
					break;
 8000754:	e027      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_MEM_READ_CMD:
					BL_Print_Message("Read data from different memories of the microcontroller \r\n");
 8000756:	4822      	ldr	r0, [pc, #136]	; (80007e0 <BL_UART_Fetch_Host_Command+0x1e8>)
 8000758:	f7ff ff28 	bl	80005ac <BL_Print_Message>
					Bootloader_Memory_Read(BL_Host_Buffer);
 800075c:	4814      	ldr	r0, [pc, #80]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 800075e:	f000 fc06 	bl	8000f6e <Bootloader_Memory_Read>
					Status = BL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	71fb      	strb	r3, [r7, #7]
					break;
 8000766:	e01e      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_READ_SECTOR_STATUS_CMD:
					BL_Print_Message("Read all the sector protection status \r\n");
 8000768:	481e      	ldr	r0, [pc, #120]	; (80007e4 <BL_UART_Fetch_Host_Command+0x1ec>)
 800076a:	f7ff ff1f 	bl	80005ac <BL_Print_Message>
					Bootloader_Get_Sector_Protection_Status(BL_Host_Buffer);
 800076e:	4810      	ldr	r0, [pc, #64]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000770:	f000 fc07 	bl	8000f82 <Bootloader_Get_Sector_Protection_Status>
					Status = BL_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	71fb      	strb	r3, [r7, #7]
					break;
 8000778:	e015      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_OTP_READ_CMD:
					BL_Print_Message("Read the OTP contents \r\n");
 800077a:	481b      	ldr	r0, [pc, #108]	; (80007e8 <BL_UART_Fetch_Host_Command+0x1f0>)
 800077c:	f7ff ff16 	bl	80005ac <BL_Print_Message>
					Bootloader_Read_OTP(BL_Host_Buffer);
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000782:	f000 fc08 	bl	8000f96 <Bootloader_Read_OTP>
					Status = BL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	71fb      	strb	r3, [r7, #7]
					break;
 800078a:	e00c      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				case CBL_CHANGE_ROP_Level_CMD:
					BL_Print_Message("Read the ROP Level \r\n");
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <BL_UART_Fetch_Host_Command+0x1f4>)
 800078e:	f7ff ff0d 	bl	80005ac <BL_Print_Message>
					Bootloader_Change_Read_Protection_Level(BL_Host_Buffer);
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <BL_UART_Fetch_Host_Command+0x1b8>)
 8000794:	f000 fbd7 	bl	8000f46 <Bootloader_Change_Read_Protection_Level>
					Status = BL_OK;
 8000798:	2300      	movs	r3, #0
 800079a:	71fb      	strb	r3, [r7, #7]
					break;
 800079c:	e003      	b.n	80007a6 <BL_UART_Fetch_Host_Command+0x1ae>
				default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <BL_UART_Fetch_Host_Command+0x1f8>)
 80007a0:	f7ff ff04 	bl	80005ac <BL_Print_Message>
					break;
 80007a4:	bf00      	nop
			}
		}
	}
  return Status;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000088 	.word	0x20000088
 80007b4:	200001f0 	.word	0x200001f0
 80007b8:	20000089 	.word	0x20000089
 80007bc:	08004408 	.word	0x08004408
 80007c0:	08004428 	.word	0x08004428
 80007c4:	08004448 	.word	0x08004448
 80007c8:	0800445c 	.word	0x0800445c
 80007cc:	08004478 	.word	0x08004478
 80007d0:	080044b4 	.word	0x080044b4
 80007d4:	080044dc 	.word	0x080044dc
 80007d8:	08004528 	.word	0x08004528
 80007dc:	08004568 	.word	0x08004568
 80007e0:	080045b4 	.word	0x080045b4
 80007e4:	080045f0 	.word	0x080045f0
 80007e8:	0800461c 	.word	0x0800461c
 80007ec:	08004638 	.word	0x08004638
 80007f0:	08004650 	.word	0x08004650

080007f4 <Bootloader_Send_Data_To_Host>:
  * @param  Host_Buffer : Data.
  * @param  Data_Len    : Data Length.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_Data_To_Host (uint8_t *Host_Buffer, uint32_t Data_Len){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_DEBUG_UART_HOST, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b29a      	uxth	r2, r3
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <Bootloader_Send_Data_To_Host+0x24>)
 800080a:	f002 fcfb 	bl	8003204 <HAL_UART_Transmit>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200001f0 	.word	0x200001f0

0800081c <Bootloader_Send_ACK>:
  * @brief  Send ACK.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_ACK (uint8_t Replay_Len){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Info[2] = {0, 0};
 8000826:	2300      	movs	r3, #0
 8000828:	81bb      	strh	r3, [r7, #12]
	Ack_Info[0] = CBL_SEND_ACK;
 800082a:	23cd      	movs	r3, #205	; 0xcd
 800082c:	733b      	strb	r3, [r7, #12]
	Ack_Info[1] = Replay_Len; /* Length of the following packet (Response) from STM32 to the Host*/
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host(Ack_Info, 2);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2102      	movs	r1, #2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffdb 	bl	80007f4 <Bootloader_Send_Data_To_Host>
}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Bootloader_Send_NACK>:
  * @brief  Send NACK.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

static inline void Bootloader_Send_NACK	(void){
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
	uint8_t Ack_Info = CBL_SEND_NACK;
 800084c:	23ab      	movs	r3, #171	; 0xab
 800084e:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&Ack_Info, 1);
 8000850:	1dfb      	adds	r3, r7, #7
 8000852:	2101      	movs	r1, #1
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffcd 	bl	80007f4 <Bootloader_Send_Data_To_Host>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <Bootloader_CRC_Verify>:
  * @param  *pData   : Pointer to Verified Data.
  * @param  Data_Len : Data Length.
  * @param  Host_CRC : CRC Delivered by Host.
  * @retval CRC_Status.
**************************************************************************************/
static uint8_t Bootloader_CRC_Verify (uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC){
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 8000880:	2300      	movs	r3, #0
 8000882:	75fb      	strb	r3, [r7, #23]
 8000884:	e00f      	b.n	80008a6 <Bootloader_CRC_Verify+0x42>
		Data_Buffer = (uint32_t)(pData[Data_Counter]);
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	4810      	ldr	r0, [pc, #64]	; (80008dc <Bootloader_CRC_Verify+0x78>)
 800089a:	f001 f852 	bl	8001942 <HAL_CRC_Accumulate>
 800089e:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++){
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	3301      	adds	r3, #1
 80008a4:	75fb      	strb	r3, [r7, #23]
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d8eb      	bhi.n	8000886 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
  __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <Bootloader_CRC_Verify+0x78>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	689a      	ldr	r2, [r3, #8]
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <Bootloader_CRC_Verify+0x78>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f042 0201 	orr.w	r2, r2, #1
 80008bc:	609a      	str	r2, [r3, #8]
	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC){
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d102      	bne.n	80008cc <Bootloader_CRC_Verify+0x68>
		CRC_Status = CRC_VERIFICATION_PASSED;
 80008c6:	2301      	movs	r3, #1
 80008c8:	77fb      	strb	r3, [r7, #31]
 80008ca:	e001      	b.n	80008d0 <Bootloader_CRC_Verify+0x6c>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 80008cc:	2300      	movs	r3, #0
 80008ce:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 80008d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000150 	.word	0x20000150

080008e0 <Calculate_CRC32>:
/* Custom CRC Verification with different Polynomial (0x08C71CC1) */
static uint8_t Calculate_CRC32 (uint8_t* Buffer, uint32_t Buffer_Length, uint32_t Host_CRC){
 80008e0:	b480      	push	{r7}
 80008e2:	b08b      	sub	sp, #44	; 0x2c
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t MCU_CRC_Calculated = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  uint32_t CRC_Value = 0xFFFFFFFF;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	623b      	str	r3, [r7, #32]
  for (uint32_t i = 0; i < Buffer_Length; i++){
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
 8000900:	e01f      	b.n	8000942 <Calculate_CRC32+0x62>
      CRC_Value = CRC_Value ^ Buffer[i];
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	4053      	eors	r3, r2
 8000910:	623b      	str	r3, [r7, #32]
      for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++){
 8000912:	2300      	movs	r3, #0
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	e00e      	b.n	8000936 <Calculate_CRC32+0x56>
          if(CRC_Value & 0x80000000){
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	2b00      	cmp	r3, #0
 800091c:	da05      	bge.n	800092a <Calculate_CRC32+0x4a>
              CRC_Value = (CRC_Value << 1) ^ 0x08C71CC1;
 800091e:	6a3b      	ldr	r3, [r7, #32]
 8000920:	005a      	lsls	r2, r3, #1
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <Calculate_CRC32+0x90>)
 8000924:	4053      	eors	r3, r2
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	e002      	b.n	8000930 <Calculate_CRC32+0x50>
          } 
					else{
              CRC_Value = (CRC_Value << 1);
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	623b      	str	r3, [r7, #32]
      for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++){
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	3301      	adds	r3, #1
 8000934:	61bb      	str	r3, [r7, #24]
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2b1f      	cmp	r3, #31
 800093a:	d9ed      	bls.n	8000918 <Calculate_CRC32+0x38>
  for (uint32_t i = 0; i < Buffer_Length; i++){
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	3301      	adds	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
 8000942:	69fa      	ldr	r2, [r7, #28]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	429a      	cmp	r2, r3
 8000948:	d3db      	bcc.n	8000902 <Calculate_CRC32+0x22>
          }
      }
  }
	/* Compare the Host CRC and Calculated CRC */
	if(CRC_Value == Host_CRC){
 800094a:	6a3a      	ldr	r2, [r7, #32]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	429a      	cmp	r2, r3
 8000950:	d103      	bne.n	800095a <Calculate_CRC32+0x7a>
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000952:	2301      	movs	r3, #1
 8000954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000958:	e002      	b.n	8000960 <Calculate_CRC32+0x80>
	}
	else{
		CRC_Status = CRC_VERIFICATION_FAILED;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return CRC_Status;
 8000960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000964:	4618      	mov	r0, r3
 8000966:	372c      	adds	r7, #44	; 0x2c
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	08c71cc1 	.word	0x08c71cc1

08000974 <Bootloader_Get_Version>:
  * @brief  Get Bootloader Version.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Version	(uint8_t *Host_Buffer){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	/* Local Definations Scope */
	uint8_t BL_Version [4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <Bootloader_Get_Version+0x60>)
 800097e:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the bootloader version from the MCU \r\n");
#endif	
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b29b      	uxth	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 8000992:	8afb      	ldrh	r3, [r7, #22]
 8000994:	3b04      	subs	r3, #4
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 800099e:	8afb      	ldrh	r3, [r7, #22]
 80009a0:	3b04      	subs	r3, #4
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4619      	mov	r1, r3
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ff9a 	bl	80008e0 <Calculate_CRC32>
 80009ac:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d109      	bne.n	80009c6 <Bootloader_Get_Version+0x52>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif										 
		Bootloader_Send_ACK(4);
 80009b2:	2004      	movs	r0, #4
 80009b4:	f7ff ff32 	bl	800081c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(BL_Version, 4);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2104      	movs	r1, #4
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff18 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	  BL_Print_Message("CRC Verification Failed \r\n");
#endif
	  Bootloader_Send_NACK();
	}	
}
 80009c4:	e001      	b.n	80009ca <Bootloader_Get_Version+0x56>
	  Bootloader_Send_NACK();
 80009c6:	f7ff ff3e 	bl	8000846 <Bootloader_Send_NACK>
}
 80009ca:	bf00      	nop
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	01000164 	.word	0x01000164

080009d8 <Bootloader_Get_Help>:
  * @brief  Get Commands Help.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Help	(uint8_t *Host_Buffer){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
  uint32_t Host_CRC32 = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the commands supported by the bootloader \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	3b04      	subs	r3, #4
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60bb      	str	r3, [r7, #8]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	3b04      	subs	r3, #4
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff ff6a 	bl	80008e0 <Calculate_CRC32>
 8000a0c:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d107      	bne.n	8000a22 <Bootloader_Get_Help+0x4a>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(12);
 8000a12:	200c      	movs	r0, #12
 8000a14:	f7ff ff02 	bl	800081c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs, 12);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <Bootloader_Get_Help+0x58>)
 8000a1c:	f7ff feea 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}	
}
 8000a20:	e001      	b.n	8000a26 <Bootloader_Get_Help+0x4e>
	Bootloader_Send_NACK();
 8000a22:	f7ff ff10 	bl	8000846 <Bootloader_Send_NACK>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000

08000a34 <Bootloader_Get_Chip_Identification_Number>:
  * @brief  Get Chip Identification Number.
  * @param  *pData   : Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Chip_Identification_Number	(uint8_t *Host_Buffer){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	81fb      	strh	r3, [r7, #14]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3301      	adds	r3, #1
 8000a50:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a52:	8afb      	ldrh	r3, [r7, #22]
 8000a54:	3b04      	subs	r3, #4
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000a5e:	8afb      	ldrh	r3, [r7, #22]
 8000a60:	3b04      	subs	r3, #4
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff3a 	bl	80008e0 <Calculate_CRC32>
 8000a6c:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d110      	bne.n	8000a94 <Bootloader_Get_Chip_Identification_Number+0x60>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <Bootloader_Get_Chip_Identification_Number+0x6c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	81fb      	strh	r3, [r7, #14]
		Bootloader_Send_ACK(2);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff fecb 	bl	800081c <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t* )&MCU_Identification_Number, 2);
 8000a86:	f107 030e 	add.w	r3, r7, #14
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff feb1 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}	
}
 8000a92:	e001      	b.n	8000a98 <Bootloader_Get_Chip_Identification_Number+0x64>
	Bootloader_Send_NACK();
 8000a94:	f7ff fed7 	bl	8000846 <Bootloader_Send_NACK>
}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	e0042000 	.word	0xe0042000

08000aa4 <Bootloader_Jump_To_UserApp>:
  * @brief  Jump To User Application.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_UserApp (uint8_t *Host_Buffer){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the bootloader version from the MCU \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	3301      	adds	r3, #1
 8000abc:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000abe:	8bfb      	ldrh	r3, [r7, #30]
 8000ac0:	3b04      	subs	r3, #4
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED ==
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000aca:	8bfb      	ldrh	r3, [r7, #30]
 8000acc:	3b04      	subs	r3, #4
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff04 	bl	80008e0 <Calculate_CRC32>
 8000ad8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED ==
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d11b      	bne.n	8000b16 <Bootloader_Jump_To_UserApp+0x72>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif

		Bootloader_Send_ACK(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fe9c 	bl	800081c <Bootloader_Send_ACK>

		Bootloader_Send_Data_To_Host((uint8_t*)CRC_VERIFICATION_PASSED, 1);
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe84 	bl	80007f4 <Bootloader_Send_Data_To_Host>
		/* ------> Jump to user Application <------ */
    // Read the MSP (Main Stack Pointer) value from the user application's vector table
		Bootloader_Jump_To_Application();
 8000aec:	f000 f81e 	bl	8000b2c <Bootloader_Jump_To_Application>
    uint32_t MSP_value   = *((volatile uint32_t* )0x08008000U);
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <Bootloader_Jump_To_UserApp+0x80>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	617b      	str	r3, [r7, #20]
	  // Read the reset handler address from the user application's vector table
	  uint32_t MainAppAdd  = *((volatile uint32_t* )(0x08008000U + 4));
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <Bootloader_Jump_To_UserApp+0x84>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	613b      	str	r3, [r7, #16]
	  // Define a function pointer to the reset handler address
	  pMainApp ResetHandler_Address = (pMainApp)MainAppAdd;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	f383 8808 	msr	MSP, r3
}
 8000b0a:	bf00      	nop
	  // Set the MSP to the value obtained from the user application's vector table
	  __set_MSP(MSP_value);
	  // Deinitialize the RCC (Reset and Clock Control) peripheral (Block any External Interrupts)
	  HAL_RCC_DeInit();
 8000b0c:	f001 ff94 	bl	8002a38 <HAL_RCC_DeInit>
	  // Jump to the reset handler address in the user application
	  ResetHandler_Address();
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4798      	blx	r3
#endif
	  Bootloader_Send_NACK();
	}


}
 8000b14:	e001      	b.n	8000b1a <Bootloader_Jump_To_UserApp+0x76>
	  Bootloader_Send_NACK();
 8000b16:	f7ff fe96 	bl	8000846 <Bootloader_Send_NACK>
}
 8000b1a:	bf00      	nop
 8000b1c:	3720      	adds	r7, #32
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08008000 	.word	0x08008000
 8000b28:	08008004 	.word	0x08008004

08000b2c <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application()
  {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
	    void(*App_Reset_Handler)(void);

	  	uint32_t ResetHandlerAddress ;

	  	/*configure MSP of user APP by reading value form base address of sector2*/
	  	uint32_t Local_u32MSPval =*((volatile uint32_t * )(0x08008000));
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <Bootloader_Jump_To_Application+0x28>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	60fb      	str	r3, [r7, #12]

	  	/*write the user MSP value inside into msp register*/
	  	__asm volatile("msr MSP,%0"::"r"(Local_u32MSPval));
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f383 8808 	msr	MSP, r3

	  	/*Get reset Handler Address of user app*/
	  	ResetHandlerAddress = *((volatile uint32_t * ) (0x08008000 + 4)) ;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <Bootloader_Jump_To_Application+0x2c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	60bb      	str	r3, [r7, #8]

	  	App_Reset_Handler=(void*)ResetHandlerAddress;
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	607b      	str	r3, [r7, #4]

	  	/*jump to the user app handler */
	  	App_Reset_Handler();
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4798      	blx	r3



  }
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	08008000 	.word	0x08008000
 8000b58:	08008004 	.word	0x08008004

08000b5c <Host_Address_Verification>:
  * @brief  Host Address Verification.
  * @param  Jump_Address.
  * @retval Address_Verification.
**************************************************************************************/

static uint8_t Host_Address_Verification (uint32_t Jump_Address){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END)){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b6e:	d306      	bcc.n	8000b7e <Host_Address_Verification+0x22>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <Host_Address_Verification+0x4c>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d802      	bhi.n	8000b7e <Host_Address_Verification+0x22>
		  Address_Verification = ADDRESS_IS_VALID;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e00c      	b.n	8000b98 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END)){
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000b84:	d306      	bcc.n	8000b94 <Host_Address_Verification+0x38>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a08      	ldr	r2, [pc, #32]	; (8000bac <Host_Address_Verification+0x50>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d802      	bhi.n	8000b94 <Host_Address_Verification+0x38>
		  Address_Verification = ADDRESS_IS_VALID;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e001      	b.n	8000b98 <Host_Address_Verification+0x3c>
	}
	else{
		  Address_Verification = ADDRESS_IS_INVALID;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20005000 	.word	0x20005000
 8000bac:	08010000 	.word	0x08010000

08000bb0 <Bootloader_Jump_To_Address>:
  * @brief  Jump To Specific Address.
  * @param  *Host_Buffer: Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000bd2:	8bfb      	ldrh	r3, [r7, #30]
 8000bd4:	3b04      	subs	r3, #4
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED == 
		                     Bootloader_CRC_Verify(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000bde:	8bfb      	ldrh	r3, [r7, #30]
 8000be0:	3b04      	subs	r3, #4
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4619      	mov	r1, r3
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff fe3c 	bl	8000864 <Bootloader_CRC_Verify>
 8000bec:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d121      	bne.n	8000c36 <Bootloader_Jump_To_Address+0x86>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fe12 	bl	800081c <Bootloader_Send_ACK>
		HOST_Jump_Address = *((uint32_t* )&Host_Buffer[2]);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000bfe:	617b      	str	r3, [r7, #20]
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);				
 8000c00:	6978      	ldr	r0, [r7, #20]
 8000c02:	f7ff ffab 	bl	8000b5c <Host_Address_Verification>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73fb      	strb	r3, [r7, #15]
    if( ADDRESS_IS_VALID == Address_Verification ){
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d10b      	bne.n	8000c28 <Bootloader_Jump_To_Address+0x78>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
			BL_Print_Message("Address verification succeeded \r\n");
#endif
			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000c10:	f107 030f 	add.w	r3, r7, #15
 8000c14:	2101      	movs	r1, #1
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fdec 	bl	80007f4 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump (1 --> state for thumb architecture) */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	613b      	str	r3, [r7, #16]
			Jump_Address();
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4798      	blx	r3
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}	
}
 8000c26:	e008      	b.n	8000c3a <Bootloader_Jump_To_Address+0x8a>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000c28:	f107 030f 	add.w	r3, r7, #15
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fde0 	bl	80007f4 <Bootloader_Send_Data_To_Host>
}
 8000c34:	e001      	b.n	8000c3a <Bootloader_Jump_To_Address+0x8a>
	Bootloader_Send_NACK();
 8000c36:	f7ff fe06 	bl	8000846 <Bootloader_Send_NACK>
}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <Perform_Flash_Erase>:
//	return 	Validity_Status;
//}

#define INVALID_SECTOR            0x12

uint8_t Perform_Flash_Erase(uint8_t initial_sector_number, uint8_t number_of_sector) {
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b08a      	sub	sp, #40	; 0x28
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	460a      	mov	r2, r1
 8000c4c:	71fb      	strb	r3, [r7, #7]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	71bb      	strb	r3, [r7, #6]
    // we have totally 8 sectors in one bank (sector 0 to 7)
    // number_of_sector has to be in the range of 0 to 7
    // if sector_number = 0xff, that means mass erase!

    FLASH_EraseInitTypeDef flashErase_handle;
    uint32_t sectorError = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
    uint8_t erase_status = 0x01;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (number_of_sector > 7)
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	d901      	bls.n	8000c66 <Perform_Flash_Erase+0x24>
        return INVALID_SECTOR;
 8000c62:	2312      	movs	r3, #18
 8000c64:	e032      	b.n	8000ccc <Perform_Flash_Erase+0x8a>

    if ((initial_sector_number == 0xFF) || (number_of_sector <= 7)) {
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d002      	beq.n	8000c72 <Perform_Flash_Erase+0x30>
 8000c6c:	79bb      	ldrb	r3, [r7, #6]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d82b      	bhi.n	8000cca <Perform_Flash_Erase+0x88>
        if (number_of_sector == 0xFF) {
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	2bff      	cmp	r3, #255	; 0xff
 8000c76:	d104      	bne.n	8000c82 <Perform_Flash_Erase+0x40>
            flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
            flashErase_handle.Banks = FLASH_BANK_1; // Assuming single bank erase
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	e00f      	b.n	8000ca2 <Perform_Flash_Erase+0x60>
        } else {
            // Here we are just calculating how many sectors need to be erased
            uint32_t remaining_sector = 8 - number_of_sector;
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	f1c3 0308 	rsb	r3, r3, #8
 8000c88:	623b      	str	r3, [r7, #32]
            if (number_of_sector > remaining_sector) {
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	6a3a      	ldr	r2, [r7, #32]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d201      	bcs.n	8000c96 <Perform_Flash_Erase+0x54>
                number_of_sector = remaining_sector;
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	71bb      	strb	r3, [r7, #6]
            }
            flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
            flashErase_handle.Sector = initial_sector_number; // this is the initial sector
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	617b      	str	r3, [r7, #20]
            flashErase_handle.NbSectors = number_of_sector;
 8000c9e:	79bb      	ldrb	r3, [r7, #6]
 8000ca0:	61bb      	str	r3, [r7, #24]
        }

        // Get access to touch the flash registers
        HAL_FLASH_Unlock();
 8000ca2:	f000 fecd 	bl	8001a40 <HAL_FLASH_Unlock>
        flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // your MCU will work on this voltage range
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
        erase_status = HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 f835 	bl	8001d24 <HAL_FLASHEx_Erase>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        HAL_FLASH_Lock();
 8000cc0:	f000 fee0 	bl	8001a84 <HAL_FLASH_Lock>

        return erase_status;
 8000cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc8:	e000      	b.n	8000ccc <Perform_Flash_Erase+0x8a>
    }

    return INVALID_SECTOR;
 8000cca:	2312      	movs	r3, #18
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <Bootloader_Erase_Flash>:

static void Bootloader_Erase_Flash	(uint8_t *Host_Buffer){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
   /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the MCU chip identification number \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	3301      	adds	r3, #1
 8000cf0:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000cf2:	8afb      	ldrh	r3, [r7, #22]
 8000cf4:	3b04      	subs	r3, #4
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000cfe:	8afb      	ldrh	r3, [r7, #22]
 8000d00:	3b04      	subs	r3, #4
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4619      	mov	r1, r3
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff fdea 	bl	80008e0 <Calculate_CRC32>
 8000d0c:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d115      	bne.n	8000d3e <Bootloader_Erase_Flash+0x6a>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f7ff fd82 	bl	800081c <Bootloader_Send_ACK>
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3303      	adds	r3, #3
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	4610      	mov	r0, r2
 8000d28:	f7ff ff8b 	bl	8000c42 <Perform_Flash_Erase>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000d30:	f107 030f 	add.w	r3, r7, #15
 8000d34:	2101      	movs	r1, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fd5c 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}	
}
 8000d3c:	e001      	b.n	8000d42 <Bootloader_Erase_Flash+0x6e>
	Bootloader_Send_NACK();
 8000d3e:	f7ff fd82 	bl	8000846 <Bootloader_Send_NACK>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <Flash_Memory_Write_Payload>:
  * @param  *Payload_Len           :Data Length.
  * @param  Number_Of_Sectors.
  * @retval Flash_Payload_Write_Status.
**************************************************************************************/

uint8_t Flash_Memory_Write_Payload (uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000d4a:	b5b0      	push	{r4, r5, r7, lr}
 8000d4c:	b088      	sub	sp, #32
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	4613      	mov	r3, r2
 8000d56:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_Counter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	837b      	strh	r3, [r7, #26]
	uint32_t Address = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000d68:	f000 fe6a 	bl	8001a40 <HAL_FLASH_Unlock>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK){
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <Flash_Memory_Write_Payload+0x32>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d76:	2300      	movs	r3, #0
 8000d78:	77bb      	strb	r3, [r7, #30]
 8000d7a:	e025      	b.n	8000dc8 <Flash_Memory_Write_Payload+0x7e>
	}
	else{
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	83bb      	strh	r3, [r7, #28]
 8000d80:	e01e      	b.n	8000dc0 <Flash_Memory_Write_Payload+0x76>
            /* Use uint16_t pointer to properly handle 16-bit data */
            uint16_t* dataToWrite = (uint16_t*)&Host_Payload[Payload_Counter];
 8000d82:	8bbb      	ldrh	r3, [r7, #28]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d8a:	8bba      	ldrh	r2, [r7, #28]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	18d1      	adds	r1, r2, r3
                                           Payload_Start_Address + Payload_Counter,
                                           *dataToWrite);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	881b      	ldrh	r3, [r3, #0]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	2200      	movs	r2, #0
 8000d98:	461c      	mov	r4, r3
 8000d9a:	4615      	mov	r5, r2
 8000d9c:	4622      	mov	r2, r4
 8000d9e:	462b      	mov	r3, r5
 8000da0:	2001      	movs	r0, #1
 8000da2:	f000 fdf9 	bl	8001998 <HAL_FLASH_Program>
 8000da6:	4603      	mov	r3, r0
 8000da8:	77fb      	strb	r3, [r7, #31]
            if (HAL_Status != HAL_OK){
 8000daa:	7ffb      	ldrb	r3, [r7, #31]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <Flash_Memory_Write_Payload+0x6c>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000db0:	2300      	movs	r3, #0
 8000db2:	77bb      	strb	r3, [r7, #30]
                break;
 8000db4:	e008      	b.n	8000dc8 <Flash_Memory_Write_Payload+0x7e>
            }
            else {
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000db6:	2301      	movs	r3, #1
 8000db8:	77bb      	strb	r3, [r7, #30]
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000dba:	8bbb      	ldrh	r3, [r7, #28]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	83bb      	strh	r3, [r7, #28]
 8000dc0:	8bba      	ldrh	r2, [r7, #28]
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3dc      	bcc.n	8000d82 <Flash_Memory_Write_Payload+0x38>
            }
        }
  }
	
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000dc8:	7fbb      	ldrb	r3, [r7, #30]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10f      	bne.n	8000dee <Flash_Memory_Write_Payload+0xa4>
 8000dce:	7ffb      	ldrb	r3, [r7, #31]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10c      	bne.n	8000dee <Flash_Memory_Write_Payload+0xa4>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000dd4:	f000 fe56 	bl	8001a84 <HAL_FLASH_Lock>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK){
 8000ddc:	7ffb      	ldrb	r3, [r7, #31]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d002      	beq.n	8000de8 <Flash_Memory_Write_Payload+0x9e>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000de2:	2300      	movs	r3, #0
 8000de4:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000de6:	e004      	b.n	8000df2 <Flash_Memory_Write_Payload+0xa8>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000de8:	2301      	movs	r3, #1
 8000dea:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000dec:	e001      	b.n	8000df2 <Flash_Memory_Write_Payload+0xa8>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000dee:	2300      	movs	r3, #0
 8000df0:	77bb      	strb	r3, [r7, #30]
	}
	
	return Flash_Payload_Write_Status;
 8000df2:	7fbb      	ldrb	r3, [r7, #30]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3720      	adds	r7, #32
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bdb0      	pop	{r4, r5, r7, pc}

08000dfc <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write	(uint8_t *Host_Buffer){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  uint32_t HOST_Address = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000e10:	2300      	movs	r3, #0
 8000e12:	72bb      	strb	r3, [r7, #10]
	uint8_t Payload_Len = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	72fb      	strb	r3, [r7, #11]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	727b      	strb	r3, [r7, #9]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Write data into different memories of the MCU \r\n");
#endif
	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000e26:	8afb      	ldrh	r3, [r7, #22]
 8000e28:	3b04      	subs	r3, #4
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000e32:	8afb      	ldrh	r3, [r7, #22]
 8000e34:	3b04      	subs	r3, #4
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fd50 	bl	80008e0 <Calculate_CRC32>
 8000e40:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d139      	bne.n	8000eba <Bootloader_Memory_Write+0xbe>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fce8 	bl	800081c <Bootloader_Send_ACK>
		/* Extract the payload length from the Host packet */
		Payload_Len  = Host_Buffer[6];
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	799b      	ldrb	r3, [r3, #6]
 8000e50:	72fb      	strb	r3, [r7, #11]
		/* Extract the start address from the Host packet */
    HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e58:	60fb      	str	r3, [r7, #12]
    /* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f7ff fe7e 	bl	8000b5c <Host_Address_Verification>
 8000e60:	4603      	mov	r3, r0
 8000e62:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification){
 8000e64:	7abb      	ldrb	r3, [r7, #10]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d11e      	bne.n	8000ea8 <Bootloader_Memory_Write+0xac>
         Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3307      	adds	r3, #7
 8000e6e:	7afa      	ldrb	r2, [r7, #11]
 8000e70:	b292      	uxth	r2, r2
 8000e72:	68f9      	ldr	r1, [r7, #12]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff68 	bl	8000d4a <Flash_Memory_Write_Payload>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	727b      	strb	r3, [r7, #9]
			   if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status){
 8000e7e:	7a7b      	ldrb	r3, [r7, #9]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10a      	bne.n	8000e9a <Bootloader_Memory_Write+0x9e>
				 /* Report payload write passed */
				 Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e84:	f107 0309 	add.w	r3, r7, #9
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fcb2 	bl	80007f4 <Bootloader_Send_Data_To_Host>
				 /* ------> Send Acknowledge <------ */
         Bootloader_Send_Data_To_Host((uint8_t* )CBL_SEND_ACK, 1);						 
 8000e90:	2101      	movs	r1, #1
 8000e92:	20cd      	movs	r0, #205	; 0xcd
 8000e94:	f7ff fcae 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("CRC Verification Failed \r\n");
#endif
	Bootloader_Send_NACK();
	}	
}
 8000e98:	e011      	b.n	8000ebe <Bootloader_Memory_Write+0xc2>
				Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e9a:	f107 0309 	add.w	r3, r7, #9
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fca7 	bl	80007f4 <Bootloader_Send_Data_To_Host>
}
 8000ea6:	e00a      	b.n	8000ebe <Bootloader_Memory_Write+0xc2>
			Address_Verification = ADDRESS_IS_INVALID;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000eac:	f107 030a 	add.w	r3, r7, #10
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fc9e 	bl	80007f4 <Bootloader_Send_Data_To_Host>
}
 8000eb8:	e001      	b.n	8000ebe <Bootloader_Memory_Write+0xc2>
	Bootloader_Send_NACK();
 8000eba:	f7ff fcc4 	bl	8000846 <Bootloader_Send_NACK>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <CBL_STM32F_Get_RDP_Level>:
  * @brief  Read Protection Level.
  * @param  no param
  * @retval Protection Level.
**************************************************************************************/

static inline uint8_t CBL_STM32F_Get_RDP_Level (void){
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b088      	sub	sp, #32
 8000eca:	af00      	add	r7, sp, #0
	FLASH_OBProgramInitTypeDef FLASH_OBProgram;
	/* Get the Option byte configuration */
	HAL_FLASHEx_OBGetConfig(&FLASH_OBProgram);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 ff98 	bl	8001e04 <HAL_FLASHEx_OBGetConfig>
	
	return (uint8_t)(FLASH_OBProgram.RDPLevel);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	b2db      	uxtb	r3, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <Bootloader_Read_Protection_Level>:

static void Bootloader_Read_Protection_Level(uint8_t *Host_Buffer){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
	uint8_t RDP_Level = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
	BL_Print_Message("Read the FLASH Read Protection Out level \r\n");
#endif
	/* Extract the CRC32 and packet length sent by the HOST */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t *)((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 8000efe:	8afb      	ldrh	r3, [r7, #22]
 8000f00:	3b04      	subs	r3, #4
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	613b      	str	r3, [r7, #16]
/* CRC Verification */
	if(CRC_VERIFICATION_PASSED == Calculate_CRC32((uint8_t *)&Host_Buffer[0] , Host_CMD_Packet_Len - 4, Host_CRC32)){
 8000f0a:	8afb      	ldrh	r3, [r7, #22]
 8000f0c:	3b04      	subs	r3, #4
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fce4 	bl	80008e0 <Calculate_CRC32>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10d      	bne.n	8000f3a <Bootloader_Read_Protection_Level+0x5a>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Passed \r\n");
#endif
		Bootloader_Send_ACK(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff fc7c 	bl	800081c <Bootloader_Send_ACK>
		/* Read Protection Level */
		RDP_Level = CBL_STM32F_Get_RDP_Level();
 8000f24:	f7ff ffcf 	bl	8000ec6 <CBL_STM32F_Get_RDP_Level>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
		/* Report Valid Protection Level */
		Bootloader_Send_Data_To_Host((uint8_t *)&RDP_Level, 1);
 8000f2c:	f107 030f 	add.w	r3, r7, #15
 8000f30:	2101      	movs	r1, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fc5e 	bl	80007f4 <Bootloader_Send_Data_To_Host>
#if (BL_DEBUG_ENABLE == DEBUG_INFO_ENABLE)
		BL_Print_Message("CRC Verification Failed \r\n");
#endif
		Bootloader_Send_NACK();
	}
}
 8000f38:	e001      	b.n	8000f3e <Bootloader_Read_Protection_Level+0x5e>
		Bootloader_Send_NACK();
 8000f3a:	f7ff fc84 	bl	8000846 <Bootloader_Send_NACK>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <Bootloader_Change_Read_Protection_Level>:

/* Additional Features ----------------------------------------------------------*/
static uint8_t Change_ROP_Level                             (uint32_t ROP_Level){}
static void    Bootloader_Change_Read_Protection_Level  		(uint8_t *Host_Buffer){}
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <Bootloader_Enable_RW_Protection>:
static void    Bootloader_Enable_RW_Protection							(uint8_t *Host_Buffer){}
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <Bootloader_Memory_Read>:
static void    Bootloader_Memory_Read										  	(uint8_t *Host_Buffer){}
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <Bootloader_Get_Sector_Protection_Status>:
static void    Bootloader_Get_Sector_Protection_Status			(uint8_t *Host_Buffer){}
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <Bootloader_Read_OTP>:
static void    Bootloader_Read_OTP													(uint8_t *Host_Buffer){}
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_CRC_Init+0x20>)
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <MX_CRC_Init+0x24>)
 8000fb4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_CRC_Init+0x20>)
 8000fb8:	f000 fca7 	bl	800190a <HAL_CRC_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000fc2:	f000 f92f 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000150 	.word	0x20000150
 8000fd0:	40023000 	.word	0x40023000

08000fd4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <HAL_CRC_MspInit+0x3c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10d      	bne.n	8001002 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_CRC_MspInit+0x40>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <HAL_CRC_MspInit+0x40>)
 8000ff0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_CRC_MspInit+0x40>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023000 	.word	0x40023000
 8001014:	40023800 	.word	0x40023800

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a2c      	ldr	r2, [pc, #176]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a25      	ldr	r2, [pc, #148]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a1e      	ldr	r2, [pc, #120]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <MX_GPIO_Init+0xd0>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_GPIO_Init+0xd0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2120      	movs	r1, #32
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <MX_GPIO_Init+0xd4>)
 80010a4:	f001 f964 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_GPIO_Init+0xd8>)
 80010c0:	f000 ffc2 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c4:	2320      	movs	r3, #32
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0xd4>)
 80010dc:	f000 ffb4 	bl	8002048 <HAL_GPIO_Init>

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020800 	.word	0x40020800

080010f4 <main>:
  * @retval int
  */
volatile uint8_t indecator_Var, dummy;
#include"bootloader.h"
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f8:	f000 fab0 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fc:	f000 f824 	bl	8001148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001100:	f7ff ff8a 	bl	8001018 <MX_GPIO_Init>
  MX_CRC_Init();
 8001104:	f7ff ff52 	bl	8000fac <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001108:	f000 f92c 	bl	8001364 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800110c:	f000 f954 	bl	80013b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001110:	f000 f97c 	bl	800140c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001114:	2201      	movs	r2, #1
 8001116:	2120      	movs	r1, #32
 8001118:	4808      	ldr	r0, [pc, #32]	; (800113c <main+0x48>)
 800111a:	f001 f929 	bl	8002370 <HAL_GPIO_WritePin>

  	while (1)
    {

    /* USER CODE END WHILE */
  		HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2201      	movs	r2, #1
 8001124:	4906      	ldr	r1, [pc, #24]	; (8001140 <main+0x4c>)
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <main+0x50>)
 8001128:	f002 f8f7 	bl	800331a <HAL_UART_Receive>
  				if (0x7F == indecator_Var)
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <main+0x4c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b7f      	cmp	r3, #127	; 0x7f
 8001134:	d1f3      	bne.n	800111e <main+0x2a>
  				    BL_UART_Fetch_Host_Command();
 8001136:	f7ff fa5f 	bl	80005f8 <BL_UART_Fetch_Host_Command>
  		HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 800113a:	e7f0      	b.n	800111e <main+0x2a>
 800113c:	40020000 	.word	0x40020000
 8001140:	20000158 	.word	0x20000158
 8001144:	200001f0 	.word	0x200001f0

08001148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	; 0x50
 800114c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2234      	movs	r2, #52	; 0x34
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fcc6 	bl	8003ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <SystemClock_Config+0xd4>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	4a29      	ldr	r2, [pc, #164]	; (800121c <SystemClock_Config+0xd4>)
 8001176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117a:	6413      	str	r3, [r2, #64]	; 0x40
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <SystemClock_Config+0xd4>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <SystemClock_Config+0xd8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <SystemClock_Config+0xd8>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b20      	ldr	r3, [pc, #128]	; (8001220 <SystemClock_Config+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b0:	2310      	movs	r3, #16
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b4:	2302      	movs	r3, #2
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011bc:	2310      	movs	r3, #16
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fd26 	bl	8002c28 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011e2:	f000 f81f 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2102      	movs	r1, #2
 8001202:	4618      	mov	r0, r3
 8001204:	f001 f8ce 	bl	80023a4 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800120e:	f000 f809 	bl	8001224 <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	; 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
}
 800122a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800122c:	e7fe      	b.n	800122c <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <HAL_MspInit+0x4c>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <HAL_MspInit+0x4c>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001244:	6453      	str	r3, [r2, #68]	; 0x44
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x4c>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x4c>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6413      	str	r3, [r2, #64]	; 0x40
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800126e:	2007      	movs	r0, #7
 8001270:	f000 fb18 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 fa18 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f002 fbf8 	bl	8003af8 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	2000015c 	.word	0x2000015c
 800133c:	200003a8 	.word	0x200003a8

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART1_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800139c:	f001 fee2 	bl	8003164 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f7ff ff3d 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000160 	.word	0x20000160
 80013b4:	40011000 	.word	0x40011000

080013b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART2_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f001 feb8 	bl	8003164 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f7ff ff13 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001a8 	.word	0x200001a8
 8001408:	40004400 	.word	0x40004400

0800140c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_USART3_UART_Init+0x50>)
 8001414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001418:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800141c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_USART3_UART_Init+0x4c>)
 8001444:	f001 fe8e 	bl	8003164 <HAL_UART_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800144e:	f7ff fee9 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200001f0 	.word	0x200001f0
 800145c:	40004800 	.word	0x40004800

08001460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a5b      	ldr	r2, [pc, #364]	; (80015ec <HAL_UART_MspInit+0x18c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12d      	bne.n	80014de <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
 8001486:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a59      	ldr	r2, [pc, #356]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	4b53      	ldr	r3, [pc, #332]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a52      	ldr	r2, [pc, #328]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014cc:	2307      	movs	r3, #7
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4847      	ldr	r0, [pc, #284]	; (80015f4 <HAL_UART_MspInit+0x194>)
 80014d8:	f000 fdb6 	bl	8002048 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014dc:	e081      	b.n	80015e2 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_UART_MspInit+0x198>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d12c      	bne.n	8001542 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
 80014ec:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a3f      	ldr	r2, [pc, #252]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_UART_MspInit+0x190>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001520:	230c      	movs	r3, #12
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001530:	2307      	movs	r3, #7
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <HAL_UART_MspInit+0x194>)
 800153c:	f000 fd84 	bl	8002048 <HAL_GPIO_Init>
}
 8001540:	e04f      	b.n	80015e2 <HAL_UART_MspInit+0x182>
  else if(uartHandle->Instance==USART3)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <HAL_UART_MspInit+0x19c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d14a      	bne.n	80015e2 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART3_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a26      	ldr	r2, [pc, #152]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0x190>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_UART_MspInit+0x190>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015a0:	2320      	movs	r3, #32
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b0:	2307      	movs	r3, #7
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x1a0>)
 80015bc:	f000 fd44 	bl	8002048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d2:	2307      	movs	r3, #7
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <HAL_UART_MspInit+0x1a4>)
 80015de:	f000 fd33 	bl	8002048 <HAL_GPIO_Init>
}
 80015e2:	bf00      	nop
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40011000 	.word	0x40011000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020000 	.word	0x40020000
 80015f8:	40004400 	.word	0x40004400
 80015fc:	40004800 	.word	0x40004800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020400 	.word	0x40020400

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800160c:	f7ff fe98 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001636:	f002 fa65 	bl	8003b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fd5b 	bl	80010f4 <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800164c:	080046dc 	.word	0x080046dc
  ldr r2, =_sbss
 8001650:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001654:	200003a4 	.word	0x200003a4

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f90d 	bl	80018a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fdce 	bl	8001230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f917 	bl	80018f2 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f8ed 	bl	80018ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	; (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000018 	.word	0x20000018
 80016fc:	20000014 	.word	0x20000014

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	; (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000018 	.word	0x20000018
 8001724:	20000238 	.word	0x20000238

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000238 	.word	0x20000238

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db0a      	blt.n	80017ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	490c      	ldr	r1, [pc, #48]	; (80017f0 <__NVIC_SetPriority+0x4c>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	0112      	lsls	r2, r2, #4
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	440b      	add	r3, r1
 80017c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017cc:	e00a      	b.n	80017e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4908      	ldr	r1, [pc, #32]	; (80017f4 <__NVIC_SetPriority+0x50>)
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	3b04      	subs	r3, #4
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	440b      	add	r3, r1
 80017e2:	761a      	strb	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b089      	sub	sp, #36	; 0x24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f1c3 0307 	rsb	r3, r3, #7
 8001812:	2b04      	cmp	r3, #4
 8001814:	bf28      	it	cs
 8001816:	2304      	movcs	r3, #4
 8001818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3304      	adds	r3, #4
 800181e:	2b06      	cmp	r3, #6
 8001820:	d902      	bls.n	8001828 <NVIC_EncodePriority+0x30>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3b03      	subs	r3, #3
 8001826:	e000      	b.n	800182a <NVIC_EncodePriority+0x32>
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	f04f 32ff 	mov.w	r2, #4294967295
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43da      	mvns	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	401a      	ands	r2, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001840:	f04f 31ff 	mov.w	r1, #4294967295
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	43d9      	mvns	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001850:	4313      	orrs	r3, r2
         );
}
 8001852:	4618      	mov	r0, r3
 8001854:	3724      	adds	r7, #36	; 0x24
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3b01      	subs	r3, #1
 800186c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001870:	d301      	bcc.n	8001876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001872:	2301      	movs	r3, #1
 8001874:	e00f      	b.n	8001896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <SysTick_Config+0x40>)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187e:	210f      	movs	r1, #15
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	f7ff ff8e 	bl	80017a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <SysTick_Config+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <SysTick_Config+0x40>)
 8001890:	2207      	movs	r2, #7
 8001892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e000e010 	.word	0xe000e010

080018a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff47 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4603      	mov	r3, r0
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018cc:	f7ff ff5c 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	6978      	ldr	r0, [r7, #20]
 80018d8:	f7ff ff8e 	bl	80017f8 <NVIC_EncodePriority>
 80018dc:	4602      	mov	r2, r0
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff5d 	bl	80017a4 <__NVIC_SetPriority>
}
 80018ea:	bf00      	nop
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb0 	bl	8001860 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e00e      	b.n	800193a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	795b      	ldrb	r3, [r3, #5]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff fb51 	bl	8000fd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
 800195c:	e00a      	b.n	8001974 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	441a      	add	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3f0      	bcc.n	800195e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800198a:	693b      	ldr	r3, [r7, #16]
}
 800198c:	4618      	mov	r0, r3
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_FLASH_Program+0xa0>)
 80019ac:	7e1b      	ldrb	r3, [r3, #24]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_FLASH_Program+0x1e>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e03b      	b.n	8001a2e <HAL_FLASH_Program+0x96>
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_FLASH_Program+0xa0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019c0:	f000 f870 	bl	8001aa4 <FLASH_WaitForLastOperation>
 80019c4:	4603      	mov	r3, r0
 80019c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d12b      	bne.n	8001a26 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d105      	bne.n	80019e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019d4:	783b      	ldrb	r3, [r7, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f000 f91b 	bl	8001c14 <FLASH_Program_Byte>
 80019de:	e016      	b.n	8001a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80019e6:	883b      	ldrh	r3, [r7, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	68b8      	ldr	r0, [r7, #8]
 80019ec:	f000 f8ee 	bl	8001bcc <FLASH_Program_HalfWord>
 80019f0:	e00d      	b.n	8001a0e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d105      	bne.n	8001a04 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	4619      	mov	r1, r3
 80019fc:	68b8      	ldr	r0, [r7, #8]
 80019fe:	f000 f8c3 	bl	8001b88 <FLASH_Program_Word>
 8001a02:	e004      	b.n	8001a0e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a08:	68b8      	ldr	r0, [r7, #8]
 8001a0a:	f000 f88b 	bl	8001b24 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a12:	f000 f847 	bl	8001aa4 <FLASH_WaitForLastOperation>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_FLASH_Program+0xa4>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_FLASH_Program+0xa4>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_FLASH_Program+0xa0>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000023c 	.word	0x2000023c
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_FLASH_Unlock+0x38>)
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	da0b      	bge.n	8001a6a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_FLASH_Unlock+0x38>)
 8001a54:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_FLASH_Unlock+0x3c>)
 8001a56:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_FLASH_Unlock+0x38>)
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_FLASH_Unlock+0x40>)
 8001a5c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_FLASH_Unlock+0x38>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da01      	bge.n	8001a6a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	45670123 	.word	0x45670123
 8001a80:	cdef89ab 	.word	0xcdef89ab

08001a84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_FLASH_Lock+0x1c>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_FLASH_Lock+0x1c>)
 8001a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a92:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <FLASH_WaitForLastOperation+0x78>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab6:	f7ff fe37 	bl	8001728 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001abc:	e010      	b.n	8001ae0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d00c      	beq.n	8001ae0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <FLASH_WaitForLastOperation+0x38>
 8001acc:	f7ff fe2c 	bl	8001728 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d201      	bcs.n	8001ae0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e019      	b.n	8001b14 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <FLASH_WaitForLastOperation+0x7c>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e8      	bne.n	8001abe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <FLASH_WaitForLastOperation+0x7c>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <FLASH_WaitForLastOperation+0x7c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <FLASH_WaitForLastOperation+0x7c>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b0a:	f000 f8a5 	bl	8001c58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
  
}  
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000023c 	.word	0x2000023c
 8001b20:	40023c00 	.word	0x40023c00

08001b24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <FLASH_Program_DoubleWord+0x60>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001b5a:	f3bf 8f6f 	isb	sy
}
 8001b5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	2300      	movs	r3, #0
 8001b70:	68f9      	ldr	r1, [r7, #12]
 8001b72:	3104      	adds	r1, #4
 8001b74:	4613      	mov	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001baa:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <FLASH_Program_Word+0x40>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	601a      	str	r2, [r3, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023c00 	.word	0x40023c00

08001bcc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	4a06      	ldr	r2, [pc, #24]	; (8001c10 <FLASH_Program_HalfWord+0x44>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	801a      	strh	r2, [r3, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40023c00 	.word	0x40023c00

08001c14 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c34:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <FLASH_Program_Byte+0x40>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	701a      	strb	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40023c00 	.word	0x40023c00

08001c58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c68:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001c72:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001c76:	2210      	movs	r2, #16
 8001c78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c7a:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001c86:	4b26      	ldr	r3, [pc, #152]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f043 0308 	orr.w	r3, r3, #8
 8001c8e:	4a24      	ldr	r2, [pc, #144]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001c90:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001c94:	2220      	movs	r2, #32
 8001c96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ca4:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001cae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cb2:	2240      	movs	r2, #64	; 0x40
 8001cb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cb6:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f043 0302 	orr.w	r3, r3, #2
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001ccc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cd0:	2280      	movs	r2, #128	; 0x80
 8001cd2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001cea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <FLASH_SetErrorCode+0xc8>)
 8001d0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <FLASH_SetErrorCode+0xc4>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	60da      	str	r2, [r3, #12]
  }
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	2000023c 	.word	0x2000023c

08001d24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_FLASHEx_Erase+0x1e>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e058      	b.n	8001df4 <HAL_FLASHEx_Erase+0xd0>
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d4c:	f7ff feaa 	bl	8001aa4 <FLASH_WaitForLastOperation>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d148      	bne.n	8001dec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d115      	bne.n	8001d96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f868 	bl	8001e4c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d80:	f7ff fe90 	bl	8001aa4 <FLASH_WaitForLastOperation>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6113      	str	r3, [r2, #16]
 8001d94:	e028      	b.n	8001de8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e01c      	b.n	8001dd8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f000 f874 	bl	8001e94 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db0:	f7ff fe78 	bl	8001aa4 <FLASH_WaitForLastOperation>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001dbe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dc2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	601a      	str	r2, [r3, #0]
          break;
 8001dd0:	e00a      	b.n	8001de8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3da      	bcc.n	8001d9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001de8:	f000 f8e8 	bl	8001fbc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	761a      	strb	r2, [r3, #24]

  return status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000023c 	.word	0x2000023c
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	220f      	movs	r2, #15
 8001e10:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001e12:	f000 f897 	bl	8001f44 <FLASH_OB_GetWRP>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001e1e:	f000 f89d 	bl	8001f5c <FLASH_OB_GetRDP>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001e2a:	f000 f87b 	bl	8001f24 <FLASH_OB_GetUser>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001e36:	f000 f8b1 	bl	8001f9c <FLASH_OB_GetBOR>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	615a      	str	r2, [r3, #20]
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <FLASH_MassErase+0x44>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6113      	str	r3, [r2, #16]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40023c00 	.word	0x40023c00

08001e94 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e010      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d103      	bne.n	8001ebe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e009      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d103      	bne.n	8001ecc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	e002      	b.n	8001ed2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001ecc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001edc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	490f      	ldr	r1, [pc, #60]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ef0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ef4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <FLASH_Erase_Sector+0x8c>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6113      	str	r3, [r2, #16]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <FLASH_OB_GetUser+0x1c>)
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f023 031f 	bic.w	r3, r3, #31
 8001f32:	b2db      	uxtb	r3, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00

08001f44 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <FLASH_OB_GetWRP+0x14>)
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	b29b      	uxth	r3, r3
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40023c16 	.word	0x40023c16

08001f5c <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001f62:	23aa      	movs	r3, #170	; 0xaa
 8001f64:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <FLASH_OB_GetRDP+0x3c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2bcc      	cmp	r3, #204	; 0xcc
 8001f6e:	d102      	bne.n	8001f76 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001f70:	23cc      	movs	r3, #204	; 0xcc
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	e009      	b.n	8001f8a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <FLASH_OB_GetRDP+0x3c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2baa      	cmp	r3, #170	; 0xaa
 8001f7e:	d102      	bne.n	8001f86 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001f80:	23aa      	movs	r3, #170	; 0xaa
 8001f82:	71fb      	strb	r3, [r7, #7]
 8001f84:	e001      	b.n	8001f8a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001f86:	2355      	movs	r3, #85	; 0x55
 8001f88:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40023c15 	.word	0x40023c15

08001f9c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <FLASH_OB_GetBOR+0x1c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	b2db      	uxtb	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023c14 	.word	0x40023c14

08001fbc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d017      	beq.n	8001ffc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fd6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001fee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ffa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <FLASH_FlushCaches+0x88>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002004:	2b00      	cmp	r3, #0
 8002006:	d017      	beq.n	8002038 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <FLASH_FlushCaches+0x88>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <FLASH_FlushCaches+0x88>)
 800200e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002012:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <FLASH_FlushCaches+0x88>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <FLASH_FlushCaches+0x88>)
 800201a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <FLASH_FlushCaches+0x88>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a07      	ldr	r2, [pc, #28]	; (8002044 <FLASH_FlushCaches+0x88>)
 8002026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800202a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <FLASH_FlushCaches+0x88>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <FLASH_FlushCaches+0x88>)
 8002032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002036:	6013      	str	r3, [r2, #0]
  }
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40023c00 	.word	0x40023c00

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e165      	b.n	8002330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	429a      	cmp	r2, r3
 800207e:	f040 8154 	bne.w	800232a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d005      	beq.n	800209a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	2b02      	cmp	r3, #2
 8002098:	d130      	bne.n	80020fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	2203      	movs	r2, #3
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0201 	and.w	r2, r3, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b03      	cmp	r3, #3
 8002106:	d017      	beq.n	8002138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	2203      	movs	r2, #3
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d123      	bne.n	800218c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0203 	and.w	r2, r3, #3
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80ae 	beq.w	800232a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <HAL_GPIO_Init+0x300>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <HAL_GPIO_Init+0x300>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <HAL_GPIO_Init+0x300>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ea:	4a58      	ldr	r2, [pc, #352]	; (800234c <HAL_GPIO_Init+0x304>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	; (8002350 <HAL_GPIO_Init+0x308>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x21a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_GPIO_Init+0x30c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x216>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	; (8002358 <HAL_GPIO_Init+0x310>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x212>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	; (800235c <HAL_GPIO_Init+0x314>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x20e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	; (8002360 <HAL_GPIO_Init+0x318>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x20a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4a      	ldr	r2, [pc, #296]	; (8002364 <HAL_GPIO_Init+0x31c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x206>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a49      	ldr	r2, [pc, #292]	; (8002368 <HAL_GPIO_Init+0x320>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x202>
 8002246:	2306      	movs	r3, #6
 8002248:	e00c      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 800224a:	2307      	movs	r3, #7
 800224c:	e00a      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 800224e:	2305      	movs	r3, #5
 8002250:	e008      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 8002252:	2304      	movs	r3, #4
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 8002256:	2303      	movs	r3, #3
 8002258:	e004      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 800225a:	2302      	movs	r3, #2
 800225c:	e002      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 800225e:	2301      	movs	r3, #1
 8002260:	e000      	b.n	8002264 <HAL_GPIO_Init+0x21c>
 8002262:	2300      	movs	r3, #0
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	f002 0203 	and.w	r2, r2, #3
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	4093      	lsls	r3, r2
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002274:	4935      	ldr	r1, [pc, #212]	; (800234c <HAL_GPIO_Init+0x304>)
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_GPIO_Init+0x324>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a31      	ldr	r2, [pc, #196]	; (800236c <HAL_GPIO_Init+0x324>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_GPIO_Init+0x324>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_GPIO_Init+0x324>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_GPIO_Init+0x324>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_GPIO_Init+0x324>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_GPIO_Init+0x324>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <HAL_GPIO_Init+0x324>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	f67f ae96 	bls.w	8002064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	3724      	adds	r7, #36	; 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40013800 	.word	0x40013800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40021400 	.word	0x40021400
 8002368:	40021800 	.word	0x40021800
 800236c:	40013c00 	.word	0x40013c00

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0cc      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b68      	ldr	r3, [pc, #416]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d90c      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b65      	ldr	r3, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d044      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d003      	beq.n	8002462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	2b03      	cmp	r3, #3
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e067      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4934      	ldr	r1, [pc, #208]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002494:	f7ff f948 	bl	8001728 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff f944 	bl	8001728 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e04f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b25      	ldr	r3, [pc, #148]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d20c      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f855 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f8a8 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00
 8002560:	40023800 	.word	0x40023800
 8002564:	08004680 	.word	0x08004680
 8002568:	20000010 	.word	0x20000010
 800256c:	20000014 	.word	0x20000014

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000010 	.word	0x20000010

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800258c:	f7ff fff0 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4903      	ldr	r1, [pc, #12]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08004690 	.word	0x08004690

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b4:	f7ff ffdc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08004690 	.word	0x08004690

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0ae      	sub	sp, #184	; 0xb8
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fe:	4bcb      	ldr	r3, [pc, #812]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b0c      	cmp	r3, #12
 8002608:	f200 8206 	bhi.w	8002a18 <HAL_RCC_GetSysClockFreq+0x440>
 800260c:	a201      	add	r2, pc, #4	; (adr r2, 8002614 <HAL_RCC_GetSysClockFreq+0x3c>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002649 	.word	0x08002649
 8002618:	08002a19 	.word	0x08002a19
 800261c:	08002a19 	.word	0x08002a19
 8002620:	08002a19 	.word	0x08002a19
 8002624:	08002651 	.word	0x08002651
 8002628:	08002a19 	.word	0x08002a19
 800262c:	08002a19 	.word	0x08002a19
 8002630:	08002a19 	.word	0x08002a19
 8002634:	08002659 	.word	0x08002659
 8002638:	08002a19 	.word	0x08002a19
 800263c:	08002a19 	.word	0x08002a19
 8002640:	08002a19 	.word	0x08002a19
 8002644:	08002849 	.word	0x08002849
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4bb9      	ldr	r3, [pc, #740]	; (8002930 <HAL_RCC_GetSysClockFreq+0x358>)
 800264a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800264e:	e1e7      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002650:	4bb8      	ldr	r3, [pc, #736]	; (8002934 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002656:	e1e3      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002658:	4bb4      	ldr	r3, [pc, #720]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002664:	4bb1      	ldr	r3, [pc, #708]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d071      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4bae      	ldr	r3, [pc, #696]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800267c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002696:	4622      	mov	r2, r4
 8002698:	462b      	mov	r3, r5
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	0159      	lsls	r1, r3, #5
 80026a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a8:	0150      	lsls	r0, r2, #5
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4621      	mov	r1, r4
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	6439      	str	r1, [r7, #64]	; 0x40
 80026b4:	4629      	mov	r1, r5
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	647b      	str	r3, [r7, #68]	; 0x44
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026c8:	4649      	mov	r1, r9
 80026ca:	018b      	lsls	r3, r1, #6
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026d2:	4641      	mov	r1, r8
 80026d4:	018a      	lsls	r2, r1, #6
 80026d6:	4641      	mov	r1, r8
 80026d8:	1a51      	subs	r1, r2, r1
 80026da:	63b9      	str	r1, [r7, #56]	; 0x38
 80026dc:	4649      	mov	r1, r9
 80026de:	eb63 0301 	sbc.w	r3, r3, r1
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80026f0:	4649      	mov	r1, r9
 80026f2:	00cb      	lsls	r3, r1, #3
 80026f4:	4641      	mov	r1, r8
 80026f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fa:	4641      	mov	r1, r8
 80026fc:	00ca      	lsls	r2, r1, #3
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	4603      	mov	r3, r0
 8002704:	4622      	mov	r2, r4
 8002706:	189b      	adds	r3, r3, r2
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
 800270a:	462b      	mov	r3, r5
 800270c:	460a      	mov	r2, r1
 800270e:	eb42 0303 	adc.w	r3, r2, r3
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002720:	4629      	mov	r1, r5
 8002722:	024b      	lsls	r3, r1, #9
 8002724:	4621      	mov	r1, r4
 8002726:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800272a:	4621      	mov	r1, r4
 800272c:	024a      	lsls	r2, r1, #9
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800273c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002740:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002744:	f7fd fdb4 	bl	80002b0 <__aeabi_uldivmod>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4613      	mov	r3, r2
 800274e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002752:	e067      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002754:	4b75      	ldr	r3, [pc, #468]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	099b      	lsrs	r3, r3, #6
 800275a:	2200      	movs	r2, #0
 800275c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002760:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	67bb      	str	r3, [r7, #120]	; 0x78
 800276e:	2300      	movs	r3, #0
 8002770:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002772:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002776:	4622      	mov	r2, r4
 8002778:	462b      	mov	r3, r5
 800277a:	f04f 0000 	mov.w	r0, #0
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	0159      	lsls	r1, r3, #5
 8002784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002788:	0150      	lsls	r0, r2, #5
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4621      	mov	r1, r4
 8002790:	1a51      	subs	r1, r2, r1
 8002792:	62b9      	str	r1, [r7, #40]	; 0x28
 8002794:	4629      	mov	r1, r5
 8002796:	eb63 0301 	sbc.w	r3, r3, r1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80027a8:	4649      	mov	r1, r9
 80027aa:	018b      	lsls	r3, r1, #6
 80027ac:	4641      	mov	r1, r8
 80027ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b2:	4641      	mov	r1, r8
 80027b4:	018a      	lsls	r2, r1, #6
 80027b6:	4641      	mov	r1, r8
 80027b8:	ebb2 0a01 	subs.w	sl, r2, r1
 80027bc:	4649      	mov	r1, r9
 80027be:	eb63 0b01 	sbc.w	fp, r3, r1
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d6:	4692      	mov	sl, r2
 80027d8:	469b      	mov	fp, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	eb1a 0303 	adds.w	r3, sl, r3
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	462b      	mov	r3, r5
 80027e4:	eb4b 0303 	adc.w	r3, fp, r3
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027f6:	4629      	mov	r1, r5
 80027f8:	028b      	lsls	r3, r1, #10
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002800:	4621      	mov	r1, r4
 8002802:	028a      	lsls	r2, r1, #10
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280c:	2200      	movs	r2, #0
 800280e:	673b      	str	r3, [r7, #112]	; 0x70
 8002810:	677a      	str	r2, [r7, #116]	; 0x74
 8002812:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002816:	f7fd fd4b 	bl	80002b0 <__aeabi_uldivmod>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4613      	mov	r3, r2
 8002820:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002824:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c1b      	lsrs	r3, r3, #16
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	3301      	adds	r3, #1
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800283a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002846:	e0eb      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002848:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002850:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d06b      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_RCC_GetSysClockFreq+0x354>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	099b      	lsrs	r3, r3, #6
 8002866:	2200      	movs	r2, #0
 8002868:	66bb      	str	r3, [r7, #104]	; 0x68
 800286a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800286c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002872:	663b      	str	r3, [r7, #96]	; 0x60
 8002874:	2300      	movs	r3, #0
 8002876:	667b      	str	r3, [r7, #100]	; 0x64
 8002878:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800287c:	4622      	mov	r2, r4
 800287e:	462b      	mov	r3, r5
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	0159      	lsls	r1, r3, #5
 800288a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288e:	0150      	lsls	r0, r2, #5
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4621      	mov	r1, r4
 8002896:	1a51      	subs	r1, r2, r1
 8002898:	61b9      	str	r1, [r7, #24]
 800289a:	4629      	mov	r1, r5
 800289c:	eb63 0301 	sbc.w	r3, r3, r1
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028ae:	4659      	mov	r1, fp
 80028b0:	018b      	lsls	r3, r1, #6
 80028b2:	4651      	mov	r1, sl
 80028b4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b8:	4651      	mov	r1, sl
 80028ba:	018a      	lsls	r2, r1, #6
 80028bc:	4651      	mov	r1, sl
 80028be:	ebb2 0801 	subs.w	r8, r2, r1
 80028c2:	4659      	mov	r1, fp
 80028c4:	eb63 0901 	sbc.w	r9, r3, r1
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028dc:	4690      	mov	r8, r2
 80028de:	4699      	mov	r9, r3
 80028e0:	4623      	mov	r3, r4
 80028e2:	eb18 0303 	adds.w	r3, r8, r3
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	462b      	mov	r3, r5
 80028ea:	eb49 0303 	adc.w	r3, r9, r3
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028fc:	4629      	mov	r1, r5
 80028fe:	024b      	lsls	r3, r1, #9
 8002900:	4621      	mov	r1, r4
 8002902:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002906:	4621      	mov	r1, r4
 8002908:	024a      	lsls	r2, r1, #9
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002912:	2200      	movs	r2, #0
 8002914:	65bb      	str	r3, [r7, #88]	; 0x58
 8002916:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002918:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800291c:	f7fd fcc8 	bl	80002b0 <__aeabi_uldivmod>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4613      	mov	r3, r2
 8002926:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800292a:	e065      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x420>
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x458>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	2200      	movs	r2, #0
 8002940:	4618      	mov	r0, r3
 8002942:	4611      	mov	r1, r2
 8002944:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002948:	653b      	str	r3, [r7, #80]	; 0x50
 800294a:	2300      	movs	r3, #0
 800294c:	657b      	str	r3, [r7, #84]	; 0x54
 800294e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002952:	4642      	mov	r2, r8
 8002954:	464b      	mov	r3, r9
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4641      	mov	r1, r8
 800296c:	1a51      	subs	r1, r2, r1
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	4649      	mov	r1, r9
 8002972:	eb63 0301 	sbc.w	r3, r3, r1
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002984:	4659      	mov	r1, fp
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298e:	4651      	mov	r1, sl
 8002990:	018a      	lsls	r2, r1, #6
 8002992:	4651      	mov	r1, sl
 8002994:	1a54      	subs	r4, r2, r1
 8002996:	4659      	mov	r1, fp
 8002998:	eb63 0501 	sbc.w	r5, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	00eb      	lsls	r3, r5, #3
 80029a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029aa:	00e2      	lsls	r2, r4, #3
 80029ac:	4614      	mov	r4, r2
 80029ae:	461d      	mov	r5, r3
 80029b0:	4643      	mov	r3, r8
 80029b2:	18e3      	adds	r3, r4, r3
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	464b      	mov	r3, r9
 80029b8:	eb45 0303 	adc.w	r3, r5, r3
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ca:	4629      	mov	r1, r5
 80029cc:	028b      	lsls	r3, r1, #10
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d4:	4621      	mov	r1, r4
 80029d6:	028a      	lsls	r2, r1, #10
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029e0:	2200      	movs	r2, #0
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80029e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ea:	f7fd fc61 	bl	80002b0 <__aeabi_uldivmod>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4613      	mov	r3, r2
 80029f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x458>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0f1b      	lsrs	r3, r3, #28
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a16:	e003      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	37b8      	adds	r7, #184	; 0xb8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400

08002a38 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a3e:	f7fe fe73 	bl	8001728 <HAL_GetTick>
 8002a42:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a44:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7fe fe69 	bl	8001728 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0d0      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002a70:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a66      	ldr	r2, [pc, #408]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a7c:	f7fe fe54 	bl	8001728 <HAL_GetTick>
 8002a80:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8a:	f7fe fe4d 	bl	8001728 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b2      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002aa0:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002aac:	f7fe fe3c 	bl	8001728 <HAL_GetTick>
 8002ab0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002ab2:	4b57      	ldr	r3, [pc, #348]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a56      	ldr	r2, [pc, #344]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ab8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002abc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fe32 	bl	8001728 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b64      	cmp	r3, #100	; 0x64
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e099      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ad2:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ade:	f7fe fe23 	bl	8001728 <HAL_GetTick>
 8002ae2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fe19 	bl	8001728 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e080      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b10:	f7fe fe0a 	bl	8001728 <HAL_GetTick>
 8002b14:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3d      	ldr	r2, [pc, #244]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b20:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b24:	f7fe fe00 	bl	8001728 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b42:	f7fe fdf1 	bl	8001728 <HAL_GetTick>
 8002b46:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b56:	f7fe fde7 	bl	8001728 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e04e      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_DeInit+0x11e>
#endif /* RCC_PLLSAI_SUPPORT */

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
 8002b74:	4b26      	ldr	r3, [pc, #152]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b76:	4a27      	ldr	r2, [pc, #156]	; (8002c14 <HAL_RCC_DeInit+0x1dc>)
 8002b78:	605a      	str	r2, [r3, #4]
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */

  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_RCC_DeInit+0x1dc>)
 8002b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <HAL_RCC_DeInit+0x1e0>)
 8002b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b90:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002b94:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002b96:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ba0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a17      	ldr	r2, [pc, #92]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bb4:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002bb8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bc4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bd0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002bd2:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_RCC_DeInit+0x1d8>)
 8002be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be8:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCC_DeInit+0x1e4>)
 8002bec:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <HAL_RCC_DeInit+0x1e8>)
 8002bee:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCC_DeInit+0x1ec>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fd53 	bl	80016a0 <HAL_InitTick>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002c04:	2300      	movs	r3, #0
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	24003010 	.word	0x24003010
 8002c18:	04003010 	.word	0x04003010
 8002c1c:	20000010 	.word	0x20000010
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	20000014 	.word	0x20000014

08002c28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e28d      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 8083 	beq.w	8002d4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c48:	4b94      	ldr	r3, [pc, #592]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d019      	beq.n	8002c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c54:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d106      	bne.n	8002c6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c60:	4b8e      	ldr	r3, [pc, #568]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6c:	d00c      	beq.n	8002c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c76:	2b0c      	cmp	r3, #12
 8002c78:	d112      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x124>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d157      	bne.n	8002d4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e25a      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x90>
 8002caa:	4b7c      	ldr	r3, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a7b      	ldr	r2, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xcc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xb4>
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a75      	ldr	r2, [pc, #468]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a72      	ldr	r2, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xcc>
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6b      	ldr	r2, [pc, #428]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fd14 	bl	8001728 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fd10 	bl	8001728 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e21f      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xdc>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe fd00 	bl	8001728 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fcfc 	bl	8001728 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e20b      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b57      	ldr	r3, [pc, #348]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x104>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d06f      	beq.n	8002e3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d5a:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d017      	beq.n	8002d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d66:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d105      	bne.n	8002d7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d72:	4b4a      	ldr	r3, [pc, #296]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x186>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1d3      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4937      	ldr	r1, [pc, #220]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCC_OscConfig+0x278>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fca9 	bl	8001728 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe fca5 	bl	8001728 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1b4      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4925      	ldr	r1, [pc, #148]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_RCC_OscConfig+0x278>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fc88 	bl	8001728 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7fe fc84 	bl	8001728 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e193      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d036      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fe fc68 	bl	8001728 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fc64 	bl	8001728 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e173      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_OscConfig+0x274>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x234>
 8002e7a:	e01b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fc51 	bl	8001728 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	e00e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fc4d 	bl	8001728 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d907      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e15c      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470000 	.word	0x42470000
 8002ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b8a      	ldr	r3, [pc, #552]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ea      	bne.n	8002e8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8097 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b83      	ldr	r3, [pc, #524]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <HAL_RCC_OscConfig+0x4b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <HAL_RCC_OscConfig+0x4b0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x4b0>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fc0d 	bl	8001728 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe fc09 	bl	8001728 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e118      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <HAL_RCC_OscConfig+0x4b0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x31e>
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x358>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x340>
 8002f4e:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	4a60      	ldr	r2, [pc, #384]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5a:	4b5e      	ldr	r3, [pc, #376]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a5d      	ldr	r2, [pc, #372]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x358>
 8002f68:	4b5a      	ldr	r3, [pc, #360]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a59      	ldr	r2, [pc, #356]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	4b57      	ldr	r3, [pc, #348]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe fbce 	bl	8001728 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7fe fbca 	bl	8001728 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0d7      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ee      	beq.n	8002f90 <HAL_RCC_OscConfig+0x368>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fbb8 	bl	8001728 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fbb4 	bl	8001728 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0c1      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	4b40      	ldr	r3, [pc, #256]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ee      	bne.n	8002fbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	4a3a      	ldr	r2, [pc, #232]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80ad 	beq.w	8003154 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffa:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b08      	cmp	r3, #8
 8003004:	d060      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d145      	bne.n	800309a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x4b4>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fb88 	bl	8001728 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe fb84 	bl	8001728 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e093      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	071b      	lsls	r3, r3, #28
 8003066:	491b      	ldr	r1, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <HAL_RCC_OscConfig+0x4b4>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fb59 	bl	8001728 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fb55 	bl	8001728 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e064      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x452>
 8003098:	e05c      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x4b4>)
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fb42 	bl	8001728 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe fb3e 	bl	8001728 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e04d      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x480>
 80030c6:	e045      	b.n	8003154 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e040      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000
 80030dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e0:	4b1f      	ldr	r3, [pc, #124]	; (8003160 <HAL_RCC_OscConfig+0x538>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d030      	beq.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d129      	bne.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d122      	bne.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003118:	4293      	cmp	r3, r2
 800311a:	d119      	bne.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	3b01      	subs	r3, #1
 800312a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312c:	429a      	cmp	r2, r3
 800312e:	d10f      	bne.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d107      	bne.n	8003150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d001      	beq.n	8003154 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e042      	b.n	80031fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe f968 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa09 	bl	80035c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af02      	add	r7, sp, #8
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	603b      	str	r3, [r7, #0]
 8003210:	4613      	mov	r3, r2
 8003212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b20      	cmp	r3, #32
 8003222:	d175      	bne.n	8003310 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_UART_Transmit+0x2c>
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e06e      	b.n	8003312 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2221      	movs	r2, #33	; 0x21
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003242:	f7fe fa71 	bl	8001728 <HAL_GetTick>
 8003246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	88fa      	ldrh	r2, [r7, #6]
 800324c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325c:	d108      	bne.n	8003270 <HAL_UART_Transmit+0x6c>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e003      	b.n	8003278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003278:	e02e      	b.n	80032d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2200      	movs	r2, #0
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f8df 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e03a      	b.n	8003312 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10b      	bne.n	80032ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	3302      	adds	r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e007      	b.n	80032ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1cb      	bne.n	800327a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f8ab 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e006      	b.n	8003312 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	e000      	b.n	8003312 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
  }
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08a      	sub	sp, #40	; 0x28
 800331e:	af02      	add	r7, sp, #8
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b20      	cmp	r3, #32
 8003338:	f040 8081 	bne.w	800343e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_UART_Receive+0x2e>
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e079      	b.n	8003440 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2222      	movs	r2, #34	; 0x22
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003360:	f7fe f9e2 	bl	8001728 <HAL_GetTick>
 8003364:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337a:	d108      	bne.n	800338e <HAL_UART_Receive+0x74>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d104      	bne.n	800338e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e003      	b.n	8003396 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003396:	e047      	b.n	8003428 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	2200      	movs	r2, #0
 80033a0:	2120      	movs	r1, #32
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f850 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e042      	b.n	8003440 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10c      	bne.n	80033da <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	3302      	adds	r3, #2
 80033d6:	61bb      	str	r3, [r7, #24]
 80033d8:	e01f      	b.n	800341a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d007      	beq.n	80033f4 <HAL_UART_Receive+0xda>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <HAL_UART_Receive+0xe8>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d106      	bne.n	8003402 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e008      	b.n	8003414 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340e:	b2da      	uxtb	r2, r3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1b2      	bne.n	8003398 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	e03b      	b.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d037      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe f961 	bl	8001728 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <UART_WaitOnFlagUntilTimeout+0x30>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e03a      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d023      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b80      	cmp	r3, #128	; 0x80
 800348e:	d020      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d01d      	beq.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d116      	bne.n	80034d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f81d 	bl	80034fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2208      	movs	r2, #8
 80034c4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e00f      	b.n	80034f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4013      	ands	r3, r2
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	461a      	mov	r2, r3
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d0b4      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b095      	sub	sp, #84	; 0x54
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	330c      	adds	r3, #12
 8003508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350c:	e853 3f00 	ldrex	r3, [r3]
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003522:	643a      	str	r2, [r7, #64]	; 0x40
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800352a:	e841 2300 	strex	r3, r2, [r1]
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1e5      	bne.n	8003502 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3314      	adds	r3, #20
 800353c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	e853 3f00 	ldrex	r3, [r3]
 8003544:	61fb      	str	r3, [r7, #28]
   return(result);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3314      	adds	r3, #20
 8003554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355e:	e841 2300 	strex	r3, r2, [r1]
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1e5      	bne.n	8003536 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	2b01      	cmp	r3, #1
 8003570:	d119      	bne.n	80035a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	60bb      	str	r3, [r7, #8]
   return(result);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f023 0310 	bic.w	r3, r3, #16
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003592:	61ba      	str	r2, [r7, #24]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6979      	ldr	r1, [r7, #20]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	613b      	str	r3, [r7, #16]
   return(result);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e5      	bne.n	8003572 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035b4:	bf00      	nop
 80035b6:	3754      	adds	r7, #84	; 0x54
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c4:	b0c0      	sub	sp, #256	; 0x100
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	68d9      	ldr	r1, [r3, #12]
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	ea40 0301 	orr.w	r3, r0, r1
 80035e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	431a      	orrs	r2, r3
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003618:	f021 010c 	bic.w	r1, r1, #12
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003626:	430b      	orrs	r3, r1
 8003628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363a:	6999      	ldr	r1, [r3, #24]
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	ea40 0301 	orr.w	r3, r0, r1
 8003646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b8f      	ldr	r3, [pc, #572]	; (800388c <UART_SetConfig+0x2cc>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d005      	beq.n	8003660 <UART_SetConfig+0xa0>
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <UART_SetConfig+0x2d0>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d104      	bne.n	800366a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7fe ffa6 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8003664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003668:	e003      	b.n	8003672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366a:	f7fe ff8d 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 800366e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800367c:	f040 810c 	bne.w	8003898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003684:	2200      	movs	r2, #0
 8003686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800368a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800368e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003692:	4622      	mov	r2, r4
 8003694:	462b      	mov	r3, r5
 8003696:	1891      	adds	r1, r2, r2
 8003698:	65b9      	str	r1, [r7, #88]	; 0x58
 800369a:	415b      	adcs	r3, r3
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800369e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036a2:	4621      	mov	r1, r4
 80036a4:	eb12 0801 	adds.w	r8, r2, r1
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb43 0901 	adc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036d0:	462b      	mov	r3, r5
 80036d2:	eb49 0303 	adc.w	r3, r9, r3
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ee:	460b      	mov	r3, r1
 80036f0:	18db      	adds	r3, r3, r3
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
 80036f4:	4613      	mov	r3, r2
 80036f6:	eb42 0303 	adc.w	r3, r2, r3
 80036fa:	657b      	str	r3, [r7, #84]	; 0x54
 80036fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003704:	f7fc fdd4 	bl	80002b0 <__aeabi_uldivmod>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <UART_SetConfig+0x2d4>)
 800370e:	fba3 2302 	umull	r2, r3, r3, r2
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	011c      	lsls	r4, r3, #4
 8003716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	1891      	adds	r1, r2, r2
 800372e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003730:	415b      	adcs	r3, r3
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003738:	4641      	mov	r1, r8
 800373a:	eb12 0a01 	adds.w	sl, r2, r1
 800373e:	4649      	mov	r1, r9
 8003740:	eb43 0b01 	adc.w	fp, r3, r1
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	f04f 0300 	mov.w	r3, #0
 800374c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003758:	4692      	mov	sl, r2
 800375a:	469b      	mov	fp, r3
 800375c:	4643      	mov	r3, r8
 800375e:	eb1a 0303 	adds.w	r3, sl, r3
 8003762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003766:	464b      	mov	r3, r9
 8003768:	eb4b 0303 	adc.w	r3, fp, r3
 800376c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800377c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003784:	460b      	mov	r3, r1
 8003786:	18db      	adds	r3, r3, r3
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
 800378a:	4613      	mov	r3, r2
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
 8003792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800379a:	f7fc fd89 	bl	80002b0 <__aeabi_uldivmod>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <UART_SetConfig+0x2d4>)
 80037a6:	fba3 2301 	umull	r2, r3, r3, r1
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2264      	movs	r2, #100	; 0x64
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	1acb      	subs	r3, r1, r3
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037ba:	4b36      	ldr	r3, [pc, #216]	; (8003894 <UART_SetConfig+0x2d4>)
 80037bc:	fba3 2302 	umull	r2, r3, r3, r2
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037c8:	441c      	add	r4, r3
 80037ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	1891      	adds	r1, r2, r2
 80037e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e4:	415b      	adcs	r3, r3
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037ec:	4641      	mov	r1, r8
 80037ee:	1851      	adds	r1, r2, r1
 80037f0:	6339      	str	r1, [r7, #48]	; 0x30
 80037f2:	4649      	mov	r1, r9
 80037f4:	414b      	adcs	r3, r1
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003804:	4659      	mov	r1, fp
 8003806:	00cb      	lsls	r3, r1, #3
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800380e:	4651      	mov	r1, sl
 8003810:	00ca      	lsls	r2, r1, #3
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	4603      	mov	r3, r0
 8003818:	4642      	mov	r2, r8
 800381a:	189b      	adds	r3, r3, r2
 800381c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003820:	464b      	mov	r3, r9
 8003822:	460a      	mov	r2, r1
 8003824:	eb42 0303 	adc.w	r3, r2, r3
 8003828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800383c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003840:	460b      	mov	r3, r1
 8003842:	18db      	adds	r3, r3, r3
 8003844:	62bb      	str	r3, [r7, #40]	; 0x28
 8003846:	4613      	mov	r3, r2
 8003848:	eb42 0303 	adc.w	r3, r2, r3
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003856:	f7fc fd2b 	bl	80002b0 <__aeabi_uldivmod>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <UART_SetConfig+0x2d4>)
 8003860:	fba3 1302 	umull	r1, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2164      	movs	r1, #100	; 0x64
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	3332      	adds	r3, #50	; 0x32
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <UART_SetConfig+0x2d4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4422      	add	r2, r4
 8003886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003888:	e106      	b.n	8003a98 <UART_SetConfig+0x4d8>
 800388a:	bf00      	nop
 800388c:	40011000 	.word	0x40011000
 8003890:	40011400 	.word	0x40011400
 8003894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389c:	2200      	movs	r2, #0
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038aa:	4642      	mov	r2, r8
 80038ac:	464b      	mov	r3, r9
 80038ae:	1891      	adds	r1, r2, r2
 80038b0:	6239      	str	r1, [r7, #32]
 80038b2:	415b      	adcs	r3, r3
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
 80038b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ba:	4641      	mov	r1, r8
 80038bc:	1854      	adds	r4, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb43 0501 	adc.w	r5, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	00eb      	lsls	r3, r5, #3
 80038ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d2:	00e2      	lsls	r2, r4, #3
 80038d4:	4614      	mov	r4, r2
 80038d6:	461d      	mov	r5, r3
 80038d8:	4643      	mov	r3, r8
 80038da:	18e3      	adds	r3, r4, r3
 80038dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038e0:	464b      	mov	r3, r9
 80038e2:	eb45 0303 	adc.w	r3, r5, r3
 80038e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003906:	4629      	mov	r1, r5
 8003908:	008b      	lsls	r3, r1, #2
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003910:	4621      	mov	r1, r4
 8003912:	008a      	lsls	r2, r1, #2
 8003914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003918:	f7fc fcca 	bl	80002b0 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4b60      	ldr	r3, [pc, #384]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003922:	fba3 2302 	umull	r2, r3, r3, r2
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	011c      	lsls	r4, r3, #4
 800392a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392e:	2200      	movs	r2, #0
 8003930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800393c:	4642      	mov	r2, r8
 800393e:	464b      	mov	r3, r9
 8003940:	1891      	adds	r1, r2, r2
 8003942:	61b9      	str	r1, [r7, #24]
 8003944:	415b      	adcs	r3, r3
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394c:	4641      	mov	r1, r8
 800394e:	1851      	adds	r1, r2, r1
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	4649      	mov	r1, r9
 8003954:	414b      	adcs	r3, r1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003964:	4659      	mov	r1, fp
 8003966:	00cb      	lsls	r3, r1, #3
 8003968:	4651      	mov	r1, sl
 800396a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800396e:	4651      	mov	r1, sl
 8003970:	00ca      	lsls	r2, r1, #3
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	4603      	mov	r3, r0
 8003978:	4642      	mov	r2, r8
 800397a:	189b      	adds	r3, r3, r2
 800397c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003980:	464b      	mov	r3, r9
 8003982:	460a      	mov	r2, r1
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800398c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	67bb      	str	r3, [r7, #120]	; 0x78
 8003996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039a4:	4649      	mov	r1, r9
 80039a6:	008b      	lsls	r3, r1, #2
 80039a8:	4641      	mov	r1, r8
 80039aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ae:	4641      	mov	r1, r8
 80039b0:	008a      	lsls	r2, r1, #2
 80039b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039b6:	f7fc fc7b 	bl	80002b0 <__aeabi_uldivmod>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <UART_SetConfig+0x4e4>)
 80039c2:	fba3 2301 	umull	r2, r3, r3, r1
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2264      	movs	r2, #100	; 0x64
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	1acb      	subs	r3, r1, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a33      	ldr	r2, [pc, #204]	; (8003aa4 <UART_SetConfig+0x4e4>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e0:	441c      	add	r4, r3
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	677a      	str	r2, [r7, #116]	; 0x74
 80039ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039f0:	4642      	mov	r2, r8
 80039f2:	464b      	mov	r3, r9
 80039f4:	1891      	adds	r1, r2, r2
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a00:	4641      	mov	r1, r8
 8003a02:	1851      	adds	r1, r2, r1
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	4649      	mov	r1, r9
 8003a08:	414b      	adcs	r3, r1
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a18:	4659      	mov	r1, fp
 8003a1a:	00cb      	lsls	r3, r1, #3
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a22:	4651      	mov	r1, sl
 8003a24:	00ca      	lsls	r2, r1, #3
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a32:	464b      	mov	r3, r9
 8003a34:	460a      	mov	r2, r1
 8003a36:	eb42 0303 	adc.w	r3, r2, r3
 8003a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	663b      	str	r3, [r7, #96]	; 0x60
 8003a46:	667a      	str	r2, [r7, #100]	; 0x64
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a66:	f7fc fc23 	bl	80002b0 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a08      	ldr	r2, [pc, #32]	; (8003aa4 <UART_SetConfig+0x4e4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4422      	add	r2, r4
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aa4:	51eb851f 	.word	0x51eb851f

08003aa8 <_vsiprintf_r>:
 8003aa8:	b500      	push	{lr}
 8003aaa:	b09b      	sub	sp, #108	; 0x6c
 8003aac:	9100      	str	r1, [sp, #0]
 8003aae:	9104      	str	r1, [sp, #16]
 8003ab0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ab4:	9105      	str	r1, [sp, #20]
 8003ab6:	9102      	str	r1, [sp, #8]
 8003ab8:	4905      	ldr	r1, [pc, #20]	; (8003ad0 <_vsiprintf_r+0x28>)
 8003aba:	9103      	str	r1, [sp, #12]
 8003abc:	4669      	mov	r1, sp
 8003abe:	f000 f999 	bl	8003df4 <_svfiprintf_r>
 8003ac2:	9b00      	ldr	r3, [sp, #0]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	b01b      	add	sp, #108	; 0x6c
 8003aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ace:	bf00      	nop
 8003ad0:	ffff0208 	.word	0xffff0208

08003ad4 <vsiprintf>:
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <vsiprintf+0x10>)
 8003adc:	6800      	ldr	r0, [r0, #0]
 8003ade:	f7ff bfe3 	b.w	8003aa8 <_vsiprintf_r>
 8003ae2:	bf00      	nop
 8003ae4:	20000068 	.word	0x20000068

08003ae8 <memset>:
 8003ae8:	4402      	add	r2, r0
 8003aea:	4603      	mov	r3, r0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <memset+0xa>
 8003af0:	4770      	bx	lr
 8003af2:	f803 1b01 	strb.w	r1, [r3], #1
 8003af6:	e7f9      	b.n	8003aec <memset+0x4>

08003af8 <__errno>:
 8003af8:	4b01      	ldr	r3, [pc, #4]	; (8003b00 <__errno+0x8>)
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000068 	.word	0x20000068

08003b04 <__libc_init_array>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	4d0d      	ldr	r5, [pc, #52]	; (8003b3c <__libc_init_array+0x38>)
 8003b08:	4c0d      	ldr	r4, [pc, #52]	; (8003b40 <__libc_init_array+0x3c>)
 8003b0a:	1b64      	subs	r4, r4, r5
 8003b0c:	10a4      	asrs	r4, r4, #2
 8003b0e:	2600      	movs	r6, #0
 8003b10:	42a6      	cmp	r6, r4
 8003b12:	d109      	bne.n	8003b28 <__libc_init_array+0x24>
 8003b14:	4d0b      	ldr	r5, [pc, #44]	; (8003b44 <__libc_init_array+0x40>)
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <__libc_init_array+0x44>)
 8003b18:	f000 fc6a 	bl	80043f0 <_init>
 8003b1c:	1b64      	subs	r4, r4, r5
 8003b1e:	10a4      	asrs	r4, r4, #2
 8003b20:	2600      	movs	r6, #0
 8003b22:	42a6      	cmp	r6, r4
 8003b24:	d105      	bne.n	8003b32 <__libc_init_array+0x2e>
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b2c:	4798      	blx	r3
 8003b2e:	3601      	adds	r6, #1
 8003b30:	e7ee      	b.n	8003b10 <__libc_init_array+0xc>
 8003b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b36:	4798      	blx	r3
 8003b38:	3601      	adds	r6, #1
 8003b3a:	e7f2      	b.n	8003b22 <__libc_init_array+0x1e>
 8003b3c:	080046d4 	.word	0x080046d4
 8003b40:	080046d4 	.word	0x080046d4
 8003b44:	080046d4 	.word	0x080046d4
 8003b48:	080046d8 	.word	0x080046d8

08003b4c <__retarget_lock_acquire_recursive>:
 8003b4c:	4770      	bx	lr

08003b4e <__retarget_lock_release_recursive>:
 8003b4e:	4770      	bx	lr

08003b50 <_free_r>:
 8003b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b52:	2900      	cmp	r1, #0
 8003b54:	d044      	beq.n	8003be0 <_free_r+0x90>
 8003b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b5a:	9001      	str	r0, [sp, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8003b62:	bfb8      	it	lt
 8003b64:	18e4      	addlt	r4, r4, r3
 8003b66:	f000 f8df 	bl	8003d28 <__malloc_lock>
 8003b6a:	4a1e      	ldr	r2, [pc, #120]	; (8003be4 <_free_r+0x94>)
 8003b6c:	9801      	ldr	r0, [sp, #4]
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	b933      	cbnz	r3, 8003b80 <_free_r+0x30>
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6014      	str	r4, [r2, #0]
 8003b76:	b003      	add	sp, #12
 8003b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b7c:	f000 b8da 	b.w	8003d34 <__malloc_unlock>
 8003b80:	42a3      	cmp	r3, r4
 8003b82:	d908      	bls.n	8003b96 <_free_r+0x46>
 8003b84:	6825      	ldr	r5, [r4, #0]
 8003b86:	1961      	adds	r1, r4, r5
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	bf01      	itttt	eq
 8003b8c:	6819      	ldreq	r1, [r3, #0]
 8003b8e:	685b      	ldreq	r3, [r3, #4]
 8003b90:	1949      	addeq	r1, r1, r5
 8003b92:	6021      	streq	r1, [r4, #0]
 8003b94:	e7ed      	b.n	8003b72 <_free_r+0x22>
 8003b96:	461a      	mov	r2, r3
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b10b      	cbz	r3, 8003ba0 <_free_r+0x50>
 8003b9c:	42a3      	cmp	r3, r4
 8003b9e:	d9fa      	bls.n	8003b96 <_free_r+0x46>
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	1855      	adds	r5, r2, r1
 8003ba4:	42a5      	cmp	r5, r4
 8003ba6:	d10b      	bne.n	8003bc0 <_free_r+0x70>
 8003ba8:	6824      	ldr	r4, [r4, #0]
 8003baa:	4421      	add	r1, r4
 8003bac:	1854      	adds	r4, r2, r1
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	d1e0      	bne.n	8003b76 <_free_r+0x26>
 8003bb4:	681c      	ldr	r4, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	6053      	str	r3, [r2, #4]
 8003bba:	440c      	add	r4, r1
 8003bbc:	6014      	str	r4, [r2, #0]
 8003bbe:	e7da      	b.n	8003b76 <_free_r+0x26>
 8003bc0:	d902      	bls.n	8003bc8 <_free_r+0x78>
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	6003      	str	r3, [r0, #0]
 8003bc6:	e7d6      	b.n	8003b76 <_free_r+0x26>
 8003bc8:	6825      	ldr	r5, [r4, #0]
 8003bca:	1961      	adds	r1, r4, r5
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	bf04      	itt	eq
 8003bd0:	6819      	ldreq	r1, [r3, #0]
 8003bd2:	685b      	ldreq	r3, [r3, #4]
 8003bd4:	6063      	str	r3, [r4, #4]
 8003bd6:	bf04      	itt	eq
 8003bd8:	1949      	addeq	r1, r1, r5
 8003bda:	6021      	streq	r1, [r4, #0]
 8003bdc:	6054      	str	r4, [r2, #4]
 8003bde:	e7ca      	b.n	8003b76 <_free_r+0x26>
 8003be0:	b003      	add	sp, #12
 8003be2:	bd30      	pop	{r4, r5, pc}
 8003be4:	2000039c 	.word	0x2000039c

08003be8 <sbrk_aligned>:
 8003be8:	b570      	push	{r4, r5, r6, lr}
 8003bea:	4e0e      	ldr	r6, [pc, #56]	; (8003c24 <sbrk_aligned+0x3c>)
 8003bec:	460c      	mov	r4, r1
 8003bee:	6831      	ldr	r1, [r6, #0]
 8003bf0:	4605      	mov	r5, r0
 8003bf2:	b911      	cbnz	r1, 8003bfa <sbrk_aligned+0x12>
 8003bf4:	f000 fba6 	bl	8004344 <_sbrk_r>
 8003bf8:	6030      	str	r0, [r6, #0]
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 fba1 	bl	8004344 <_sbrk_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d00a      	beq.n	8003c1c <sbrk_aligned+0x34>
 8003c06:	1cc4      	adds	r4, r0, #3
 8003c08:	f024 0403 	bic.w	r4, r4, #3
 8003c0c:	42a0      	cmp	r0, r4
 8003c0e:	d007      	beq.n	8003c20 <sbrk_aligned+0x38>
 8003c10:	1a21      	subs	r1, r4, r0
 8003c12:	4628      	mov	r0, r5
 8003c14:	f000 fb96 	bl	8004344 <_sbrk_r>
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d101      	bne.n	8003c20 <sbrk_aligned+0x38>
 8003c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c20:	4620      	mov	r0, r4
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	200003a0 	.word	0x200003a0

08003c28 <_malloc_r>:
 8003c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	1ccd      	adds	r5, r1, #3
 8003c2e:	f025 0503 	bic.w	r5, r5, #3
 8003c32:	3508      	adds	r5, #8
 8003c34:	2d0c      	cmp	r5, #12
 8003c36:	bf38      	it	cc
 8003c38:	250c      	movcc	r5, #12
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	db01      	blt.n	8003c44 <_malloc_r+0x1c>
 8003c40:	42a9      	cmp	r1, r5
 8003c42:	d905      	bls.n	8003c50 <_malloc_r+0x28>
 8003c44:	230c      	movs	r3, #12
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	2600      	movs	r6, #0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d24 <_malloc_r+0xfc>
 8003c54:	f000 f868 	bl	8003d28 <__malloc_lock>
 8003c58:	f8d8 3000 	ldr.w	r3, [r8]
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	bb5c      	cbnz	r4, 8003cb8 <_malloc_r+0x90>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4638      	mov	r0, r7
 8003c64:	f7ff ffc0 	bl	8003be8 <sbrk_aligned>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	d155      	bne.n	8003d1a <_malloc_r+0xf2>
 8003c6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003c72:	4626      	mov	r6, r4
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	d145      	bne.n	8003d04 <_malloc_r+0xdc>
 8003c78:	2c00      	cmp	r4, #0
 8003c7a:	d048      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	4631      	mov	r1, r6
 8003c80:	4638      	mov	r0, r7
 8003c82:	eb04 0903 	add.w	r9, r4, r3
 8003c86:	f000 fb5d 	bl	8004344 <_sbrk_r>
 8003c8a:	4581      	cmp	r9, r0
 8003c8c:	d13f      	bne.n	8003d0e <_malloc_r+0xe6>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	1a6d      	subs	r5, r5, r1
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ffa7 	bl	8003be8 <sbrk_aligned>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d037      	beq.n	8003d0e <_malloc_r+0xe6>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	442b      	add	r3, r5
 8003ca2:	6023      	str	r3, [r4, #0]
 8003ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d038      	beq.n	8003d1e <_malloc_r+0xf6>
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	42a2      	cmp	r2, r4
 8003cb0:	d12b      	bne.n	8003d0a <_malloc_r+0xe2>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e00f      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	1b52      	subs	r2, r2, r5
 8003cbc:	d41f      	bmi.n	8003cfe <_malloc_r+0xd6>
 8003cbe:	2a0b      	cmp	r2, #11
 8003cc0:	d917      	bls.n	8003cf2 <_malloc_r+0xca>
 8003cc2:	1961      	adds	r1, r4, r5
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	6025      	str	r5, [r4, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	6059      	strne	r1, [r3, #4]
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	bf08      	it	eq
 8003cd0:	f8c8 1000 	streq.w	r1, [r8]
 8003cd4:	5162      	str	r2, [r4, r5]
 8003cd6:	604b      	str	r3, [r1, #4]
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f104 060b 	add.w	r6, r4, #11
 8003cde:	f000 f829 	bl	8003d34 <__malloc_unlock>
 8003ce2:	f026 0607 	bic.w	r6, r6, #7
 8003ce6:	1d23      	adds	r3, r4, #4
 8003ce8:	1af2      	subs	r2, r6, r3
 8003cea:	d0ae      	beq.n	8003c4a <_malloc_r+0x22>
 8003cec:	1b9b      	subs	r3, r3, r6
 8003cee:	50a3      	str	r3, [r4, r2]
 8003cf0:	e7ab      	b.n	8003c4a <_malloc_r+0x22>
 8003cf2:	42a3      	cmp	r3, r4
 8003cf4:	6862      	ldr	r2, [r4, #4]
 8003cf6:	d1dd      	bne.n	8003cb4 <_malloc_r+0x8c>
 8003cf8:	f8c8 2000 	str.w	r2, [r8]
 8003cfc:	e7ec      	b.n	8003cd8 <_malloc_r+0xb0>
 8003cfe:	4623      	mov	r3, r4
 8003d00:	6864      	ldr	r4, [r4, #4]
 8003d02:	e7ac      	b.n	8003c5e <_malloc_r+0x36>
 8003d04:	4634      	mov	r4, r6
 8003d06:	6876      	ldr	r6, [r6, #4]
 8003d08:	e7b4      	b.n	8003c74 <_malloc_r+0x4c>
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x80>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4638      	mov	r0, r7
 8003d14:	f000 f80e 	bl	8003d34 <__malloc_unlock>
 8003d18:	e797      	b.n	8003c4a <_malloc_r+0x22>
 8003d1a:	6025      	str	r5, [r4, #0]
 8003d1c:	e7dc      	b.n	8003cd8 <_malloc_r+0xb0>
 8003d1e:	605b      	str	r3, [r3, #4]
 8003d20:	deff      	udf	#255	; 0xff
 8003d22:	bf00      	nop
 8003d24:	2000039c 	.word	0x2000039c

08003d28 <__malloc_lock>:
 8003d28:	4801      	ldr	r0, [pc, #4]	; (8003d30 <__malloc_lock+0x8>)
 8003d2a:	f7ff bf0f 	b.w	8003b4c <__retarget_lock_acquire_recursive>
 8003d2e:	bf00      	nop
 8003d30:	20000398 	.word	0x20000398

08003d34 <__malloc_unlock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_unlock+0x8>)
 8003d36:	f7ff bf0a 	b.w	8003b4e <__retarget_lock_release_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000398 	.word	0x20000398

08003d40 <__ssputs_r>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	688e      	ldr	r6, [r1, #8]
 8003d46:	461f      	mov	r7, r3
 8003d48:	42be      	cmp	r6, r7
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	4682      	mov	sl, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4690      	mov	r8, r2
 8003d52:	d82c      	bhi.n	8003dae <__ssputs_r+0x6e>
 8003d54:	898a      	ldrh	r2, [r1, #12]
 8003d56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d5a:	d026      	beq.n	8003daa <__ssputs_r+0x6a>
 8003d5c:	6965      	ldr	r5, [r4, #20]
 8003d5e:	6909      	ldr	r1, [r1, #16]
 8003d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d64:	eba3 0901 	sub.w	r9, r3, r1
 8003d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d6c:	1c7b      	adds	r3, r7, #1
 8003d6e:	444b      	add	r3, r9
 8003d70:	106d      	asrs	r5, r5, #1
 8003d72:	429d      	cmp	r5, r3
 8003d74:	bf38      	it	cc
 8003d76:	461d      	movcc	r5, r3
 8003d78:	0553      	lsls	r3, r2, #21
 8003d7a:	d527      	bpl.n	8003dcc <__ssputs_r+0x8c>
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	f7ff ff53 	bl	8003c28 <_malloc_r>
 8003d82:	4606      	mov	r6, r0
 8003d84:	b360      	cbz	r0, 8003de0 <__ssputs_r+0xa0>
 8003d86:	6921      	ldr	r1, [r4, #16]
 8003d88:	464a      	mov	r2, r9
 8003d8a:	f000 faeb 	bl	8004364 <memcpy>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	6126      	str	r6, [r4, #16]
 8003d9c:	6165      	str	r5, [r4, #20]
 8003d9e:	444e      	add	r6, r9
 8003da0:	eba5 0509 	sub.w	r5, r5, r9
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	60a5      	str	r5, [r4, #8]
 8003da8:	463e      	mov	r6, r7
 8003daa:	42be      	cmp	r6, r7
 8003dac:	d900      	bls.n	8003db0 <__ssputs_r+0x70>
 8003dae:	463e      	mov	r6, r7
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4632      	mov	r2, r6
 8003db4:	4641      	mov	r1, r8
 8003db6:	f000 faab 	bl	8004310 <memmove>
 8003dba:	68a3      	ldr	r3, [r4, #8]
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	60a3      	str	r3, [r4, #8]
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	4433      	add	r3, r6
 8003dc4:	6023      	str	r3, [r4, #0]
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	462a      	mov	r2, r5
 8003dce:	f000 fad7 	bl	8004380 <_realloc_r>
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	d1e0      	bne.n	8003d9a <__ssputs_r+0x5a>
 8003dd8:	6921      	ldr	r1, [r4, #16]
 8003dda:	4650      	mov	r0, sl
 8003ddc:	f7ff feb8 	bl	8003b50 <_free_r>
 8003de0:	230c      	movs	r3, #12
 8003de2:	f8ca 3000 	str.w	r3, [sl]
 8003de6:	89a3      	ldrh	r3, [r4, #12]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	81a3      	strh	r3, [r4, #12]
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295
 8003df2:	e7e9      	b.n	8003dc8 <__ssputs_r+0x88>

08003df4 <_svfiprintf_r>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4698      	mov	r8, r3
 8003dfa:	898b      	ldrh	r3, [r1, #12]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	b09d      	sub	sp, #116	; 0x74
 8003e00:	4607      	mov	r7, r0
 8003e02:	460d      	mov	r5, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	d50e      	bpl.n	8003e26 <_svfiprintf_r+0x32>
 8003e08:	690b      	ldr	r3, [r1, #16]
 8003e0a:	b963      	cbnz	r3, 8003e26 <_svfiprintf_r+0x32>
 8003e0c:	2140      	movs	r1, #64	; 0x40
 8003e0e:	f7ff ff0b 	bl	8003c28 <_malloc_r>
 8003e12:	6028      	str	r0, [r5, #0]
 8003e14:	6128      	str	r0, [r5, #16]
 8003e16:	b920      	cbnz	r0, 8003e22 <_svfiprintf_r+0x2e>
 8003e18:	230c      	movs	r3, #12
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	e0d0      	b.n	8003fc4 <_svfiprintf_r+0x1d0>
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	616b      	str	r3, [r5, #20]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9309      	str	r3, [sp, #36]	; 0x24
 8003e2a:	2320      	movs	r3, #32
 8003e2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e30:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e34:	2330      	movs	r3, #48	; 0x30
 8003e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003fdc <_svfiprintf_r+0x1e8>
 8003e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e3e:	f04f 0901 	mov.w	r9, #1
 8003e42:	4623      	mov	r3, r4
 8003e44:	469a      	mov	sl, r3
 8003e46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e4a:	b10a      	cbz	r2, 8003e50 <_svfiprintf_r+0x5c>
 8003e4c:	2a25      	cmp	r2, #37	; 0x25
 8003e4e:	d1f9      	bne.n	8003e44 <_svfiprintf_r+0x50>
 8003e50:	ebba 0b04 	subs.w	fp, sl, r4
 8003e54:	d00b      	beq.n	8003e6e <_svfiprintf_r+0x7a>
 8003e56:	465b      	mov	r3, fp
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	4638      	mov	r0, r7
 8003e5e:	f7ff ff6f 	bl	8003d40 <__ssputs_r>
 8003e62:	3001      	adds	r0, #1
 8003e64:	f000 80a9 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e6a:	445a      	add	r2, fp
 8003e6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a1 	beq.w	8003fba <_svfiprintf_r+0x1c6>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e82:	f10a 0a01 	add.w	sl, sl, #1
 8003e86:	9304      	str	r3, [sp, #16]
 8003e88:	9307      	str	r3, [sp, #28]
 8003e8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003e90:	4654      	mov	r4, sl
 8003e92:	2205      	movs	r2, #5
 8003e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e98:	4850      	ldr	r0, [pc, #320]	; (8003fdc <_svfiprintf_r+0x1e8>)
 8003e9a:	f7fc f9b9 	bl	8000210 <memchr>
 8003e9e:	9a04      	ldr	r2, [sp, #16]
 8003ea0:	b9d8      	cbnz	r0, 8003eda <_svfiprintf_r+0xe6>
 8003ea2:	06d0      	lsls	r0, r2, #27
 8003ea4:	bf44      	itt	mi
 8003ea6:	2320      	movmi	r3, #32
 8003ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eac:	0711      	lsls	r1, r2, #28
 8003eae:	bf44      	itt	mi
 8003eb0:	232b      	movmi	r3, #43	; 0x2b
 8003eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b2a      	cmp	r3, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xf6>
 8003ebe:	9a07      	ldr	r2, [sp, #28]
 8003ec0:	4654      	mov	r4, sl
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f04f 0c0a 	mov.w	ip, #10
 8003ec8:	4621      	mov	r1, r4
 8003eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ece:	3b30      	subs	r3, #48	; 0x30
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d94d      	bls.n	8003f70 <_svfiprintf_r+0x17c>
 8003ed4:	b1b0      	cbz	r0, 8003f04 <_svfiprintf_r+0x110>
 8003ed6:	9207      	str	r2, [sp, #28]
 8003ed8:	e014      	b.n	8003f04 <_svfiprintf_r+0x110>
 8003eda:	eba0 0308 	sub.w	r3, r0, r8
 8003ede:	fa09 f303 	lsl.w	r3, r9, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	9304      	str	r3, [sp, #16]
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	e7d2      	b.n	8003e90 <_svfiprintf_r+0x9c>
 8003eea:	9b03      	ldr	r3, [sp, #12]
 8003eec:	1d19      	adds	r1, r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	bfbb      	ittet	lt
 8003ef6:	425b      	neglt	r3, r3
 8003ef8:	f042 0202 	orrlt.w	r2, r2, #2
 8003efc:	9307      	strge	r3, [sp, #28]
 8003efe:	9307      	strlt	r3, [sp, #28]
 8003f00:	bfb8      	it	lt
 8003f02:	9204      	strlt	r2, [sp, #16]
 8003f04:	7823      	ldrb	r3, [r4, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x130>
 8003f0a:	7863      	ldrb	r3, [r4, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d134      	bne.n	8003f7a <_svfiprintf_r+0x186>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	9203      	str	r2, [sp, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	bfb8      	it	lt
 8003f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f20:	3402      	adds	r4, #2
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003fec <_svfiprintf_r+0x1f8>
 8003f28:	7821      	ldrb	r1, [r4, #0]
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	f7fc f96f 	bl	8000210 <memchr>
 8003f32:	b138      	cbz	r0, 8003f44 <_svfiprintf_r+0x150>
 8003f34:	9b04      	ldr	r3, [sp, #16]
 8003f36:	eba0 000a 	sub.w	r0, r0, sl
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	4082      	lsls	r2, r0
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	3401      	adds	r4, #1
 8003f42:	9304      	str	r3, [sp, #16]
 8003f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f48:	4825      	ldr	r0, [pc, #148]	; (8003fe0 <_svfiprintf_r+0x1ec>)
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	2206      	movs	r2, #6
 8003f50:	f7fc f95e 	bl	8000210 <memchr>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d038      	beq.n	8003fca <_svfiprintf_r+0x1d6>
 8003f58:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <_svfiprintf_r+0x1f0>)
 8003f5a:	bb1b      	cbnz	r3, 8003fa4 <_svfiprintf_r+0x1b0>
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	3307      	adds	r3, #7
 8003f60:	f023 0307 	bic.w	r3, r3, #7
 8003f64:	3308      	adds	r3, #8
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6a:	4433      	add	r3, r6
 8003f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6e:	e768      	b.n	8003e42 <_svfiprintf_r+0x4e>
 8003f70:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f74:	460c      	mov	r4, r1
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7a6      	b.n	8003ec8 <_svfiprintf_r+0xd4>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	3401      	adds	r4, #1
 8003f7e:	9305      	str	r3, [sp, #20]
 8003f80:	4619      	mov	r1, r3
 8003f82:	f04f 0c0a 	mov.w	ip, #10
 8003f86:	4620      	mov	r0, r4
 8003f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f8c:	3a30      	subs	r2, #48	; 0x30
 8003f8e:	2a09      	cmp	r2, #9
 8003f90:	d903      	bls.n	8003f9a <_svfiprintf_r+0x1a6>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0c6      	beq.n	8003f24 <_svfiprintf_r+0x130>
 8003f96:	9105      	str	r1, [sp, #20]
 8003f98:	e7c4      	b.n	8003f24 <_svfiprintf_r+0x130>
 8003f9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e7f0      	b.n	8003f86 <_svfiprintf_r+0x192>
 8003fa4:	ab03      	add	r3, sp, #12
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	462a      	mov	r2, r5
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fac:	a904      	add	r1, sp, #16
 8003fae:	4638      	mov	r0, r7
 8003fb0:	f3af 8000 	nop.w
 8003fb4:	1c42      	adds	r2, r0, #1
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	d1d6      	bne.n	8003f68 <_svfiprintf_r+0x174>
 8003fba:	89ab      	ldrh	r3, [r5, #12]
 8003fbc:	065b      	lsls	r3, r3, #25
 8003fbe:	f53f af2d 	bmi.w	8003e1c <_svfiprintf_r+0x28>
 8003fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc4:	b01d      	add	sp, #116	; 0x74
 8003fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fca:	ab03      	add	r3, sp, #12
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	462a      	mov	r2, r5
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <_svfiprintf_r+0x1f4>)
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	4638      	mov	r0, r7
 8003fd6:	f000 f879 	bl	80040cc <_printf_i>
 8003fda:	e7eb      	b.n	8003fb4 <_svfiprintf_r+0x1c0>
 8003fdc:	08004698 	.word	0x08004698
 8003fe0:	080046a2 	.word	0x080046a2
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	08003d41 	.word	0x08003d41
 8003fec:	0800469e 	.word	0x0800469e

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004000:	4293      	cmp	r3, r2
 8004002:	bfb8      	it	lt
 8004004:	4613      	movlt	r3, r2
 8004006:	6033      	str	r3, [r6, #0]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	4607      	mov	r7, r0
 800400e:	460c      	mov	r4, r1
 8004010:	b10a      	cbz	r2, 8004016 <_printf_common+0x26>
 8004012:	3301      	adds	r3, #1
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0699      	lsls	r1, r3, #26
 800401a:	bf42      	ittt	mi
 800401c:	6833      	ldrmi	r3, [r6, #0]
 800401e:	3302      	addmi	r3, #2
 8004020:	6033      	strmi	r3, [r6, #0]
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	f015 0506 	ands.w	r5, r5, #6
 8004028:	d106      	bne.n	8004038 <_printf_common+0x48>
 800402a:	f104 0a19 	add.w	sl, r4, #25
 800402e:	68e3      	ldr	r3, [r4, #12]
 8004030:	6832      	ldr	r2, [r6, #0]
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	42ab      	cmp	r3, r5
 8004036:	dc26      	bgt.n	8004086 <_printf_common+0x96>
 8004038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800403c:	1e13      	subs	r3, r2, #0
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	2301      	movne	r3, #1
 8004044:	0692      	lsls	r2, r2, #26
 8004046:	d42b      	bmi.n	80040a0 <_printf_common+0xb0>
 8004048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404c:	4649      	mov	r1, r9
 800404e:	4638      	mov	r0, r7
 8004050:	47c0      	blx	r8
 8004052:	3001      	adds	r0, #1
 8004054:	d01e      	beq.n	8004094 <_printf_common+0xa4>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	2b04      	cmp	r3, #4
 8004060:	bf02      	ittt	eq
 8004062:	68e5      	ldreq	r5, [r4, #12]
 8004064:	6833      	ldreq	r3, [r6, #0]
 8004066:	1aed      	subeq	r5, r5, r3
 8004068:	68a3      	ldr	r3, [r4, #8]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	2600      	movs	r6, #0
 800407c:	341a      	adds	r4, #26
 800407e:	42b5      	cmp	r5, r6
 8004080:	d11a      	bne.n	80040b8 <_printf_common+0xc8>
 8004082:	2000      	movs	r0, #0
 8004084:	e008      	b.n	8004098 <_printf_common+0xa8>
 8004086:	2301      	movs	r3, #1
 8004088:	4652      	mov	r2, sl
 800408a:	4649      	mov	r1, r9
 800408c:	4638      	mov	r0, r7
 800408e:	47c0      	blx	r8
 8004090:	3001      	adds	r0, #1
 8004092:	d103      	bne.n	800409c <_printf_common+0xac>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409c:	3501      	adds	r5, #1
 800409e:	e7c6      	b.n	800402e <_printf_common+0x3e>
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	2030      	movs	r0, #48	; 0x30
 80040a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040aa:	4422      	add	r2, r4
 80040ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b4:	3302      	adds	r3, #2
 80040b6:	e7c7      	b.n	8004048 <_printf_common+0x58>
 80040b8:	2301      	movs	r3, #1
 80040ba:	4622      	mov	r2, r4
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	47c0      	blx	r8
 80040c2:	3001      	adds	r0, #1
 80040c4:	d0e6      	beq.n	8004094 <_printf_common+0xa4>
 80040c6:	3601      	adds	r6, #1
 80040c8:	e7d9      	b.n	800407e <_printf_common+0x8e>
	...

080040cc <_printf_i>:
 80040cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	7e0f      	ldrb	r7, [r1, #24]
 80040d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040d4:	2f78      	cmp	r7, #120	; 0x78
 80040d6:	4691      	mov	r9, r2
 80040d8:	4680      	mov	r8, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	469a      	mov	sl, r3
 80040de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040e2:	d807      	bhi.n	80040f4 <_printf_i+0x28>
 80040e4:	2f62      	cmp	r7, #98	; 0x62
 80040e6:	d80a      	bhi.n	80040fe <_printf_i+0x32>
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	f000 80d4 	beq.w	8004296 <_printf_i+0x1ca>
 80040ee:	2f58      	cmp	r7, #88	; 0x58
 80040f0:	f000 80c0 	beq.w	8004274 <_printf_i+0x1a8>
 80040f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040fc:	e03a      	b.n	8004174 <_printf_i+0xa8>
 80040fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004102:	2b15      	cmp	r3, #21
 8004104:	d8f6      	bhi.n	80040f4 <_printf_i+0x28>
 8004106:	a101      	add	r1, pc, #4	; (adr r1, 800410c <_printf_i+0x40>)
 8004108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800410c:	08004165 	.word	0x08004165
 8004110:	08004179 	.word	0x08004179
 8004114:	080040f5 	.word	0x080040f5
 8004118:	080040f5 	.word	0x080040f5
 800411c:	080040f5 	.word	0x080040f5
 8004120:	080040f5 	.word	0x080040f5
 8004124:	08004179 	.word	0x08004179
 8004128:	080040f5 	.word	0x080040f5
 800412c:	080040f5 	.word	0x080040f5
 8004130:	080040f5 	.word	0x080040f5
 8004134:	080040f5 	.word	0x080040f5
 8004138:	0800427d 	.word	0x0800427d
 800413c:	080041a5 	.word	0x080041a5
 8004140:	08004237 	.word	0x08004237
 8004144:	080040f5 	.word	0x080040f5
 8004148:	080040f5 	.word	0x080040f5
 800414c:	0800429f 	.word	0x0800429f
 8004150:	080040f5 	.word	0x080040f5
 8004154:	080041a5 	.word	0x080041a5
 8004158:	080040f5 	.word	0x080040f5
 800415c:	080040f5 	.word	0x080040f5
 8004160:	0800423f 	.word	0x0800423f
 8004164:	682b      	ldr	r3, [r5, #0]
 8004166:	1d1a      	adds	r2, r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	602a      	str	r2, [r5, #0]
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004174:	2301      	movs	r3, #1
 8004176:	e09f      	b.n	80042b8 <_printf_i+0x1ec>
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	0607      	lsls	r7, r0, #24
 800417e:	f103 0104 	add.w	r1, r3, #4
 8004182:	6029      	str	r1, [r5, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0xbe>
 8004186:	681e      	ldr	r6, [r3, #0]
 8004188:	e003      	b.n	8004192 <_printf_i+0xc6>
 800418a:	0646      	lsls	r6, r0, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0xba>
 800418e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004192:	2e00      	cmp	r6, #0
 8004194:	da03      	bge.n	800419e <_printf_i+0xd2>
 8004196:	232d      	movs	r3, #45	; 0x2d
 8004198:	4276      	negs	r6, r6
 800419a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419e:	485a      	ldr	r0, [pc, #360]	; (8004308 <_printf_i+0x23c>)
 80041a0:	230a      	movs	r3, #10
 80041a2:	e012      	b.n	80041ca <_printf_i+0xfe>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	6820      	ldr	r0, [r4, #0]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	6029      	str	r1, [r5, #0]
 80041ac:	0605      	lsls	r5, r0, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xe8>
 80041b0:	681e      	ldr	r6, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0xee>
 80041b4:	0641      	lsls	r1, r0, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xe4>
 80041b8:	881e      	ldrh	r6, [r3, #0]
 80041ba:	4853      	ldr	r0, [pc, #332]	; (8004308 <_printf_i+0x23c>)
 80041bc:	2f6f      	cmp	r7, #111	; 0x6f
 80041be:	bf0c      	ite	eq
 80041c0:	2308      	moveq	r3, #8
 80041c2:	230a      	movne	r3, #10
 80041c4:	2100      	movs	r1, #0
 80041c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ca:	6865      	ldr	r5, [r4, #4]
 80041cc:	60a5      	str	r5, [r4, #8]
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	bfa2      	ittt	ge
 80041d2:	6821      	ldrge	r1, [r4, #0]
 80041d4:	f021 0104 	bicge.w	r1, r1, #4
 80041d8:	6021      	strge	r1, [r4, #0]
 80041da:	b90e      	cbnz	r6, 80041e0 <_printf_i+0x114>
 80041dc:	2d00      	cmp	r5, #0
 80041de:	d04b      	beq.n	8004278 <_printf_i+0x1ac>
 80041e0:	4615      	mov	r5, r2
 80041e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80041e6:	fb03 6711 	mls	r7, r3, r1, r6
 80041ea:	5dc7      	ldrb	r7, [r0, r7]
 80041ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041f0:	4637      	mov	r7, r6
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	460e      	mov	r6, r1
 80041f6:	d9f4      	bls.n	80041e2 <_printf_i+0x116>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <_printf_i+0x148>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07de      	lsls	r6, r3, #31
 8004200:	d508      	bpl.n	8004214 <_printf_i+0x148>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	6861      	ldr	r1, [r4, #4]
 8004206:	4299      	cmp	r1, r3
 8004208:	bfde      	ittt	le
 800420a:	2330      	movle	r3, #48	; 0x30
 800420c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004210:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004214:	1b52      	subs	r2, r2, r5
 8004216:	6122      	str	r2, [r4, #16]
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	464b      	mov	r3, r9
 800421e:	aa03      	add	r2, sp, #12
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f7ff fee4 	bl	8003ff0 <_printf_common>
 8004228:	3001      	adds	r0, #1
 800422a:	d14a      	bne.n	80042c2 <_printf_i+0x1f6>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	b004      	add	sp, #16
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	f043 0320 	orr.w	r3, r3, #32
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	4833      	ldr	r0, [pc, #204]	; (800430c <_printf_i+0x240>)
 8004240:	2778      	movs	r7, #120	; 0x78
 8004242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	061f      	lsls	r7, r3, #24
 800424c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004250:	d402      	bmi.n	8004258 <_printf_i+0x18c>
 8004252:	065f      	lsls	r7, r3, #25
 8004254:	bf48      	it	mi
 8004256:	b2b6      	uxthmi	r6, r6
 8004258:	07df      	lsls	r7, r3, #31
 800425a:	bf48      	it	mi
 800425c:	f043 0320 	orrmi.w	r3, r3, #32
 8004260:	6029      	str	r1, [r5, #0]
 8004262:	bf48      	it	mi
 8004264:	6023      	strmi	r3, [r4, #0]
 8004266:	b91e      	cbnz	r6, 8004270 <_printf_i+0x1a4>
 8004268:	6823      	ldr	r3, [r4, #0]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	2310      	movs	r3, #16
 8004272:	e7a7      	b.n	80041c4 <_printf_i+0xf8>
 8004274:	4824      	ldr	r0, [pc, #144]	; (8004308 <_printf_i+0x23c>)
 8004276:	e7e4      	b.n	8004242 <_printf_i+0x176>
 8004278:	4615      	mov	r5, r2
 800427a:	e7bd      	b.n	80041f8 <_printf_i+0x12c>
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	6826      	ldr	r6, [r4, #0]
 8004280:	6961      	ldr	r1, [r4, #20]
 8004282:	1d18      	adds	r0, r3, #4
 8004284:	6028      	str	r0, [r5, #0]
 8004286:	0635      	lsls	r5, r6, #24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	d501      	bpl.n	8004290 <_printf_i+0x1c4>
 800428c:	6019      	str	r1, [r3, #0]
 800428e:	e002      	b.n	8004296 <_printf_i+0x1ca>
 8004290:	0670      	lsls	r0, r6, #25
 8004292:	d5fb      	bpl.n	800428c <_printf_i+0x1c0>
 8004294:	8019      	strh	r1, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	4615      	mov	r5, r2
 800429c:	e7bc      	b.n	8004218 <_printf_i+0x14c>
 800429e:	682b      	ldr	r3, [r5, #0]
 80042a0:	1d1a      	adds	r2, r3, #4
 80042a2:	602a      	str	r2, [r5, #0]
 80042a4:	681d      	ldr	r5, [r3, #0]
 80042a6:	6862      	ldr	r2, [r4, #4]
 80042a8:	2100      	movs	r1, #0
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ffb0 	bl	8000210 <memchr>
 80042b0:	b108      	cbz	r0, 80042b6 <_printf_i+0x1ea>
 80042b2:	1b40      	subs	r0, r0, r5
 80042b4:	6060      	str	r0, [r4, #4]
 80042b6:	6863      	ldr	r3, [r4, #4]
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	2300      	movs	r3, #0
 80042bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c0:	e7aa      	b.n	8004218 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	462a      	mov	r2, r5
 80042c6:	4649      	mov	r1, r9
 80042c8:	4640      	mov	r0, r8
 80042ca:	47d0      	blx	sl
 80042cc:	3001      	adds	r0, #1
 80042ce:	d0ad      	beq.n	800422c <_printf_i+0x160>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	079b      	lsls	r3, r3, #30
 80042d4:	d413      	bmi.n	80042fe <_printf_i+0x232>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e7a6      	b.n	8004230 <_printf_i+0x164>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4632      	mov	r2, r6
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d09d      	beq.n	800422c <_printf_i+0x160>
 80042f0:	3501      	adds	r5, #1
 80042f2:	68e3      	ldr	r3, [r4, #12]
 80042f4:	9903      	ldr	r1, [sp, #12]
 80042f6:	1a5b      	subs	r3, r3, r1
 80042f8:	42ab      	cmp	r3, r5
 80042fa:	dcf2      	bgt.n	80042e2 <_printf_i+0x216>
 80042fc:	e7eb      	b.n	80042d6 <_printf_i+0x20a>
 80042fe:	2500      	movs	r5, #0
 8004300:	f104 0619 	add.w	r6, r4, #25
 8004304:	e7f5      	b.n	80042f2 <_printf_i+0x226>
 8004306:	bf00      	nop
 8004308:	080046a9 	.word	0x080046a9
 800430c:	080046ba 	.word	0x080046ba

08004310 <memmove>:
 8004310:	4288      	cmp	r0, r1
 8004312:	b510      	push	{r4, lr}
 8004314:	eb01 0402 	add.w	r4, r1, r2
 8004318:	d902      	bls.n	8004320 <memmove+0x10>
 800431a:	4284      	cmp	r4, r0
 800431c:	4623      	mov	r3, r4
 800431e:	d807      	bhi.n	8004330 <memmove+0x20>
 8004320:	1e43      	subs	r3, r0, #1
 8004322:	42a1      	cmp	r1, r4
 8004324:	d008      	beq.n	8004338 <memmove+0x28>
 8004326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800432e:	e7f8      	b.n	8004322 <memmove+0x12>
 8004330:	4402      	add	r2, r0
 8004332:	4601      	mov	r1, r0
 8004334:	428a      	cmp	r2, r1
 8004336:	d100      	bne.n	800433a <memmove+0x2a>
 8004338:	bd10      	pop	{r4, pc}
 800433a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800433e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004342:	e7f7      	b.n	8004334 <memmove+0x24>

08004344 <_sbrk_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4d06      	ldr	r5, [pc, #24]	; (8004360 <_sbrk_r+0x1c>)
 8004348:	2300      	movs	r3, #0
 800434a:	4604      	mov	r4, r0
 800434c:	4608      	mov	r0, r1
 800434e:	602b      	str	r3, [r5, #0]
 8004350:	f7fc ffc0 	bl	80012d4 <_sbrk>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_sbrk_r+0x1a>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_sbrk_r+0x1a>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000394 	.word	0x20000394

08004364 <memcpy>:
 8004364:	440a      	add	r2, r1
 8004366:	4291      	cmp	r1, r2
 8004368:	f100 33ff 	add.w	r3, r0, #4294967295
 800436c:	d100      	bne.n	8004370 <memcpy+0xc>
 800436e:	4770      	bx	lr
 8004370:	b510      	push	{r4, lr}
 8004372:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800437a:	4291      	cmp	r1, r2
 800437c:	d1f9      	bne.n	8004372 <memcpy+0xe>
 800437e:	bd10      	pop	{r4, pc}

08004380 <_realloc_r>:
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4680      	mov	r8, r0
 8004386:	4614      	mov	r4, r2
 8004388:	460e      	mov	r6, r1
 800438a:	b921      	cbnz	r1, 8004396 <_realloc_r+0x16>
 800438c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	4611      	mov	r1, r2
 8004392:	f7ff bc49 	b.w	8003c28 <_malloc_r>
 8004396:	b92a      	cbnz	r2, 80043a4 <_realloc_r+0x24>
 8004398:	f7ff fbda 	bl	8003b50 <_free_r>
 800439c:	4625      	mov	r5, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a4:	f000 f81b 	bl	80043de <_malloc_usable_size_r>
 80043a8:	4284      	cmp	r4, r0
 80043aa:	4607      	mov	r7, r0
 80043ac:	d802      	bhi.n	80043b4 <_realloc_r+0x34>
 80043ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043b2:	d812      	bhi.n	80043da <_realloc_r+0x5a>
 80043b4:	4621      	mov	r1, r4
 80043b6:	4640      	mov	r0, r8
 80043b8:	f7ff fc36 	bl	8003c28 <_malloc_r>
 80043bc:	4605      	mov	r5, r0
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0ed      	beq.n	800439e <_realloc_r+0x1e>
 80043c2:	42bc      	cmp	r4, r7
 80043c4:	4622      	mov	r2, r4
 80043c6:	4631      	mov	r1, r6
 80043c8:	bf28      	it	cs
 80043ca:	463a      	movcs	r2, r7
 80043cc:	f7ff ffca 	bl	8004364 <memcpy>
 80043d0:	4631      	mov	r1, r6
 80043d2:	4640      	mov	r0, r8
 80043d4:	f7ff fbbc 	bl	8003b50 <_free_r>
 80043d8:	e7e1      	b.n	800439e <_realloc_r+0x1e>
 80043da:	4635      	mov	r5, r6
 80043dc:	e7df      	b.n	800439e <_realloc_r+0x1e>

080043de <_malloc_usable_size_r>:
 80043de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e2:	1f18      	subs	r0, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bfbc      	itt	lt
 80043e8:	580b      	ldrlt	r3, [r1, r0]
 80043ea:	18c0      	addlt	r0, r0, r3
 80043ec:	4770      	bx	lr
	...

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
