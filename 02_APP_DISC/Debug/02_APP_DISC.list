
02_APP_DISC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  080081ac  080081ac  000081ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800acc8  0800acc8  0000acc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace0  0800ace0  00010010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace0  0800ace0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ace8  0800ace8  00010010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ace8  0800ace8  0000ace8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acec  0800acec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800acf0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  0800ad00  00010010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800ad00  000100c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d56  00000000  00000000  00010083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001950  00000000  00000000  00018dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0001a730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000567  00000000  00000000  0001ae50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f62  00000000  00000000  0001b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009714  00000000  00000000  0003d319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfa2  00000000  00000000  00046a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b88  00000000  00000000  001149d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  00116558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081ac <__do_global_dtors_aux>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	4c05      	ldr	r4, [pc, #20]	; (80081c4 <__do_global_dtors_aux+0x18>)
 80081b0:	7823      	ldrb	r3, [r4, #0]
 80081b2:	b933      	cbnz	r3, 80081c2 <__do_global_dtors_aux+0x16>
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <__do_global_dtors_aux+0x1c>)
 80081b6:	b113      	cbz	r3, 80081be <__do_global_dtors_aux+0x12>
 80081b8:	4804      	ldr	r0, [pc, #16]	; (80081cc <__do_global_dtors_aux+0x20>)
 80081ba:	f3af 8000 	nop.w
 80081be:	2301      	movs	r3, #1
 80081c0:	7023      	strb	r3, [r4, #0]
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	20000010 	.word	0x20000010
 80081c8:	00000000 	.word	0x00000000
 80081cc:	0800acb0 	.word	0x0800acb0

080081d0 <frame_dummy>:
 80081d0:	b508      	push	{r3, lr}
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <frame_dummy+0x10>)
 80081d4:	b11b      	cbz	r3, 80081de <frame_dummy+0xe>
 80081d6:	4903      	ldr	r1, [pc, #12]	; (80081e4 <frame_dummy+0x14>)
 80081d8:	4803      	ldr	r0, [pc, #12]	; (80081e8 <frame_dummy+0x18>)
 80081da:	f3af 8000 	nop.w
 80081de:	bd08      	pop	{r3, pc}
 80081e0:	00000000 	.word	0x00000000
 80081e4:	20000014 	.word	0x20000014
 80081e8:	0800acb0 	.word	0x0800acb0

080081ec <__aeabi_uldivmod>:
 80081ec:	b953      	cbnz	r3, 8008204 <__aeabi_uldivmod+0x18>
 80081ee:	b94a      	cbnz	r2, 8008204 <__aeabi_uldivmod+0x18>
 80081f0:	2900      	cmp	r1, #0
 80081f2:	bf08      	it	eq
 80081f4:	2800      	cmpeq	r0, #0
 80081f6:	bf1c      	itt	ne
 80081f8:	f04f 31ff 	movne.w	r1, #4294967295
 80081fc:	f04f 30ff 	movne.w	r0, #4294967295
 8008200:	f000 b970 	b.w	80084e4 <__aeabi_idiv0>
 8008204:	f1ad 0c08 	sub.w	ip, sp, #8
 8008208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800820c:	f000 f806 	bl	800821c <__udivmoddi4>
 8008210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008218:	b004      	add	sp, #16
 800821a:	4770      	bx	lr

0800821c <__udivmoddi4>:
 800821c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	9e08      	ldr	r6, [sp, #32]
 8008222:	460d      	mov	r5, r1
 8008224:	4604      	mov	r4, r0
 8008226:	460f      	mov	r7, r1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d14a      	bne.n	80082c2 <__udivmoddi4+0xa6>
 800822c:	428a      	cmp	r2, r1
 800822e:	4694      	mov	ip, r2
 8008230:	d965      	bls.n	80082fe <__udivmoddi4+0xe2>
 8008232:	fab2 f382 	clz	r3, r2
 8008236:	b143      	cbz	r3, 800824a <__udivmoddi4+0x2e>
 8008238:	fa02 fc03 	lsl.w	ip, r2, r3
 800823c:	f1c3 0220 	rsb	r2, r3, #32
 8008240:	409f      	lsls	r7, r3
 8008242:	fa20 f202 	lsr.w	r2, r0, r2
 8008246:	4317      	orrs	r7, r2
 8008248:	409c      	lsls	r4, r3
 800824a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800824e:	fa1f f58c 	uxth.w	r5, ip
 8008252:	fbb7 f1fe 	udiv	r1, r7, lr
 8008256:	0c22      	lsrs	r2, r4, #16
 8008258:	fb0e 7711 	mls	r7, lr, r1, r7
 800825c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008260:	fb01 f005 	mul.w	r0, r1, r5
 8008264:	4290      	cmp	r0, r2
 8008266:	d90a      	bls.n	800827e <__udivmoddi4+0x62>
 8008268:	eb1c 0202 	adds.w	r2, ip, r2
 800826c:	f101 37ff 	add.w	r7, r1, #4294967295
 8008270:	f080 811c 	bcs.w	80084ac <__udivmoddi4+0x290>
 8008274:	4290      	cmp	r0, r2
 8008276:	f240 8119 	bls.w	80084ac <__udivmoddi4+0x290>
 800827a:	3902      	subs	r1, #2
 800827c:	4462      	add	r2, ip
 800827e:	1a12      	subs	r2, r2, r0
 8008280:	b2a4      	uxth	r4, r4
 8008282:	fbb2 f0fe 	udiv	r0, r2, lr
 8008286:	fb0e 2210 	mls	r2, lr, r0, r2
 800828a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800828e:	fb00 f505 	mul.w	r5, r0, r5
 8008292:	42a5      	cmp	r5, r4
 8008294:	d90a      	bls.n	80082ac <__udivmoddi4+0x90>
 8008296:	eb1c 0404 	adds.w	r4, ip, r4
 800829a:	f100 32ff 	add.w	r2, r0, #4294967295
 800829e:	f080 8107 	bcs.w	80084b0 <__udivmoddi4+0x294>
 80082a2:	42a5      	cmp	r5, r4
 80082a4:	f240 8104 	bls.w	80084b0 <__udivmoddi4+0x294>
 80082a8:	4464      	add	r4, ip
 80082aa:	3802      	subs	r0, #2
 80082ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80082b0:	1b64      	subs	r4, r4, r5
 80082b2:	2100      	movs	r1, #0
 80082b4:	b11e      	cbz	r6, 80082be <__udivmoddi4+0xa2>
 80082b6:	40dc      	lsrs	r4, r3
 80082b8:	2300      	movs	r3, #0
 80082ba:	e9c6 4300 	strd	r4, r3, [r6]
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	428b      	cmp	r3, r1
 80082c4:	d908      	bls.n	80082d8 <__udivmoddi4+0xbc>
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	f000 80ed 	beq.w	80084a6 <__udivmoddi4+0x28a>
 80082cc:	2100      	movs	r1, #0
 80082ce:	e9c6 0500 	strd	r0, r5, [r6]
 80082d2:	4608      	mov	r0, r1
 80082d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d8:	fab3 f183 	clz	r1, r3
 80082dc:	2900      	cmp	r1, #0
 80082de:	d149      	bne.n	8008374 <__udivmoddi4+0x158>
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	d302      	bcc.n	80082ea <__udivmoddi4+0xce>
 80082e4:	4282      	cmp	r2, r0
 80082e6:	f200 80f8 	bhi.w	80084da <__udivmoddi4+0x2be>
 80082ea:	1a84      	subs	r4, r0, r2
 80082ec:	eb65 0203 	sbc.w	r2, r5, r3
 80082f0:	2001      	movs	r0, #1
 80082f2:	4617      	mov	r7, r2
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	d0e2      	beq.n	80082be <__udivmoddi4+0xa2>
 80082f8:	e9c6 4700 	strd	r4, r7, [r6]
 80082fc:	e7df      	b.n	80082be <__udivmoddi4+0xa2>
 80082fe:	b902      	cbnz	r2, 8008302 <__udivmoddi4+0xe6>
 8008300:	deff      	udf	#255	; 0xff
 8008302:	fab2 f382 	clz	r3, r2
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 8090 	bne.w	800842c <__udivmoddi4+0x210>
 800830c:	1a8a      	subs	r2, r1, r2
 800830e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008312:	fa1f fe8c 	uxth.w	lr, ip
 8008316:	2101      	movs	r1, #1
 8008318:	fbb2 f5f7 	udiv	r5, r2, r7
 800831c:	fb07 2015 	mls	r0, r7, r5, r2
 8008320:	0c22      	lsrs	r2, r4, #16
 8008322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008326:	fb0e f005 	mul.w	r0, lr, r5
 800832a:	4290      	cmp	r0, r2
 800832c:	d908      	bls.n	8008340 <__udivmoddi4+0x124>
 800832e:	eb1c 0202 	adds.w	r2, ip, r2
 8008332:	f105 38ff 	add.w	r8, r5, #4294967295
 8008336:	d202      	bcs.n	800833e <__udivmoddi4+0x122>
 8008338:	4290      	cmp	r0, r2
 800833a:	f200 80cb 	bhi.w	80084d4 <__udivmoddi4+0x2b8>
 800833e:	4645      	mov	r5, r8
 8008340:	1a12      	subs	r2, r2, r0
 8008342:	b2a4      	uxth	r4, r4
 8008344:	fbb2 f0f7 	udiv	r0, r2, r7
 8008348:	fb07 2210 	mls	r2, r7, r0, r2
 800834c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008350:	fb0e fe00 	mul.w	lr, lr, r0
 8008354:	45a6      	cmp	lr, r4
 8008356:	d908      	bls.n	800836a <__udivmoddi4+0x14e>
 8008358:	eb1c 0404 	adds.w	r4, ip, r4
 800835c:	f100 32ff 	add.w	r2, r0, #4294967295
 8008360:	d202      	bcs.n	8008368 <__udivmoddi4+0x14c>
 8008362:	45a6      	cmp	lr, r4
 8008364:	f200 80bb 	bhi.w	80084de <__udivmoddi4+0x2c2>
 8008368:	4610      	mov	r0, r2
 800836a:	eba4 040e 	sub.w	r4, r4, lr
 800836e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8008372:	e79f      	b.n	80082b4 <__udivmoddi4+0x98>
 8008374:	f1c1 0720 	rsb	r7, r1, #32
 8008378:	408b      	lsls	r3, r1
 800837a:	fa22 fc07 	lsr.w	ip, r2, r7
 800837e:	ea4c 0c03 	orr.w	ip, ip, r3
 8008382:	fa05 f401 	lsl.w	r4, r5, r1
 8008386:	fa20 f307 	lsr.w	r3, r0, r7
 800838a:	40fd      	lsrs	r5, r7
 800838c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008390:	4323      	orrs	r3, r4
 8008392:	fbb5 f8f9 	udiv	r8, r5, r9
 8008396:	fa1f fe8c 	uxth.w	lr, ip
 800839a:	fb09 5518 	mls	r5, r9, r8, r5
 800839e:	0c1c      	lsrs	r4, r3, #16
 80083a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80083a4:	fb08 f50e 	mul.w	r5, r8, lr
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	fa02 f201 	lsl.w	r2, r2, r1
 80083ae:	fa00 f001 	lsl.w	r0, r0, r1
 80083b2:	d90b      	bls.n	80083cc <__udivmoddi4+0x1b0>
 80083b4:	eb1c 0404 	adds.w	r4, ip, r4
 80083b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80083bc:	f080 8088 	bcs.w	80084d0 <__udivmoddi4+0x2b4>
 80083c0:	42a5      	cmp	r5, r4
 80083c2:	f240 8085 	bls.w	80084d0 <__udivmoddi4+0x2b4>
 80083c6:	f1a8 0802 	sub.w	r8, r8, #2
 80083ca:	4464      	add	r4, ip
 80083cc:	1b64      	subs	r4, r4, r5
 80083ce:	b29d      	uxth	r5, r3
 80083d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80083d4:	fb09 4413 	mls	r4, r9, r3, r4
 80083d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80083e0:	45a6      	cmp	lr, r4
 80083e2:	d908      	bls.n	80083f6 <__udivmoddi4+0x1da>
 80083e4:	eb1c 0404 	adds.w	r4, ip, r4
 80083e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80083ec:	d26c      	bcs.n	80084c8 <__udivmoddi4+0x2ac>
 80083ee:	45a6      	cmp	lr, r4
 80083f0:	d96a      	bls.n	80084c8 <__udivmoddi4+0x2ac>
 80083f2:	3b02      	subs	r3, #2
 80083f4:	4464      	add	r4, ip
 80083f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083fa:	fba3 9502 	umull	r9, r5, r3, r2
 80083fe:	eba4 040e 	sub.w	r4, r4, lr
 8008402:	42ac      	cmp	r4, r5
 8008404:	46c8      	mov	r8, r9
 8008406:	46ae      	mov	lr, r5
 8008408:	d356      	bcc.n	80084b8 <__udivmoddi4+0x29c>
 800840a:	d053      	beq.n	80084b4 <__udivmoddi4+0x298>
 800840c:	b156      	cbz	r6, 8008424 <__udivmoddi4+0x208>
 800840e:	ebb0 0208 	subs.w	r2, r0, r8
 8008412:	eb64 040e 	sbc.w	r4, r4, lr
 8008416:	fa04 f707 	lsl.w	r7, r4, r7
 800841a:	40ca      	lsrs	r2, r1
 800841c:	40cc      	lsrs	r4, r1
 800841e:	4317      	orrs	r7, r2
 8008420:	e9c6 7400 	strd	r7, r4, [r6]
 8008424:	4618      	mov	r0, r3
 8008426:	2100      	movs	r1, #0
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	f1c3 0120 	rsb	r1, r3, #32
 8008430:	fa02 fc03 	lsl.w	ip, r2, r3
 8008434:	fa20 f201 	lsr.w	r2, r0, r1
 8008438:	fa25 f101 	lsr.w	r1, r5, r1
 800843c:	409d      	lsls	r5, r3
 800843e:	432a      	orrs	r2, r5
 8008440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008444:	fa1f fe8c 	uxth.w	lr, ip
 8008448:	fbb1 f0f7 	udiv	r0, r1, r7
 800844c:	fb07 1510 	mls	r5, r7, r0, r1
 8008450:	0c11      	lsrs	r1, r2, #16
 8008452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8008456:	fb00 f50e 	mul.w	r5, r0, lr
 800845a:	428d      	cmp	r5, r1
 800845c:	fa04 f403 	lsl.w	r4, r4, r3
 8008460:	d908      	bls.n	8008474 <__udivmoddi4+0x258>
 8008462:	eb1c 0101 	adds.w	r1, ip, r1
 8008466:	f100 38ff 	add.w	r8, r0, #4294967295
 800846a:	d22f      	bcs.n	80084cc <__udivmoddi4+0x2b0>
 800846c:	428d      	cmp	r5, r1
 800846e:	d92d      	bls.n	80084cc <__udivmoddi4+0x2b0>
 8008470:	3802      	subs	r0, #2
 8008472:	4461      	add	r1, ip
 8008474:	1b49      	subs	r1, r1, r5
 8008476:	b292      	uxth	r2, r2
 8008478:	fbb1 f5f7 	udiv	r5, r1, r7
 800847c:	fb07 1115 	mls	r1, r7, r5, r1
 8008480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008484:	fb05 f10e 	mul.w	r1, r5, lr
 8008488:	4291      	cmp	r1, r2
 800848a:	d908      	bls.n	800849e <__udivmoddi4+0x282>
 800848c:	eb1c 0202 	adds.w	r2, ip, r2
 8008490:	f105 38ff 	add.w	r8, r5, #4294967295
 8008494:	d216      	bcs.n	80084c4 <__udivmoddi4+0x2a8>
 8008496:	4291      	cmp	r1, r2
 8008498:	d914      	bls.n	80084c4 <__udivmoddi4+0x2a8>
 800849a:	3d02      	subs	r5, #2
 800849c:	4462      	add	r2, ip
 800849e:	1a52      	subs	r2, r2, r1
 80084a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80084a4:	e738      	b.n	8008318 <__udivmoddi4+0xfc>
 80084a6:	4631      	mov	r1, r6
 80084a8:	4630      	mov	r0, r6
 80084aa:	e708      	b.n	80082be <__udivmoddi4+0xa2>
 80084ac:	4639      	mov	r1, r7
 80084ae:	e6e6      	b.n	800827e <__udivmoddi4+0x62>
 80084b0:	4610      	mov	r0, r2
 80084b2:	e6fb      	b.n	80082ac <__udivmoddi4+0x90>
 80084b4:	4548      	cmp	r0, r9
 80084b6:	d2a9      	bcs.n	800840c <__udivmoddi4+0x1f0>
 80084b8:	ebb9 0802 	subs.w	r8, r9, r2
 80084bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80084c0:	3b01      	subs	r3, #1
 80084c2:	e7a3      	b.n	800840c <__udivmoddi4+0x1f0>
 80084c4:	4645      	mov	r5, r8
 80084c6:	e7ea      	b.n	800849e <__udivmoddi4+0x282>
 80084c8:	462b      	mov	r3, r5
 80084ca:	e794      	b.n	80083f6 <__udivmoddi4+0x1da>
 80084cc:	4640      	mov	r0, r8
 80084ce:	e7d1      	b.n	8008474 <__udivmoddi4+0x258>
 80084d0:	46d0      	mov	r8, sl
 80084d2:	e77b      	b.n	80083cc <__udivmoddi4+0x1b0>
 80084d4:	3d02      	subs	r5, #2
 80084d6:	4462      	add	r2, ip
 80084d8:	e732      	b.n	8008340 <__udivmoddi4+0x124>
 80084da:	4608      	mov	r0, r1
 80084dc:	e70a      	b.n	80082f4 <__udivmoddi4+0xd8>
 80084de:	4464      	add	r4, ip
 80084e0:	3802      	subs	r0, #2
 80084e2:	e742      	b.n	800836a <__udivmoddi4+0x14e>

080084e4 <__aeabi_idiv0>:
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop

080084e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	; 0x30
 80084ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ee:	f107 031c 	add.w	r3, r7, #28
 80084f2:	2200      	movs	r2, #0
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	609a      	str	r2, [r3, #8]
 80084fa:	60da      	str	r2, [r3, #12]
 80084fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80084fe:	2300      	movs	r3, #0
 8008500:	61bb      	str	r3, [r7, #24]
 8008502:	4b3f      	ldr	r3, [pc, #252]	; (8008600 <MX_GPIO_Init+0x118>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	4a3e      	ldr	r2, [pc, #248]	; (8008600 <MX_GPIO_Init+0x118>)
 8008508:	f043 0304 	orr.w	r3, r3, #4
 800850c:	6313      	str	r3, [r2, #48]	; 0x30
 800850e:	4b3c      	ldr	r3, [pc, #240]	; (8008600 <MX_GPIO_Init+0x118>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	4b38      	ldr	r3, [pc, #224]	; (8008600 <MX_GPIO_Init+0x118>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008522:	4a37      	ldr	r2, [pc, #220]	; (8008600 <MX_GPIO_Init+0x118>)
 8008524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008528:	6313      	str	r3, [r2, #48]	; 0x30
 800852a:	4b35      	ldr	r3, [pc, #212]	; (8008600 <MX_GPIO_Init+0x118>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008536:	2300      	movs	r3, #0
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	4b31      	ldr	r3, [pc, #196]	; (8008600 <MX_GPIO_Init+0x118>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	4a30      	ldr	r2, [pc, #192]	; (8008600 <MX_GPIO_Init+0x118>)
 8008540:	f043 0301 	orr.w	r3, r3, #1
 8008544:	6313      	str	r3, [r2, #48]	; 0x30
 8008546:	4b2e      	ldr	r3, [pc, #184]	; (8008600 <MX_GPIO_Init+0x118>)
 8008548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	613b      	str	r3, [r7, #16]
 8008550:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	4b2a      	ldr	r3, [pc, #168]	; (8008600 <MX_GPIO_Init+0x118>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	4a29      	ldr	r2, [pc, #164]	; (8008600 <MX_GPIO_Init+0x118>)
 800855c:	f043 0302 	orr.w	r3, r3, #2
 8008560:	6313      	str	r3, [r2, #48]	; 0x30
 8008562:	4b27      	ldr	r3, [pc, #156]	; (8008600 <MX_GPIO_Init+0x118>)
 8008564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]
 8008572:	4b23      	ldr	r3, [pc, #140]	; (8008600 <MX_GPIO_Init+0x118>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	4a22      	ldr	r2, [pc, #136]	; (8008600 <MX_GPIO_Init+0x118>)
 8008578:	f043 0308 	orr.w	r3, r3, #8
 800857c:	6313      	str	r3, [r2, #48]	; 0x30
 800857e:	4b20      	ldr	r3, [pc, #128]	; (8008600 <MX_GPIO_Init+0x118>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f003 0308 	and.w	r3, r3, #8
 8008586:	60bb      	str	r3, [r7, #8]
 8008588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800858a:	2300      	movs	r3, #0
 800858c:	607b      	str	r3, [r7, #4]
 800858e:	4b1c      	ldr	r3, [pc, #112]	; (8008600 <MX_GPIO_Init+0x118>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <MX_GPIO_Init+0x118>)
 8008594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008598:	6313      	str	r3, [r2, #48]	; 0x30
 800859a:	4b19      	ldr	r3, [pc, #100]	; (8008600 <MX_GPIO_Init+0x118>)
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_7 | GPIO_PIN_5, GPIO_PIN_RESET);
 80085a6:	2200      	movs	r2, #0
 80085a8:	21a2      	movs	r1, #162	; 0xa2
 80085aa:	4816      	ldr	r0, [pc, #88]	; (8008604 <MX_GPIO_Init+0x11c>)
 80085ac:	f000 fe72 	bl	8009294 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80085b6:	4814      	ldr	r0, [pc, #80]	; (8008608 <MX_GPIO_Init+0x120>)
 80085b8:	f000 fe6c 	bl	8009294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7 | GPIO_PIN_5;
 80085bc:	23a2      	movs	r3, #162	; 0xa2
 80085be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c0:	2301      	movs	r3, #1
 80085c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c8:	2300      	movs	r3, #0
 80085ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085cc:	f107 031c 	add.w	r3, r7, #28
 80085d0:	4619      	mov	r1, r3
 80085d2:	480c      	ldr	r0, [pc, #48]	; (8008604 <MX_GPIO_Init+0x11c>)
 80085d4:	f000 fcb2 	bl	8008f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80085d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80085dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085de:	2301      	movs	r3, #1
 80085e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085e6:	2300      	movs	r3, #0
 80085e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80085ea:	f107 031c 	add.w	r3, r7, #28
 80085ee:	4619      	mov	r1, r3
 80085f0:	4805      	ldr	r0, [pc, #20]	; (8008608 <MX_GPIO_Init+0x120>)
 80085f2:	f000 fca3 	bl	8008f3c <HAL_GPIO_Init>

}
 80085f6:	bf00      	nop
 80085f8:	3730      	adds	r7, #48	; 0x30
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	40023800 	.word	0x40023800
 8008604:	40020000 	.word	0x40020000
 8008608:	40021800 	.word	0x40021800

0800860c <main>:
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
	}
	return checkBank;
}
int main(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008610:	f000 fa40 	bl	8008a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008614:	f000 f828 	bl	8008668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008618:	f7ff ff66 	bl	80084e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800861c:	f000 f92e 	bl	800887c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8008620:	f000 f956 	bl	80088d0 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  //toggleBankAndReset();
//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
//  HAL_UART_Transmit(&huart3, (uint8_t *)"hello starting\n\r", 25, HAL_MAX_DELAY);
HAL_UART_Receive_IT(&huart3, &RecVal, 1);
 8008624:	2201      	movs	r2, #1
 8008626:	490c      	ldr	r1, [pc, #48]	; (8008658 <main+0x4c>)
 8008628:	480c      	ldr	r0, [pc, #48]	; (800865c <main+0x50>)
 800862a:	f001 fb9a 	bl	8009d62 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800862e:	2201      	movs	r2, #1
 8008630:	2120      	movs	r1, #32
 8008632:	480b      	ldr	r0, [pc, #44]	; (8008660 <main+0x54>)
 8008634:	f000 fe2e 	bl	8009294 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
	//  HAL_UART_Transmit(&huart3, (uint8_t *)"hello starting\n\r", 25, HAL_MAX_DELAY);

	 HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8008638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800863c:	4809      	ldr	r0, [pc, #36]	; (8008664 <main+0x58>)
 800863e:	f000 fe42 	bl	80092c6 <HAL_GPIO_TogglePin>
	// HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8008642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008646:	4807      	ldr	r0, [pc, #28]	; (8008664 <main+0x58>)
 8008648:	f000 fe3d 	bl	80092c6 <HAL_GPIO_TogglePin>

	  HAL_Delay(1000);
 800864c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008650:	f000 fa92 	bl	8008b78 <HAL_Delay>
	 HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8008654:	e7f0      	b.n	8008638 <main+0x2c>
 8008656:	bf00      	nop
 8008658:	2000002c 	.word	0x2000002c
 800865c:	20000078 	.word	0x20000078
 8008660:	40020000 	.word	0x40020000
 8008664:	40021800 	.word	0x40021800

08008668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b094      	sub	sp, #80	; 0x50
 800866c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800866e:	f107 0320 	add.w	r3, r7, #32
 8008672:	2230      	movs	r2, #48	; 0x30
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f002 faee 	bl	800ac58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800867c:	f107 030c 	add.w	r3, r7, #12
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	605a      	str	r2, [r3, #4]
 8008686:	609a      	str	r2, [r3, #8]
 8008688:	60da      	str	r2, [r3, #12]
 800868a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800868c:	2300      	movs	r3, #0
 800868e:	60bb      	str	r3, [r7, #8]
 8008690:	4b23      	ldr	r3, [pc, #140]	; (8008720 <SystemClock_Config+0xb8>)
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	4a22      	ldr	r2, [pc, #136]	; (8008720 <SystemClock_Config+0xb8>)
 8008696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800869a:	6413      	str	r3, [r2, #64]	; 0x40
 800869c:	4b20      	ldr	r3, [pc, #128]	; (8008720 <SystemClock_Config+0xb8>)
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80086a8:	2300      	movs	r3, #0
 80086aa:	607b      	str	r3, [r7, #4]
 80086ac:	4b1d      	ldr	r3, [pc, #116]	; (8008724 <SystemClock_Config+0xbc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80086b4:	4a1b      	ldr	r2, [pc, #108]	; (8008724 <SystemClock_Config+0xbc>)
 80086b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	4b19      	ldr	r3, [pc, #100]	; (8008724 <SystemClock_Config+0xbc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086c4:	607b      	str	r3, [r7, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80086c8:	2302      	movs	r3, #2
 80086ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086cc:	2301      	movs	r3, #1
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80086d0:	2310      	movs	r3, #16
 80086d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086d8:	f107 0320 	add.w	r3, r7, #32
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fe0d 	bl	80092fc <HAL_RCC_OscConfig>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80086e8:	f000 f846 	bl	8008778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086ec:	230f      	movs	r3, #15
 80086ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80086f0:	2300      	movs	r3, #0
 80086f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80086f8:	2300      	movs	r3, #0
 80086fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80086fc:	2300      	movs	r3, #0
 80086fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 f870 	bl	80097ec <HAL_RCC_ClockConfig>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8008712:	f000 f831 	bl	8008778 <Error_Handler>
  }
}
 8008716:	bf00      	nop
 8008718:	3750      	adds	r7, #80	; 0x50
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40023800 	.word	0x40023800
 8008724:	40007000 	.word	0x40007000

08008728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
//        }
//
//        HAL_UART_Receive_IT(&huart3 ,rx_data, 1);
//        HAL_UART_Transmit(&huart3, rx_data, 1, 100);
//    }
	HAL_UART_Receive_IT(&huart3, &RecVal, 1);
 8008730:	2201      	movs	r2, #1
 8008732:	490e      	ldr	r1, [pc, #56]	; (800876c <HAL_UART_RxCpltCallback+0x44>)
 8008734:	480e      	ldr	r0, [pc, #56]	; (8008770 <HAL_UART_RxCpltCallback+0x48>)
 8008736:	f001 fb14 	bl	8009d62 <HAL_UART_Receive_IT>
		    if (FIRMWARE_UPDATE_TRIGGER == RecVal){
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <HAL_UART_RxCpltCallback+0x4c>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	b2da      	uxtb	r2, r3
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <HAL_UART_RxCpltCallback+0x44>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	429a      	cmp	r2, r3
 8008748:	d10b      	bne.n	8008762 <HAL_UART_RxCpltCallback+0x3a>
					  /* Send Acknowledge */
					  uint8_t ackValue = 0xCD;
 800874a:	23cd      	movs	r3, #205	; 0xcd
 800874c:	73fb      	strb	r3, [r7, #15]
					  HAL_UART_Transmit(&huart3, &ackValue, 1, HAL_MAX_DELAY);
 800874e:	f107 010f 	add.w	r1, r7, #15
 8008752:	f04f 33ff 	mov.w	r3, #4294967295
 8008756:	2201      	movs	r2, #1
 8008758:	4805      	ldr	r0, [pc, #20]	; (8008770 <HAL_UART_RxCpltCallback+0x48>)
 800875a:	f001 fa77 	bl	8009c4c <HAL_UART_Transmit>
					  /* System reset (Jump to Bootloader) */
					  HAL_NVIC_SystemReset();
 800875e:	f000 fb4a 	bl	8008df6 <HAL_NVIC_SystemReset>
			  }
}
 8008762:	bf00      	nop
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000002c 	.word	0x2000002c
 8008770:	20000078 	.word	0x20000078
 8008774:	20000000 	.word	0x20000000

08008778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800877c:	b672      	cpsid	i
}
 800877e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008780:	e7fe      	b.n	8008780 <Error_Handler+0x8>
	...

08008784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800878a:	2300      	movs	r3, #0
 800878c:	607b      	str	r3, [r7, #4]
 800878e:	4b10      	ldr	r3, [pc, #64]	; (80087d0 <HAL_MspInit+0x4c>)
 8008790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008792:	4a0f      	ldr	r2, [pc, #60]	; (80087d0 <HAL_MspInit+0x4c>)
 8008794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008798:	6453      	str	r3, [r2, #68]	; 0x44
 800879a:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <HAL_MspInit+0x4c>)
 800879c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087a6:	2300      	movs	r3, #0
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <HAL_MspInit+0x4c>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <HAL_MspInit+0x4c>)
 80087b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b4:	6413      	str	r3, [r2, #64]	; 0x40
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <HAL_MspInit+0x4c>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40023800 	.word	0x40023800

080087d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80087d8:	e7fe      	b.n	80087d8 <NMI_Handler+0x4>

080087da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80087da:	b480      	push	{r7}
 80087dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80087de:	e7fe      	b.n	80087de <HardFault_Handler+0x4>

080087e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80087e4:	e7fe      	b.n	80087e4 <MemManage_Handler+0x4>

080087e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80087e6:	b480      	push	{r7}
 80087e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80087ea:	e7fe      	b.n	80087ea <BusFault_Handler+0x4>

080087ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80087ec:	b480      	push	{r7}
 80087ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80087f0:	e7fe      	b.n	80087f0 <UsageFault_Handler+0x4>

080087f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80087f2:	b480      	push	{r7}
 80087f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80087f6:	bf00      	nop
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800880e:	b480      	push	{r7}
 8008810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008812:	bf00      	nop
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008820:	f000 f98a 	bl	8008b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008824:	bf00      	nop
 8008826:	bd80      	pop	{r7, pc}

08008828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800882c:	4802      	ldr	r0, [pc, #8]	; (8008838 <USART2_IRQHandler+0x10>)
 800882e:	f001 fabd 	bl	8009dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008832:	bf00      	nop
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000030 	.word	0x20000030

0800883c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008840:	4802      	ldr	r0, [pc, #8]	; (800884c <USART3_IRQHandler+0x10>)
 8008842:	f001 fab3 	bl	8009dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000078 	.word	0x20000078

08008850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008854:	4b07      	ldr	r3, [pc, #28]	; (8008874 <SystemInit+0x24>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	4a06      	ldr	r2, [pc, #24]	; (8008874 <SystemInit+0x24>)
 800885c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = 0x8008000;
 8008864:	4b03      	ldr	r3, [pc, #12]	; (8008874 <SystemInit+0x24>)
 8008866:	4a04      	ldr	r2, [pc, #16]	; (8008878 <SystemInit+0x28>)
 8008868:	609a      	str	r2, [r3, #8]
		  /*VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
}
 800886a:	bf00      	nop
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	e000ed00 	.word	0xe000ed00
 8008878:	08008000 	.word	0x08008000

0800887c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 8008882:	4a12      	ldr	r2, [pc, #72]	; (80088cc <MX_USART2_UART_Init+0x50>)
 8008884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008886:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 8008888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800888c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800888e:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 8008890:	2200      	movs	r2, #0
 8008892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008894:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 8008896:	2200      	movs	r2, #0
 8008898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800889a:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 800889c:	2200      	movs	r2, #0
 800889e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 80088a2:	220c      	movs	r2, #12
 80088a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80088b2:	4805      	ldr	r0, [pc, #20]	; (80088c8 <MX_USART2_UART_Init+0x4c>)
 80088b4:	f001 f97a 	bl	8009bac <HAL_UART_Init>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80088be:	f7ff ff5b 	bl	8008778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000030 	.word	0x20000030
 80088cc:	40004400 	.word	0x40004400

080088d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088d6:	4a12      	ldr	r2, [pc, #72]	; (8008920 <MX_USART3_UART_Init+0x50>)
 80088d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80088e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80088e8:	4b0c      	ldr	r3, [pc, #48]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80088ee:	4b0b      	ldr	r3, [pc, #44]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088f6:	220c      	movs	r2, #12
 80088f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088fa:	4b08      	ldr	r3, [pc, #32]	; (800891c <MX_USART3_UART_Init+0x4c>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <MX_USART3_UART_Init+0x4c>)
 8008902:	2200      	movs	r2, #0
 8008904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008906:	4805      	ldr	r0, [pc, #20]	; (800891c <MX_USART3_UART_Init+0x4c>)
 8008908:	f001 f950 	bl	8009bac <HAL_UART_Init>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8008912:	f7ff ff31 	bl	8008778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008916:	bf00      	nop
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000078 	.word	0x20000078
 8008920:	40004800 	.word	0x40004800

08008924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08c      	sub	sp, #48	; 0x30
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892c:	f107 031c 	add.w	r3, r7, #28
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	609a      	str	r2, [r3, #8]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a3a      	ldr	r2, [pc, #232]	; (8008a2c <HAL_UART_MspInit+0x108>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d134      	bne.n	80089b0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	61bb      	str	r3, [r7, #24]
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	4a38      	ldr	r2, [pc, #224]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 8008950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008954:	6413      	str	r3, [r2, #64]	; 0x40
 8008956:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008962:	2300      	movs	r3, #0
 8008964:	617b      	str	r3, [r7, #20]
 8008966:	4b32      	ldr	r3, [pc, #200]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 8008968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896a:	4a31      	ldr	r2, [pc, #196]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 800896c:	f043 0308 	orr.w	r3, r3, #8
 8008970:	6313      	str	r3, [r2, #48]	; 0x30
 8008972:	4b2f      	ldr	r3, [pc, #188]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	617b      	str	r3, [r7, #20]
 800897c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800897e:	2360      	movs	r3, #96	; 0x60
 8008980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008982:	2302      	movs	r3, #2
 8008984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800898a:	2303      	movs	r3, #3
 800898c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800898e:	2307      	movs	r3, #7
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008992:	f107 031c 	add.w	r3, r7, #28
 8008996:	4619      	mov	r1, r3
 8008998:	4826      	ldr	r0, [pc, #152]	; (8008a34 <HAL_UART_MspInit+0x110>)
 800899a:	f000 facf 	bl	8008f3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800899e:	2200      	movs	r2, #0
 80089a0:	2100      	movs	r1, #0
 80089a2:	2026      	movs	r0, #38	; 0x26
 80089a4:	f000 f9fd 	bl	8008da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80089a8:	2026      	movs	r0, #38	; 0x26
 80089aa:	f000 fa16 	bl	8008dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80089ae:	e039      	b.n	8008a24 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a20      	ldr	r2, [pc, #128]	; (8008a38 <HAL_UART_MspInit+0x114>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d134      	bne.n	8008a24 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	4b1c      	ldr	r3, [pc, #112]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	4a1b      	ldr	r2, [pc, #108]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089c8:	6413      	str	r3, [r2, #64]	; 0x40
 80089ca:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	4b15      	ldr	r3, [pc, #84]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	4a14      	ldr	r2, [pc, #80]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089e0:	f043 0302 	orr.w	r3, r3, #2
 80089e4:	6313      	str	r3, [r2, #48]	; 0x30
 80089e6:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <HAL_UART_MspInit+0x10c>)
 80089e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80089f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80089f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f8:	2302      	movs	r3, #2
 80089fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a00:	2303      	movs	r3, #3
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008a04:	2307      	movs	r3, #7
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a08:	f107 031c 	add.w	r3, r7, #28
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	480b      	ldr	r0, [pc, #44]	; (8008a3c <HAL_UART_MspInit+0x118>)
 8008a10:	f000 fa94 	bl	8008f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008a14:	2200      	movs	r2, #0
 8008a16:	2100      	movs	r1, #0
 8008a18:	2027      	movs	r0, #39	; 0x27
 8008a1a:	f000 f9c2 	bl	8008da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008a1e:	2027      	movs	r0, #39	; 0x27
 8008a20:	f000 f9db 	bl	8008dda <HAL_NVIC_EnableIRQ>
}
 8008a24:	bf00      	nop
 8008a26:	3730      	adds	r7, #48	; 0x30
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	40004400 	.word	0x40004400
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40020c00 	.word	0x40020c00
 8008a38:	40004800 	.word	0x40004800
 8008a3c:	40020400 	.word	0x40020400

08008a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008a44:	f7ff ff04 	bl	8008850 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008a48:	480c      	ldr	r0, [pc, #48]	; (8008a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008a4a:	490d      	ldr	r1, [pc, #52]	; (8008a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008a4c:	4a0d      	ldr	r2, [pc, #52]	; (8008a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a50:	e002      	b.n	8008a58 <LoopCopyDataInit>

08008a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a56:	3304      	adds	r3, #4

08008a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a5c:	d3f9      	bcc.n	8008a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a5e:	4a0a      	ldr	r2, [pc, #40]	; (8008a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008a60:	4c0a      	ldr	r4, [pc, #40]	; (8008a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a64:	e001      	b.n	8008a6a <LoopFillZerobss>

08008a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a68:	3204      	adds	r2, #4

08008a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a6c:	d3fb      	bcc.n	8008a66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008a6e:	f002 f8fb 	bl	800ac68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a72:	f7ff fdcb 	bl	800860c <main>
  bx  lr    
 8008a76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008a80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8008a84:	0800acf0 	.word	0x0800acf0
  ldr r2, =_sbss
 8008a88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8008a8c:	200000c4 	.word	0x200000c4

08008a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a90:	e7fe      	b.n	8008a90 <ADC_IRQHandler>
	...

08008a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <HAL_Init+0x40>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ad4 <HAL_Init+0x40>)
 8008a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <HAL_Init+0x40>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_Init+0x40>)
 8008aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ab0:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <HAL_Init+0x40>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a07      	ldr	r2, [pc, #28]	; (8008ad4 <HAL_Init+0x40>)
 8008ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008abc:	2003      	movs	r0, #3
 8008abe:	f000 f965 	bl	8008d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ac2:	200f      	movs	r0, #15
 8008ac4:	f000 f808 	bl	8008ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ac8:	f7ff fe5c 	bl	8008784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40023c00 	.word	0x40023c00

08008ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008ae0:	4b12      	ldr	r3, [pc, #72]	; (8008b2c <HAL_InitTick+0x54>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <HAL_InitTick+0x58>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8008af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f981 	bl	8008dfe <HAL_SYSTICK_Config>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e00e      	b.n	8008b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b0f      	cmp	r3, #15
 8008b0a:	d80a      	bhi.n	8008b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	f000 f945 	bl	8008da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008b18:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <HAL_InitTick+0x5c>)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20000004 	.word	0x20000004
 8008b30:	2000000c 	.word	0x2000000c
 8008b34:	20000008 	.word	0x20000008

08008b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <HAL_IncTick+0x20>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	461a      	mov	r2, r3
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <HAL_IncTick+0x24>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4413      	add	r3, r2
 8008b48:	4a04      	ldr	r2, [pc, #16]	; (8008b5c <HAL_IncTick+0x24>)
 8008b4a:	6013      	str	r3, [r2, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	2000000c 	.word	0x2000000c
 8008b5c:	200000c0 	.word	0x200000c0

08008b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  return uwTick;
 8008b64:	4b03      	ldr	r3, [pc, #12]	; (8008b74 <HAL_GetTick+0x14>)
 8008b66:	681b      	ldr	r3, [r3, #0]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	200000c0 	.word	0x200000c0

08008b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b80:	f7ff ffee 	bl	8008b60 <HAL_GetTick>
 8008b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d005      	beq.n	8008b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b92:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <HAL_Delay+0x44>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008b9e:	bf00      	nop
 8008ba0:	f7ff ffde 	bl	8008b60 <HAL_GetTick>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d8f7      	bhi.n	8008ba0 <HAL_Delay+0x28>
  {
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000000c 	.word	0x2000000c

08008bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008bd0:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <__NVIC_SetPriorityGrouping+0x44>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bdc:	4013      	ands	r3, r2
 8008bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008bf2:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <__NVIC_SetPriorityGrouping+0x44>)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	60d3      	str	r3, [r2, #12]
}
 8008bf8:	bf00      	nop
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	e000ed00 	.word	0xe000ed00

08008c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c0c:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <__NVIC_GetPriorityGrouping+0x18>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	0a1b      	lsrs	r3, r3, #8
 8008c12:	f003 0307 	and.w	r3, r3, #7
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	e000ed00 	.word	0xe000ed00

08008c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	db0b      	blt.n	8008c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	f003 021f 	and.w	r2, r3, #31
 8008c3c:	4907      	ldr	r1, [pc, #28]	; (8008c5c <__NVIC_EnableIRQ+0x38>)
 8008c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c42:	095b      	lsrs	r3, r3, #5
 8008c44:	2001      	movs	r0, #1
 8008c46:	fa00 f202 	lsl.w	r2, r0, r2
 8008c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	e000e100 	.word	0xe000e100

08008c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4603      	mov	r3, r0
 8008c68:	6039      	str	r1, [r7, #0]
 8008c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	db0a      	blt.n	8008c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	490c      	ldr	r1, [pc, #48]	; (8008cac <__NVIC_SetPriority+0x4c>)
 8008c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c7e:	0112      	lsls	r2, r2, #4
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	440b      	add	r3, r1
 8008c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008c88:	e00a      	b.n	8008ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	4908      	ldr	r1, [pc, #32]	; (8008cb0 <__NVIC_SetPriority+0x50>)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	3b04      	subs	r3, #4
 8008c98:	0112      	lsls	r2, r2, #4
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	440b      	add	r3, r1
 8008c9e:	761a      	strb	r2, [r3, #24]
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	e000e100 	.word	0xe000e100
 8008cb0:	e000ed00 	.word	0xe000ed00

08008cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b089      	sub	sp, #36	; 0x24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f1c3 0307 	rsb	r3, r3, #7
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	bf28      	it	cs
 8008cd2:	2304      	movcs	r3, #4
 8008cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	2b06      	cmp	r3, #6
 8008cdc:	d902      	bls.n	8008ce4 <NVIC_EncodePriority+0x30>
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	3b03      	subs	r3, #3
 8008ce2:	e000      	b.n	8008ce6 <NVIC_EncodePriority+0x32>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf2:	43da      	mvns	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	fa01 f303 	lsl.w	r3, r1, r3
 8008d06:	43d9      	mvns	r1, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d0c:	4313      	orrs	r3, r2
         );
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3724      	adds	r7, #36	; 0x24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
	...

08008d1c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008d20:	f3bf 8f4f 	dsb	sy
}
 8008d24:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008d26:	4b06      	ldr	r3, [pc, #24]	; (8008d40 <__NVIC_SystemReset+0x24>)
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008d2e:	4904      	ldr	r1, [pc, #16]	; (8008d40 <__NVIC_SystemReset+0x24>)
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <__NVIC_SystemReset+0x28>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d36:	f3bf 8f4f 	dsb	sy
}
 8008d3a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <__NVIC_SystemReset+0x20>
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	05fa0004 	.word	0x05fa0004

08008d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d58:	d301      	bcc.n	8008d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e00f      	b.n	8008d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d5e:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <SysTick_Config+0x40>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d66:	210f      	movs	r1, #15
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	f7ff ff78 	bl	8008c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <SysTick_Config+0x40>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d76:	4b04      	ldr	r3, [pc, #16]	; (8008d88 <SysTick_Config+0x40>)
 8008d78:	2207      	movs	r2, #7
 8008d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	e000e010 	.word	0xe000e010

08008d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ff13 	bl	8008bc0 <__NVIC_SetPriorityGrouping>
}
 8008d9a:	bf00      	nop
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	4603      	mov	r3, r0
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
 8008dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008db4:	f7ff ff28 	bl	8008c08 <__NVIC_GetPriorityGrouping>
 8008db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	6978      	ldr	r0, [r7, #20]
 8008dc0:	f7ff ff78 	bl	8008cb4 <NVIC_EncodePriority>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff ff47 	bl	8008c60 <__NVIC_SetPriority>
}
 8008dd2:	bf00      	nop
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b082      	sub	sp, #8
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	4603      	mov	r3, r0
 8008de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff ff1b 	bl	8008c24 <__NVIC_EnableIRQ>
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8008dfa:	f7ff ff8f 	bl	8008d1c <__NVIC_SystemReset>

08008dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff ff9e 	bl	8008d48 <SysTick_Config>
 8008e0c:	4603      	mov	r3, r0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b084      	sub	sp, #16
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008e24:	f7ff fe9c 	bl	8008b60 <HAL_GetTick>
 8008e28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d008      	beq.n	8008e48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2280      	movs	r2, #128	; 0x80
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e052      	b.n	8008eee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 0216 	bic.w	r2, r2, #22
 8008e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d103      	bne.n	8008e78 <HAL_DMA_Abort+0x62>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0208 	bic.w	r2, r2, #8
 8008e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e98:	e013      	b.n	8008ec2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e9a:	f7ff fe61 	bl	8008b60 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b05      	cmp	r3, #5
 8008ea6:	d90c      	bls.n	8008ec2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2203      	movs	r2, #3
 8008eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e015      	b.n	8008eee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e4      	bne.n	8008e9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed4:	223f      	movs	r2, #63	; 0x3f
 8008ed6:	409a      	lsls	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d004      	beq.n	8008f14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2280      	movs	r2, #128	; 0x80
 8008f0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e00c      	b.n	8008f2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2205      	movs	r2, #5
 8008f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f022 0201 	bic.w	r2, r2, #1
 8008f2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
	...

08008f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b089      	sub	sp, #36	; 0x24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f52:	2300      	movs	r3, #0
 8008f54:	61fb      	str	r3, [r7, #28]
 8008f56:	e177      	b.n	8009248 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008f58:	2201      	movs	r2, #1
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	f040 8166 	bne.w	8009242 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f003 0303 	and.w	r3, r3, #3
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d005      	beq.n	8008f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d130      	bne.n	8008ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	2203      	movs	r2, #3
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	43db      	mvns	r3, r3
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f003 0201 	and.w	r2, r3, #1
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d017      	beq.n	800902c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2203      	movs	r2, #3
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	4013      	ands	r3, r2
 8009012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	4313      	orrs	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f003 0303 	and.w	r3, r3, #3
 8009034:	2b02      	cmp	r3, #2
 8009036:	d123      	bne.n	8009080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	08da      	lsrs	r2, r3, #3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3208      	adds	r2, #8
 8009040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	220f      	movs	r2, #15
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	43db      	mvns	r3, r3
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	4013      	ands	r3, r2
 800905a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	691a      	ldr	r2, [r3, #16]
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	4313      	orrs	r3, r2
 8009070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	08da      	lsrs	r2, r3, #3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3208      	adds	r2, #8
 800907a:	69b9      	ldr	r1, [r7, #24]
 800907c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	2203      	movs	r2, #3
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	43db      	mvns	r3, r3
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	4013      	ands	r3, r2
 8009096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f003 0203 	and.w	r2, r3, #3
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	fa02 f303 	lsl.w	r3, r2, r3
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 80c0 	beq.w	8009242 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	4b66      	ldr	r3, [pc, #408]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ca:	4a65      	ldr	r2, [pc, #404]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090d0:	6453      	str	r3, [r2, #68]	; 0x44
 80090d2:	4b63      	ldr	r3, [pc, #396]	; (8009260 <HAL_GPIO_Init+0x324>)
 80090d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090de:	4a61      	ldr	r2, [pc, #388]	; (8009264 <HAL_GPIO_Init+0x328>)
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	089b      	lsrs	r3, r3, #2
 80090e4:	3302      	adds	r3, #2
 80090e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	220f      	movs	r2, #15
 80090f6:	fa02 f303 	lsl.w	r3, r2, r3
 80090fa:	43db      	mvns	r3, r3
 80090fc:	69ba      	ldr	r2, [r7, #24]
 80090fe:	4013      	ands	r3, r2
 8009100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a58      	ldr	r2, [pc, #352]	; (8009268 <HAL_GPIO_Init+0x32c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d037      	beq.n	800917a <HAL_GPIO_Init+0x23e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a57      	ldr	r2, [pc, #348]	; (800926c <HAL_GPIO_Init+0x330>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d031      	beq.n	8009176 <HAL_GPIO_Init+0x23a>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a56      	ldr	r2, [pc, #344]	; (8009270 <HAL_GPIO_Init+0x334>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02b      	beq.n	8009172 <HAL_GPIO_Init+0x236>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a55      	ldr	r2, [pc, #340]	; (8009274 <HAL_GPIO_Init+0x338>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d025      	beq.n	800916e <HAL_GPIO_Init+0x232>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a54      	ldr	r2, [pc, #336]	; (8009278 <HAL_GPIO_Init+0x33c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d01f      	beq.n	800916a <HAL_GPIO_Init+0x22e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a53      	ldr	r2, [pc, #332]	; (800927c <HAL_GPIO_Init+0x340>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d019      	beq.n	8009166 <HAL_GPIO_Init+0x22a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a52      	ldr	r2, [pc, #328]	; (8009280 <HAL_GPIO_Init+0x344>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d013      	beq.n	8009162 <HAL_GPIO_Init+0x226>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a51      	ldr	r2, [pc, #324]	; (8009284 <HAL_GPIO_Init+0x348>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00d      	beq.n	800915e <HAL_GPIO_Init+0x222>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a50      	ldr	r2, [pc, #320]	; (8009288 <HAL_GPIO_Init+0x34c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d007      	beq.n	800915a <HAL_GPIO_Init+0x21e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a4f      	ldr	r2, [pc, #316]	; (800928c <HAL_GPIO_Init+0x350>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d101      	bne.n	8009156 <HAL_GPIO_Init+0x21a>
 8009152:	2309      	movs	r3, #9
 8009154:	e012      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009156:	230a      	movs	r3, #10
 8009158:	e010      	b.n	800917c <HAL_GPIO_Init+0x240>
 800915a:	2308      	movs	r3, #8
 800915c:	e00e      	b.n	800917c <HAL_GPIO_Init+0x240>
 800915e:	2307      	movs	r3, #7
 8009160:	e00c      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009162:	2306      	movs	r3, #6
 8009164:	e00a      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009166:	2305      	movs	r3, #5
 8009168:	e008      	b.n	800917c <HAL_GPIO_Init+0x240>
 800916a:	2304      	movs	r3, #4
 800916c:	e006      	b.n	800917c <HAL_GPIO_Init+0x240>
 800916e:	2303      	movs	r3, #3
 8009170:	e004      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009172:	2302      	movs	r3, #2
 8009174:	e002      	b.n	800917c <HAL_GPIO_Init+0x240>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <HAL_GPIO_Init+0x240>
 800917a:	2300      	movs	r3, #0
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	f002 0203 	and.w	r2, r2, #3
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	4093      	lsls	r3, r2
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	4313      	orrs	r3, r2
 800918a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800918c:	4935      	ldr	r1, [pc, #212]	; (8009264 <HAL_GPIO_Init+0x328>)
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	089b      	lsrs	r3, r3, #2
 8009192:	3302      	adds	r3, #2
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800919a:	4b3d      	ldr	r3, [pc, #244]	; (8009290 <HAL_GPIO_Init+0x354>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	43db      	mvns	r3, r3
 80091a4:	69ba      	ldr	r2, [r7, #24]
 80091a6:	4013      	ands	r3, r2
 80091a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80091be:	4a34      	ldr	r2, [pc, #208]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80091c4:	4b32      	ldr	r3, [pc, #200]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	69ba      	ldr	r2, [r7, #24]
 80091d0:	4013      	ands	r3, r2
 80091d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091e8:	4a29      	ldr	r2, [pc, #164]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80091ee:	4b28      	ldr	r3, [pc, #160]	; (8009290 <HAL_GPIO_Init+0x354>)
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	43db      	mvns	r3, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	4013      	ands	r3, r2
 80091fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009212:	4a1f      	ldr	r2, [pc, #124]	; (8009290 <HAL_GPIO_Init+0x354>)
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009218:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <HAL_GPIO_Init+0x354>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	43db      	mvns	r3, r3
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	4013      	ands	r3, r2
 8009226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800923c:	4a14      	ldr	r2, [pc, #80]	; (8009290 <HAL_GPIO_Init+0x354>)
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	3301      	adds	r3, #1
 8009246:	61fb      	str	r3, [r7, #28]
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	2b0f      	cmp	r3, #15
 800924c:	f67f ae84 	bls.w	8008f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009250:	bf00      	nop
 8009252:	bf00      	nop
 8009254:	3724      	adds	r7, #36	; 0x24
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	40023800 	.word	0x40023800
 8009264:	40013800 	.word	0x40013800
 8009268:	40020000 	.word	0x40020000
 800926c:	40020400 	.word	0x40020400
 8009270:	40020800 	.word	0x40020800
 8009274:	40020c00 	.word	0x40020c00
 8009278:	40021000 	.word	0x40021000
 800927c:	40021400 	.word	0x40021400
 8009280:	40021800 	.word	0x40021800
 8009284:	40021c00 	.word	0x40021c00
 8009288:	40022000 	.word	0x40022000
 800928c:	40022400 	.word	0x40022400
 8009290:	40013c00 	.word	0x40013c00

08009294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	807b      	strh	r3, [r7, #2]
 80092a0:	4613      	mov	r3, r2
 80092a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80092a4:	787b      	ldrb	r3, [r7, #1]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092aa:	887a      	ldrh	r2, [r7, #2]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80092b0:	e003      	b.n	80092ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80092b2:	887b      	ldrh	r3, [r7, #2]
 80092b4:	041a      	lsls	r2, r3, #16
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	619a      	str	r2, [r3, #24]
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b085      	sub	sp, #20
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	460b      	mov	r3, r1
 80092d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092d8:	887a      	ldrh	r2, [r7, #2]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4013      	ands	r3, r2
 80092de:	041a      	lsls	r2, r3, #16
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	43d9      	mvns	r1, r3
 80092e4:	887b      	ldrh	r3, [r7, #2]
 80092e6:	400b      	ands	r3, r1
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	619a      	str	r2, [r3, #24]
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e267      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0301 	and.w	r3, r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	d075      	beq.n	8009406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800931a:	4b88      	ldr	r3, [pc, #544]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 030c 	and.w	r3, r3, #12
 8009322:	2b04      	cmp	r3, #4
 8009324:	d00c      	beq.n	8009340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009326:	4b85      	ldr	r3, [pc, #532]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800932e:	2b08      	cmp	r3, #8
 8009330:	d112      	bne.n	8009358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009332:	4b82      	ldr	r3, [pc, #520]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800933a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800933e:	d10b      	bne.n	8009358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009340:	4b7e      	ldr	r3, [pc, #504]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05b      	beq.n	8009404 <HAL_RCC_OscConfig+0x108>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d157      	bne.n	8009404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e242      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009360:	d106      	bne.n	8009370 <HAL_RCC_OscConfig+0x74>
 8009362:	4b76      	ldr	r3, [pc, #472]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a75      	ldr	r2, [pc, #468]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	e01d      	b.n	80093ac <HAL_RCC_OscConfig+0xb0>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009378:	d10c      	bne.n	8009394 <HAL_RCC_OscConfig+0x98>
 800937a:	4b70      	ldr	r3, [pc, #448]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a6f      	ldr	r2, [pc, #444]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	4b6d      	ldr	r3, [pc, #436]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a6c      	ldr	r2, [pc, #432]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800938c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	e00b      	b.n	80093ac <HAL_RCC_OscConfig+0xb0>
 8009394:	4b69      	ldr	r3, [pc, #420]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a68      	ldr	r2, [pc, #416]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800939a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800939e:	6013      	str	r3, [r2, #0]
 80093a0:	4b66      	ldr	r3, [pc, #408]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a65      	ldr	r2, [pc, #404]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80093a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d013      	beq.n	80093dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b4:	f7ff fbd4 	bl	8008b60 <HAL_GetTick>
 80093b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093ba:	e008      	b.n	80093ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093bc:	f7ff fbd0 	bl	8008b60 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	2b64      	cmp	r3, #100	; 0x64
 80093c8:	d901      	bls.n	80093ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e207      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093ce:	4b5b      	ldr	r3, [pc, #364]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d0f0      	beq.n	80093bc <HAL_RCC_OscConfig+0xc0>
 80093da:	e014      	b.n	8009406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093dc:	f7ff fbc0 	bl	8008b60 <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093e2:	e008      	b.n	80093f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093e4:	f7ff fbbc 	bl	8008b60 <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b64      	cmp	r3, #100	; 0x64
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e1f3      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093f6:	4b51      	ldr	r3, [pc, #324]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1f0      	bne.n	80093e4 <HAL_RCC_OscConfig+0xe8>
 8009402:	e000      	b.n	8009406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b00      	cmp	r3, #0
 8009410:	d063      	beq.n	80094da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009412:	4b4a      	ldr	r3, [pc, #296]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 030c 	and.w	r3, r3, #12
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00b      	beq.n	8009436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800941e:	4b47      	ldr	r3, [pc, #284]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009426:	2b08      	cmp	r3, #8
 8009428:	d11c      	bne.n	8009464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800942a:	4b44      	ldr	r3, [pc, #272]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d116      	bne.n	8009464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009436:	4b41      	ldr	r3, [pc, #260]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0302 	and.w	r3, r3, #2
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <HAL_RCC_OscConfig+0x152>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d001      	beq.n	800944e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e1c7      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944e:	4b3b      	ldr	r3, [pc, #236]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	4937      	ldr	r1, [pc, #220]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800945e:	4313      	orrs	r3, r2
 8009460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009462:	e03a      	b.n	80094da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d020      	beq.n	80094ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800946c:	4b34      	ldr	r3, [pc, #208]	; (8009540 <HAL_RCC_OscConfig+0x244>)
 800946e:	2201      	movs	r2, #1
 8009470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009472:	f7ff fb75 	bl	8008b60 <HAL_GetTick>
 8009476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009478:	e008      	b.n	800948c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800947a:	f7ff fb71 	bl	8008b60 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e1a8      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800948c:	4b2b      	ldr	r3, [pc, #172]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0f0      	beq.n	800947a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009498:	4b28      	ldr	r3, [pc, #160]	; (800953c <HAL_RCC_OscConfig+0x240>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	4925      	ldr	r1, [pc, #148]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	600b      	str	r3, [r1, #0]
 80094ac:	e015      	b.n	80094da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094ae:	4b24      	ldr	r3, [pc, #144]	; (8009540 <HAL_RCC_OscConfig+0x244>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b4:	f7ff fb54 	bl	8008b60 <HAL_GetTick>
 80094b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ba:	e008      	b.n	80094ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094bc:	f7ff fb50 	bl	8008b60 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e187      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <HAL_RCC_OscConfig+0x240>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1f0      	bne.n	80094bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0308 	and.w	r3, r3, #8
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d036      	beq.n	8009554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d016      	beq.n	800951c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ee:	4b15      	ldr	r3, [pc, #84]	; (8009544 <HAL_RCC_OscConfig+0x248>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f4:	f7ff fb34 	bl	8008b60 <HAL_GetTick>
 80094f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094fa:	e008      	b.n	800950e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094fc:	f7ff fb30 	bl	8008b60 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	2b02      	cmp	r3, #2
 8009508:	d901      	bls.n	800950e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e167      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800950e:	4b0b      	ldr	r3, [pc, #44]	; (800953c <HAL_RCC_OscConfig+0x240>)
 8009510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0f0      	beq.n	80094fc <HAL_RCC_OscConfig+0x200>
 800951a:	e01b      	b.n	8009554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800951c:	4b09      	ldr	r3, [pc, #36]	; (8009544 <HAL_RCC_OscConfig+0x248>)
 800951e:	2200      	movs	r2, #0
 8009520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009522:	f7ff fb1d 	bl	8008b60 <HAL_GetTick>
 8009526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009528:	e00e      	b.n	8009548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800952a:	f7ff fb19 	bl	8008b60 <HAL_GetTick>
 800952e:	4602      	mov	r2, r0
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	d907      	bls.n	8009548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	e150      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
 800953c:	40023800 	.word	0x40023800
 8009540:	42470000 	.word	0x42470000
 8009544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009548:	4b88      	ldr	r3, [pc, #544]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800954a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1ea      	bne.n	800952a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0304 	and.w	r3, r3, #4
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 8097 	beq.w	8009690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009562:	2300      	movs	r3, #0
 8009564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009566:	4b81      	ldr	r3, [pc, #516]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10f      	bne.n	8009592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009572:	2300      	movs	r3, #0
 8009574:	60bb      	str	r3, [r7, #8]
 8009576:	4b7d      	ldr	r3, [pc, #500]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	4a7c      	ldr	r2, [pc, #496]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800957c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009580:	6413      	str	r3, [r2, #64]	; 0x40
 8009582:	4b7a      	ldr	r3, [pc, #488]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800958a:	60bb      	str	r3, [r7, #8]
 800958c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800958e:	2301      	movs	r3, #1
 8009590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009592:	4b77      	ldr	r3, [pc, #476]	; (8009770 <HAL_RCC_OscConfig+0x474>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d118      	bne.n	80095d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800959e:	4b74      	ldr	r3, [pc, #464]	; (8009770 <HAL_RCC_OscConfig+0x474>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a73      	ldr	r2, [pc, #460]	; (8009770 <HAL_RCC_OscConfig+0x474>)
 80095a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80095aa:	f7ff fad9 	bl	8008b60 <HAL_GetTick>
 80095ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095b0:	e008      	b.n	80095c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095b2:	f7ff fad5 	bl	8008b60 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d901      	bls.n	80095c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	e10c      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c4:	4b6a      	ldr	r3, [pc, #424]	; (8009770 <HAL_RCC_OscConfig+0x474>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d0f0      	beq.n	80095b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d106      	bne.n	80095e6 <HAL_RCC_OscConfig+0x2ea>
 80095d8:	4b64      	ldr	r3, [pc, #400]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80095da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095dc:	4a63      	ldr	r2, [pc, #396]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	6713      	str	r3, [r2, #112]	; 0x70
 80095e4:	e01c      	b.n	8009620 <HAL_RCC_OscConfig+0x324>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d10c      	bne.n	8009608 <HAL_RCC_OscConfig+0x30c>
 80095ee:	4b5f      	ldr	r3, [pc, #380]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	4a5e      	ldr	r2, [pc, #376]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80095f4:	f043 0304 	orr.w	r3, r3, #4
 80095f8:	6713      	str	r3, [r2, #112]	; 0x70
 80095fa:	4b5c      	ldr	r3, [pc, #368]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80095fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fe:	4a5b      	ldr	r2, [pc, #364]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	6713      	str	r3, [r2, #112]	; 0x70
 8009606:	e00b      	b.n	8009620 <HAL_RCC_OscConfig+0x324>
 8009608:	4b58      	ldr	r3, [pc, #352]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800960a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960c:	4a57      	ldr	r2, [pc, #348]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	6713      	str	r3, [r2, #112]	; 0x70
 8009614:	4b55      	ldr	r3, [pc, #340]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009618:	4a54      	ldr	r2, [pc, #336]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800961a:	f023 0304 	bic.w	r3, r3, #4
 800961e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d015      	beq.n	8009654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009628:	f7ff fa9a 	bl	8008b60 <HAL_GetTick>
 800962c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800962e:	e00a      	b.n	8009646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009630:	f7ff fa96 	bl	8008b60 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	f241 3288 	movw	r2, #5000	; 0x1388
 800963e:	4293      	cmp	r3, r2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e0cb      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009646:	4b49      	ldr	r3, [pc, #292]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0ee      	beq.n	8009630 <HAL_RCC_OscConfig+0x334>
 8009652:	e014      	b.n	800967e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009654:	f7ff fa84 	bl	8008b60 <HAL_GetTick>
 8009658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800965a:	e00a      	b.n	8009672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800965c:	f7ff fa80 	bl	8008b60 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	f241 3288 	movw	r2, #5000	; 0x1388
 800966a:	4293      	cmp	r3, r2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e0b5      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009672:	4b3e      	ldr	r3, [pc, #248]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1ee      	bne.n	800965c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800967e:	7dfb      	ldrb	r3, [r7, #23]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d105      	bne.n	8009690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009684:	4b39      	ldr	r3, [pc, #228]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009688:	4a38      	ldr	r2, [pc, #224]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800968a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800968e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80a1 	beq.w	80097dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800969a:	4b34      	ldr	r3, [pc, #208]	; (800976c <HAL_RCC_OscConfig+0x470>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 030c 	and.w	r3, r3, #12
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d05c      	beq.n	8009760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d141      	bne.n	8009732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ae:	4b31      	ldr	r3, [pc, #196]	; (8009774 <HAL_RCC_OscConfig+0x478>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096b4:	f7ff fa54 	bl	8008b60 <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096bc:	f7ff fa50 	bl	8008b60 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e087      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ce:	4b27      	ldr	r3, [pc, #156]	; (800976c <HAL_RCC_OscConfig+0x470>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	019b      	lsls	r3, r3, #6
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	3b01      	subs	r3, #1
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	491b      	ldr	r1, [pc, #108]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009700:	4313      	orrs	r3, r2
 8009702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009704:	4b1b      	ldr	r3, [pc, #108]	; (8009774 <HAL_RCC_OscConfig+0x478>)
 8009706:	2201      	movs	r2, #1
 8009708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970a:	f7ff fa29 	bl	8008b60 <HAL_GetTick>
 800970e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009710:	e008      	b.n	8009724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009712:	f7ff fa25 	bl	8008b60 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	2b02      	cmp	r3, #2
 800971e:	d901      	bls.n	8009724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009720:	2303      	movs	r3, #3
 8009722:	e05c      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d0f0      	beq.n	8009712 <HAL_RCC_OscConfig+0x416>
 8009730:	e054      	b.n	80097dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009732:	4b10      	ldr	r3, [pc, #64]	; (8009774 <HAL_RCC_OscConfig+0x478>)
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009738:	f7ff fa12 	bl	8008b60 <HAL_GetTick>
 800973c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800973e:	e008      	b.n	8009752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009740:	f7ff fa0e 	bl	8008b60 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d901      	bls.n	8009752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e045      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <HAL_RCC_OscConfig+0x470>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1f0      	bne.n	8009740 <HAL_RCC_OscConfig+0x444>
 800975e:	e03d      	b.n	80097dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d107      	bne.n	8009778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e038      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
 800976c:	40023800 	.word	0x40023800
 8009770:	40007000 	.word	0x40007000
 8009774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <HAL_RCC_OscConfig+0x4ec>)
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d028      	beq.n	80097d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009790:	429a      	cmp	r2, r3
 8009792:	d121      	bne.n	80097d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800979e:	429a      	cmp	r2, r3
 80097a0:	d11a      	bne.n	80097d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80097a8:	4013      	ands	r3, r2
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80097ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d111      	bne.n	80097d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	3b01      	subs	r3, #1
 80097c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d107      	bne.n	80097d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d001      	beq.n	80097dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	40023800 	.word	0x40023800

080097ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e0cc      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009800:	4b68      	ldr	r3, [pc, #416]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d90c      	bls.n	8009828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800980e:	4b65      	ldr	r3, [pc, #404]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009816:	4b63      	ldr	r3, [pc, #396]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	429a      	cmp	r2, r3
 8009822:	d001      	beq.n	8009828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e0b8      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0302 	and.w	r3, r3, #2
 8009830:	2b00      	cmp	r3, #0
 8009832:	d020      	beq.n	8009876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009840:	4b59      	ldr	r3, [pc, #356]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	4a58      	ldr	r2, [pc, #352]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800984a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0308 	and.w	r3, r3, #8
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009858:	4b53      	ldr	r3, [pc, #332]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	4a52      	ldr	r2, [pc, #328]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800985e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009864:	4b50      	ldr	r3, [pc, #320]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	494d      	ldr	r1, [pc, #308]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009872:	4313      	orrs	r3, r2
 8009874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d044      	beq.n	800990c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d107      	bne.n	800989a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800988a:	4b47      	ldr	r3, [pc, #284]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d119      	bne.n	80098ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e07f      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d003      	beq.n	80098aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d107      	bne.n	80098ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098aa:	4b3f      	ldr	r3, [pc, #252]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d109      	bne.n	80098ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	e06f      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098ba:	4b3b      	ldr	r3, [pc, #236]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e067      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80098ca:	4b37      	ldr	r3, [pc, #220]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f023 0203 	bic.w	r2, r3, #3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	4934      	ldr	r1, [pc, #208]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80098dc:	f7ff f940 	bl	8008b60 <HAL_GetTick>
 80098e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098e2:	e00a      	b.n	80098fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098e4:	f7ff f93c 	bl	8008b60 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e04f      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098fa:	4b2b      	ldr	r3, [pc, #172]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f003 020c 	and.w	r2, r3, #12
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	429a      	cmp	r2, r3
 800990a:	d1eb      	bne.n	80098e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800990c:	4b25      	ldr	r3, [pc, #148]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d20c      	bcs.n	8009934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800991a:	4b22      	ldr	r3, [pc, #136]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009922:	4b20      	ldr	r3, [pc, #128]	; (80099a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d001      	beq.n	8009934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e032      	b.n	800999a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009940:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	4916      	ldr	r1, [pc, #88]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800994e:	4313      	orrs	r3, r2
 8009950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0308 	and.w	r3, r3, #8
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800995e:	4b12      	ldr	r3, [pc, #72]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	490e      	ldr	r1, [pc, #56]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800996e:	4313      	orrs	r3, r2
 8009970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009972:	f000 f821 	bl	80099b8 <HAL_RCC_GetSysClockFreq>
 8009976:	4602      	mov	r2, r0
 8009978:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <HAL_RCC_ClockConfig+0x1bc>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	091b      	lsrs	r3, r3, #4
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	490a      	ldr	r1, [pc, #40]	; (80099ac <HAL_RCC_ClockConfig+0x1c0>)
 8009984:	5ccb      	ldrb	r3, [r1, r3]
 8009986:	fa22 f303 	lsr.w	r3, r2, r3
 800998a:	4a09      	ldr	r2, [pc, #36]	; (80099b0 <HAL_RCC_ClockConfig+0x1c4>)
 800998c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800998e:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f8a0 	bl	8008ad8 <HAL_InitTick>

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	40023c00 	.word	0x40023c00
 80099a8:	40023800 	.word	0x40023800
 80099ac:	0800acc8 	.word	0x0800acc8
 80099b0:	20000004 	.word	0x20000004
 80099b4:	20000008 	.word	0x20000008

080099b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099bc:	b090      	sub	sp, #64	; 0x40
 80099be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
 80099c4:	2300      	movs	r3, #0
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099c8:	2300      	movs	r3, #0
 80099ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099d0:	4b59      	ldr	r3, [pc, #356]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f003 030c 	and.w	r3, r3, #12
 80099d8:	2b08      	cmp	r3, #8
 80099da:	d00d      	beq.n	80099f8 <HAL_RCC_GetSysClockFreq+0x40>
 80099dc:	2b08      	cmp	r3, #8
 80099de:	f200 80a1 	bhi.w	8009b24 <HAL_RCC_GetSysClockFreq+0x16c>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_RCC_GetSysClockFreq+0x34>
 80099e6:	2b04      	cmp	r3, #4
 80099e8:	d003      	beq.n	80099f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80099ea:	e09b      	b.n	8009b24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80099ec:	4b53      	ldr	r3, [pc, #332]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x184>)
 80099ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80099f0:	e09b      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80099f2:	4b53      	ldr	r3, [pc, #332]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x188>)
 80099f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80099f6:	e098      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80099f8:	4b4f      	ldr	r3, [pc, #316]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a02:	4b4d      	ldr	r3, [pc, #308]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d028      	beq.n	8009a60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a0e:	4b4a      	ldr	r3, [pc, #296]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	099b      	lsrs	r3, r3, #6
 8009a14:	2200      	movs	r2, #0
 8009a16:	623b      	str	r3, [r7, #32]
 8009a18:	627a      	str	r2, [r7, #36]	; 0x24
 8009a1a:	6a3b      	ldr	r3, [r7, #32]
 8009a1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009a20:	2100      	movs	r1, #0
 8009a22:	4b47      	ldr	r3, [pc, #284]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a24:	fb03 f201 	mul.w	r2, r3, r1
 8009a28:	2300      	movs	r3, #0
 8009a2a:	fb00 f303 	mul.w	r3, r0, r3
 8009a2e:	4413      	add	r3, r2
 8009a30:	4a43      	ldr	r2, [pc, #268]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x188>)
 8009a32:	fba0 1202 	umull	r1, r2, r0, r2
 8009a36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a38:	460a      	mov	r2, r1
 8009a3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8009a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a3e:	4413      	add	r3, r2
 8009a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a44:	2200      	movs	r2, #0
 8009a46:	61bb      	str	r3, [r7, #24]
 8009a48:	61fa      	str	r2, [r7, #28]
 8009a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009a52:	f7fe fbcb 	bl	80081ec <__aeabi_uldivmod>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a5e:	e053      	b.n	8009b08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a60:	4b35      	ldr	r3, [pc, #212]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	099b      	lsrs	r3, r3, #6
 8009a66:	2200      	movs	r2, #0
 8009a68:	613b      	str	r3, [r7, #16]
 8009a6a:	617a      	str	r2, [r7, #20]
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009a72:	f04f 0b00 	mov.w	fp, #0
 8009a76:	4652      	mov	r2, sl
 8009a78:	465b      	mov	r3, fp
 8009a7a:	f04f 0000 	mov.w	r0, #0
 8009a7e:	f04f 0100 	mov.w	r1, #0
 8009a82:	0159      	lsls	r1, r3, #5
 8009a84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a88:	0150      	lsls	r0, r2, #5
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	ebb2 080a 	subs.w	r8, r2, sl
 8009a92:	eb63 090b 	sbc.w	r9, r3, fp
 8009a96:	f04f 0200 	mov.w	r2, #0
 8009a9a:	f04f 0300 	mov.w	r3, #0
 8009a9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009aa2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009aa6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009aaa:	ebb2 0408 	subs.w	r4, r2, r8
 8009aae:	eb63 0509 	sbc.w	r5, r3, r9
 8009ab2:	f04f 0200 	mov.w	r2, #0
 8009ab6:	f04f 0300 	mov.w	r3, #0
 8009aba:	00eb      	lsls	r3, r5, #3
 8009abc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ac0:	00e2      	lsls	r2, r4, #3
 8009ac2:	4614      	mov	r4, r2
 8009ac4:	461d      	mov	r5, r3
 8009ac6:	eb14 030a 	adds.w	r3, r4, sl
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	eb45 030b 	adc.w	r3, r5, fp
 8009ad0:	607b      	str	r3, [r7, #4]
 8009ad2:	f04f 0200 	mov.w	r2, #0
 8009ad6:	f04f 0300 	mov.w	r3, #0
 8009ada:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ade:	4629      	mov	r1, r5
 8009ae0:	028b      	lsls	r3, r1, #10
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ae8:	4621      	mov	r1, r4
 8009aea:	028a      	lsls	r2, r1, #10
 8009aec:	4610      	mov	r0, r2
 8009aee:	4619      	mov	r1, r3
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	2200      	movs	r2, #0
 8009af4:	60bb      	str	r3, [r7, #8]
 8009af6:	60fa      	str	r2, [r7, #12]
 8009af8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009afc:	f7fe fb76 	bl	80081ec <__aeabi_uldivmod>
 8009b00:	4602      	mov	r2, r0
 8009b02:	460b      	mov	r3, r1
 8009b04:	4613      	mov	r3, r2
 8009b06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b08:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <HAL_RCC_GetSysClockFreq+0x180>)
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	0c1b      	lsrs	r3, r3, #16
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	3301      	adds	r3, #1
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009b18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009b22:	e002      	b.n	8009b2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x184>)
 8009b26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3740      	adds	r7, #64	; 0x40
 8009b30:	46bd      	mov	sp, r7
 8009b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b36:	bf00      	nop
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	00f42400 	.word	0x00f42400
 8009b40:	017d7840 	.word	0x017d7840

08009b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b44:	b480      	push	{r7}
 8009b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b48:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20000004 	.word	0x20000004

08009b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b60:	f7ff fff0 	bl	8009b44 <HAL_RCC_GetHCLKFreq>
 8009b64:	4602      	mov	r2, r0
 8009b66:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	0a9b      	lsrs	r3, r3, #10
 8009b6c:	f003 0307 	and.w	r3, r3, #7
 8009b70:	4903      	ldr	r1, [pc, #12]	; (8009b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b72:	5ccb      	ldrb	r3, [r1, r3]
 8009b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	40023800 	.word	0x40023800
 8009b80:	0800acd8 	.word	0x0800acd8

08009b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b88:	f7ff ffdc 	bl	8009b44 <HAL_RCC_GetHCLKFreq>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	0b5b      	lsrs	r3, r3, #13
 8009b94:	f003 0307 	and.w	r3, r3, #7
 8009b98:	4903      	ldr	r1, [pc, #12]	; (8009ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b9a:	5ccb      	ldrb	r3, [r1, r3]
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	40023800 	.word	0x40023800
 8009ba8:	0800acd8 	.word	0x0800acd8

08009bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d101      	bne.n	8009bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e042      	b.n	8009c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d106      	bne.n	8009bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f7fe fea6 	bl	8008924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2224      	movs	r2, #36	; 0x24
 8009bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fdbd 	bl	800a770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691a      	ldr	r2, [r3, #16]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695a      	ldr	r2, [r3, #20]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	68da      	ldr	r2, [r3, #12]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2220      	movs	r2, #32
 8009c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2220      	movs	r2, #32
 8009c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08a      	sub	sp, #40	; 0x28
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b20      	cmp	r3, #32
 8009c6a:	d175      	bne.n	8009d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <HAL_UART_Transmit+0x2c>
 8009c72:	88fb      	ldrh	r3, [r7, #6]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e06e      	b.n	8009d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2221      	movs	r2, #33	; 0x21
 8009c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8a:	f7fe ff69 	bl	8008b60 <HAL_GetTick>
 8009c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	88fa      	ldrh	r2, [r7, #6]
 8009c94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca4:	d108      	bne.n	8009cb8 <HAL_UART_Transmit+0x6c>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d104      	bne.n	8009cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	e003      	b.n	8009cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009cc0:	e02e      	b.n	8009d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2180      	movs	r1, #128	; 0x80
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 fb1f 	bl	800a310 <UART_WaitOnFlagUntilTimeout>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d005      	beq.n	8009ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e03a      	b.n	8009d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10b      	bne.n	8009d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	881b      	ldrh	r3, [r3, #0]
 8009cee:	461a      	mov	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	3302      	adds	r3, #2
 8009cfe:	61bb      	str	r3, [r7, #24]
 8009d00:	e007      	b.n	8009d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	781a      	ldrb	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1cb      	bne.n	8009cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2200      	movs	r2, #0
 8009d32:	2140      	movs	r1, #64	; 0x40
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 faeb 	bl	800a310 <UART_WaitOnFlagUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e006      	b.n	8009d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	e000      	b.n	8009d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009d58:	2302      	movs	r3, #2
  }
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3720      	adds	r7, #32
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b084      	sub	sp, #16
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d76:	b2db      	uxtb	r3, r3
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d112      	bne.n	8009da2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <HAL_UART_Receive_IT+0x26>
 8009d82:	88fb      	ldrh	r3, [r7, #6]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e00b      	b.n	8009da4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	461a      	mov	r2, r3
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 fb12 	bl	800a3c2 <UART_Start_Receive_IT>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	e000      	b.n	8009da4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009da2:	2302      	movs	r3, #2
  }
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b0ba      	sub	sp, #232	; 0xe8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	695b      	ldr	r3, [r3, #20]
 8009dce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de2:	f003 030f 	and.w	r3, r3, #15
 8009de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10f      	bne.n	8009e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <HAL_UART_IRQHandler+0x66>
 8009dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fbf2 	bl	800a5f4 <UART_Receive_IT>
      return;
 8009e10:	e25b      	b.n	800a2ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 80de 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x22c>
 8009e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d106      	bne.n	8009e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e2c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 80d1 	beq.w	8009fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <HAL_UART_IRQHandler+0xae>
 8009e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e52:	f043 0201 	orr.w	r2, r3, #1
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <HAL_UART_IRQHandler+0xd2>
 8009e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e76:	f043 0202 	orr.w	r2, r3, #2
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xf6>
 8009e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9a:	f043 0204 	orr.w	r2, r3, #4
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea6:	f003 0308 	and.w	r3, r3, #8
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d011      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x126>
 8009eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d105      	bne.n	8009ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eca:	f043 0208 	orr.w	r2, r3, #8
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 81f2 	beq.w	800a2c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d008      	beq.n	8009efa <HAL_UART_IRQHandler+0x14e>
 8009ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eec:	f003 0320 	and.w	r3, r3, #32
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fb7d 	bl	800a5f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f04:	2b40      	cmp	r3, #64	; 0x40
 8009f06:	bf0c      	ite	eq
 8009f08:	2301      	moveq	r3, #1
 8009f0a:	2300      	movne	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <HAL_UART_IRQHandler+0x17a>
 8009f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d04f      	beq.n	8009fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa85 	bl	800a436 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f36:	2b40      	cmp	r3, #64	; 0x40
 8009f38:	d141      	bne.n	8009fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3314      	adds	r3, #20
 8009f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3314      	adds	r3, #20
 8009f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f76:	e841 2300 	strex	r3, r2, [r1]
 8009f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1d9      	bne.n	8009f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d013      	beq.n	8009fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f92:	4a7e      	ldr	r2, [pc, #504]	; (800a18c <HAL_UART_IRQHandler+0x3e0>)
 8009f94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe ffab 	bl	8008ef6 <HAL_DMA_Abort_IT>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d016      	beq.n	8009fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb4:	e00e      	b.n	8009fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f994 	bl	800a2e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fbc:	e00a      	b.n	8009fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f990 	bl	800a2e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc4:	e006      	b.n	8009fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f98c 	bl	800a2e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009fd2:	e175      	b.n	800a2c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd4:	bf00      	nop
    return;
 8009fd6:	e173      	b.n	800a2c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	f040 814f 	bne.w	800a280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe6:	f003 0310 	and.w	r3, r3, #16
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8148 	beq.w	800a280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8141 	beq.w	800a280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ffe:	2300      	movs	r3, #0
 800a000:	60bb      	str	r3, [r7, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60bb      	str	r3, [r7, #8]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	60bb      	str	r3, [r7, #8]
 800a012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	f040 80b6 	bne.w	800a190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8145 	beq.w	800a2c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a03e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a042:	429a      	cmp	r2, r3
 800a044:	f080 813e 	bcs.w	800a2c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a04e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05a:	f000 8088 	beq.w	800a16e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	330c      	adds	r3, #12
 800a064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a07c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	330c      	adds	r3, #12
 800a086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a08a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a08e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1d9      	bne.n	800a05e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3314      	adds	r3, #20
 800a0b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0bc:	f023 0301 	bic.w	r3, r3, #1
 800a0c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3314      	adds	r3, #20
 800a0ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0da:	e841 2300 	strex	r3, r2, [r1]
 800a0de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e1      	bne.n	800a0aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3314      	adds	r3, #20
 800a0ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3314      	adds	r3, #20
 800a106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a10a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a10c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e3      	bne.n	800a0e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2220      	movs	r2, #32
 800a122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a136:	e853 3f00 	ldrex	r3, [r3]
 800a13a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a13c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a13e:	f023 0310 	bic.w	r3, r3, #16
 800a142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a150:	65ba      	str	r2, [r7, #88]	; 0x58
 800a152:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a154:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a158:	e841 2300 	strex	r3, r2, [r1]
 800a15c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1e3      	bne.n	800a12c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fe54 	bl	8008e16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2202      	movs	r2, #2
 800a172:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	b29b      	uxth	r3, r3
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f8b7 	bl	800a2f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a18a:	e09b      	b.n	800a2c4 <HAL_UART_IRQHandler+0x518>
 800a18c:	0800a4fd 	.word	0x0800a4fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 808e 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a1ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8089 	beq.w	800a2c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1da:	647a      	str	r2, [r7, #68]	; 0x44
 800a1dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e3      	bne.n	800a1b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	f023 0301 	bic.w	r3, r3, #1
 800a204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3314      	adds	r3, #20
 800a20e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a212:	633a      	str	r2, [r7, #48]	; 0x30
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e3      	bne.n	800a1ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60fb      	str	r3, [r7, #12]
   return(result);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0310 	bic.w	r3, r3, #16
 800a24a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	330c      	adds	r3, #12
 800a254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a258:	61fa      	str	r2, [r7, #28]
 800a25a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	69b9      	ldr	r1, [r7, #24]
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	617b      	str	r3, [r7, #20]
   return(result);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e3      	bne.n	800a234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f83d 	bl	800a2f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a27e:	e023      	b.n	800a2c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d009      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x4f4>
 800a28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f943 	bl	800a524 <UART_Transmit_IT>
    return;
 800a29e:	e014      	b.n	800a2ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00e      	beq.n	800a2ca <HAL_UART_IRQHandler+0x51e>
 800a2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d008      	beq.n	800a2ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 f983 	bl	800a5c4 <UART_EndTransmit_IT>
    return;
 800a2be:	e004      	b.n	800a2ca <HAL_UART_IRQHandler+0x51e>
    return;
 800a2c0:	bf00      	nop
 800a2c2:	e002      	b.n	800a2ca <HAL_UART_IRQHandler+0x51e>
      return;
 800a2c4:	bf00      	nop
 800a2c6:	e000      	b.n	800a2ca <HAL_UART_IRQHandler+0x51e>
      return;
 800a2c8:	bf00      	nop
  }
}
 800a2ca:	37e8      	adds	r7, #232	; 0xe8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	603b      	str	r3, [r7, #0]
 800a31c:	4613      	mov	r3, r2
 800a31e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a320:	e03b      	b.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a328:	d037      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a32a:	f7fe fc19 	bl	8008b60 <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	6a3a      	ldr	r2, [r7, #32]
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <UART_WaitOnFlagUntilTimeout+0x30>
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e03a      	b.n	800a3ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f003 0304 	and.w	r3, r3, #4
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d023      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	2b80      	cmp	r3, #128	; 0x80
 800a356:	d020      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b40      	cmp	r3, #64	; 0x40
 800a35c:	d01d      	beq.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0308 	and.w	r3, r3, #8
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d116      	bne.n	800a39a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	617b      	str	r3, [r7, #20]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f000 f857 	bl	800a436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2208      	movs	r2, #8
 800a38c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e00f      	b.n	800a3ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	68ba      	ldr	r2, [r7, #8]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	bf0c      	ite	eq
 800a3aa:	2301      	moveq	r3, #1
 800a3ac:	2300      	movne	r3, #0
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d0b4      	beq.n	800a322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3718      	adds	r7, #24
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b085      	sub	sp, #20
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	60f8      	str	r0, [r7, #12]
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	88fa      	ldrh	r2, [r7, #6]
 800a3da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	88fa      	ldrh	r2, [r7, #6]
 800a3e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2222      	movs	r2, #34	; 0x22
 800a3ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a406:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	695a      	ldr	r2, [r3, #20]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f042 0201 	orr.w	r2, r2, #1
 800a416:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f042 0220 	orr.w	r2, r2, #32
 800a426:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a436:	b480      	push	{r7}
 800a438:	b095      	sub	sp, #84	; 0x54
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	330c      	adds	r3, #12
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a454:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	330c      	adds	r3, #12
 800a45c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a45e:	643a      	str	r2, [r7, #64]	; 0x40
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e5      	bne.n	800a43e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	3314      	adds	r3, #20
 800a478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	e853 3f00 	ldrex	r3, [r3]
 800a480:	61fb      	str	r3, [r7, #28]
   return(result);
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	f023 0301 	bic.w	r3, r3, #1
 800a488:	64bb      	str	r3, [r7, #72]	; 0x48
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3314      	adds	r3, #20
 800a490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a492:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a49a:	e841 2300 	strex	r3, r2, [r1]
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d1e5      	bne.n	800a472 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d119      	bne.n	800a4e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	330c      	adds	r3, #12
 800a4b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f023 0310 	bic.w	r3, r3, #16
 800a4c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	330c      	adds	r3, #12
 800a4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4ce:	61ba      	str	r2, [r7, #24]
 800a4d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6979      	ldr	r1, [r7, #20]
 800a4d4:	69ba      	ldr	r2, [r7, #24]
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	613b      	str	r3, [r7, #16]
   return(result);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e5      	bne.n	800a4ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4f0:	bf00      	nop
 800a4f2:	3754      	adds	r7, #84	; 0x54
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fee4 	bl	800a2e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b21      	cmp	r3, #33	; 0x21
 800a536:	d13e      	bne.n	800a5b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a540:	d114      	bne.n	800a56c <UART_Transmit_IT+0x48>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d110      	bne.n	800a56c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	461a      	mov	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a55e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a1b      	ldr	r3, [r3, #32]
 800a564:	1c9a      	adds	r2, r3, #2
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	621a      	str	r2, [r3, #32]
 800a56a:	e008      	b.n	800a57e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a1b      	ldr	r3, [r3, #32]
 800a570:	1c59      	adds	r1, r3, #1
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6211      	str	r1, [r2, #32]
 800a576:	781a      	ldrb	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b01      	subs	r3, #1
 800a586:	b29b      	uxth	r3, r3
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	4619      	mov	r1, r3
 800a58c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10f      	bne.n	800a5b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	e000      	b.n	800a5b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5b6:	2302      	movs	r3, #2
  }
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3714      	adds	r7, #20
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68da      	ldr	r2, [r3, #12]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fe73 	bl	800a2d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08c      	sub	sp, #48	; 0x30
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b22      	cmp	r3, #34	; 0x22
 800a606:	f040 80ae 	bne.w	800a766 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a612:	d117      	bne.n	800a644 <UART_Receive_IT+0x50>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d113      	bne.n	800a644 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a61c:	2300      	movs	r3, #0
 800a61e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a632:	b29a      	uxth	r2, r3
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a63c:	1c9a      	adds	r2, r3, #2
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	629a      	str	r2, [r3, #40]	; 0x28
 800a642:	e026      	b.n	800a692 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a656:	d007      	beq.n	800a668 <UART_Receive_IT+0x74>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <UART_Receive_IT+0x82>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d106      	bne.n	800a676 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a672:	701a      	strb	r2, [r3, #0]
 800a674:	e008      	b.n	800a688 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a682:	b2da      	uxtb	r2, r3
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a696:	b29b      	uxth	r3, r3
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d15d      	bne.n	800a762 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68da      	ldr	r2, [r3, #12]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0220 	bic.w	r2, r2, #32
 800a6b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695a      	ldr	r2, [r3, #20]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 0201 	bic.w	r2, r2, #1
 800a6d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d135      	bne.n	800a758 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	613b      	str	r3, [r7, #16]
   return(result);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f023 0310 	bic.w	r3, r3, #16
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	330c      	adds	r3, #12
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	623a      	str	r2, [r7, #32]
 800a714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	69f9      	ldr	r1, [r7, #28]
 800a718:	6a3a      	ldr	r2, [r7, #32]
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b10      	cmp	r3, #16
 800a732:	d10a      	bne.n	800a74a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fdd1 	bl	800a2f8 <HAL_UARTEx_RxEventCallback>
 800a756:	e002      	b.n	800a75e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fd ffe5 	bl	8008728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	e002      	b.n	800a768 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e000      	b.n	800a768 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a766:	2302      	movs	r3, #2
  }
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3730      	adds	r7, #48	; 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a774:	b0c0      	sub	sp, #256	; 0x100
 800a776:	af00      	add	r7, sp, #0
 800a778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78c:	68d9      	ldr	r1, [r3, #12]
 800a78e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	ea40 0301 	orr.w	r3, r0, r1
 800a798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7c8:	f021 010c 	bic.w	r1, r1, #12
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ea:	6999      	ldr	r1, [r3, #24]
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	ea40 0301 	orr.w	r3, r0, r1
 800a7f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b8f      	ldr	r3, [pc, #572]	; (800aa3c <UART_SetConfig+0x2cc>)
 800a800:	429a      	cmp	r2, r3
 800a802:	d005      	beq.n	800a810 <UART_SetConfig+0xa0>
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b8d      	ldr	r3, [pc, #564]	; (800aa40 <UART_SetConfig+0x2d0>)
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d104      	bne.n	800a81a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a810:	f7ff f9b8 	bl	8009b84 <HAL_RCC_GetPCLK2Freq>
 800a814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a818:	e003      	b.n	800a822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a81a:	f7ff f99f 	bl	8009b5c <HAL_RCC_GetPCLK1Freq>
 800a81e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a82c:	f040 810c 	bne.w	800aa48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a834:	2200      	movs	r2, #0
 800a836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a83a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a83e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	1891      	adds	r1, r2, r2
 800a848:	65b9      	str	r1, [r7, #88]	; 0x58
 800a84a:	415b      	adcs	r3, r3
 800a84c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a84e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a852:	4621      	mov	r1, r4
 800a854:	eb12 0801 	adds.w	r8, r2, r1
 800a858:	4629      	mov	r1, r5
 800a85a:	eb43 0901 	adc.w	r9, r3, r1
 800a85e:	f04f 0200 	mov.w	r2, #0
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a86a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a86e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a872:	4690      	mov	r8, r2
 800a874:	4699      	mov	r9, r3
 800a876:	4623      	mov	r3, r4
 800a878:	eb18 0303 	adds.w	r3, r8, r3
 800a87c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a880:	462b      	mov	r3, r5
 800a882:	eb49 0303 	adc.w	r3, r9, r3
 800a886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a89a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a89e:	460b      	mov	r3, r1
 800a8a0:	18db      	adds	r3, r3, r3
 800a8a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	eb42 0303 	adc.w	r3, r2, r3
 800a8aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a8ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8b4:	f7fd fc9a 	bl	80081ec <__aeabi_uldivmod>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4b61      	ldr	r3, [pc, #388]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a8be:	fba3 2302 	umull	r2, r3, r3, r2
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	011c      	lsls	r4, r3, #4
 800a8c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	1891      	adds	r1, r2, r2
 800a8de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8e0:	415b      	adcs	r3, r3
 800a8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	f04f 0300 	mov.w	r3, #0
 800a8fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a908:	4692      	mov	sl, r2
 800a90a:	469b      	mov	fp, r3
 800a90c:	4643      	mov	r3, r8
 800a90e:	eb1a 0303 	adds.w	r3, sl, r3
 800a912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a916:	464b      	mov	r3, r9
 800a918:	eb4b 0303 	adc.w	r3, fp, r3
 800a91c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a92c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a934:	460b      	mov	r3, r1
 800a936:	18db      	adds	r3, r3, r3
 800a938:	643b      	str	r3, [r7, #64]	; 0x40
 800a93a:	4613      	mov	r3, r2
 800a93c:	eb42 0303 	adc.w	r3, r2, r3
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
 800a942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a94a:	f7fd fc4f 	bl	80081ec <__aeabi_uldivmod>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4611      	mov	r1, r2
 800a954:	4b3b      	ldr	r3, [pc, #236]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a956:	fba3 2301 	umull	r2, r3, r3, r1
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	2264      	movs	r2, #100	; 0x64
 800a95e:	fb02 f303 	mul.w	r3, r2, r3
 800a962:	1acb      	subs	r3, r1, r3
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a96c:	fba3 2302 	umull	r2, r3, r3, r2
 800a970:	095b      	lsrs	r3, r3, #5
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a978:	441c      	add	r4, r3
 800a97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	1891      	adds	r1, r2, r2
 800a992:	63b9      	str	r1, [r7, #56]	; 0x38
 800a994:	415b      	adcs	r3, r3
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a99c:	4641      	mov	r1, r8
 800a99e:	1851      	adds	r1, r2, r1
 800a9a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	414b      	adcs	r3, r1
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	00cb      	lsls	r3, r1, #3
 800a9b8:	4651      	mov	r1, sl
 800a9ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9be:	4651      	mov	r1, sl
 800a9c0:	00ca      	lsls	r2, r1, #3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	189b      	adds	r3, r3, r2
 800a9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	eb42 0303 	adc.w	r3, r2, r3
 800a9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	18db      	adds	r3, r3, r3
 800a9f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	eb42 0303 	adc.w	r3, r2, r3
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa06:	f7fd fbf1 	bl	80081ec <__aeabi_uldivmod>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <UART_SetConfig+0x2d4>)
 800aa10:	fba3 1302 	umull	r1, r3, r3, r2
 800aa14:	095b      	lsrs	r3, r3, #5
 800aa16:	2164      	movs	r1, #100	; 0x64
 800aa18:	fb01 f303 	mul.w	r3, r1, r3
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	3332      	adds	r3, #50	; 0x32
 800aa22:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <UART_SetConfig+0x2d4>)
 800aa24:	fba2 2303 	umull	r2, r3, r2, r3
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	f003 0207 	and.w	r2, r3, #7
 800aa2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4422      	add	r2, r4
 800aa36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa38:	e106      	b.n	800ac48 <UART_SetConfig+0x4d8>
 800aa3a:	bf00      	nop
 800aa3c:	40011000 	.word	0x40011000
 800aa40:	40011400 	.word	0x40011400
 800aa44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa5a:	4642      	mov	r2, r8
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	1891      	adds	r1, r2, r2
 800aa60:	6239      	str	r1, [r7, #32]
 800aa62:	415b      	adcs	r3, r3
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
 800aa66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	1854      	adds	r4, r2, r1
 800aa6e:	4649      	mov	r1, r9
 800aa70:	eb43 0501 	adc.w	r5, r3, r1
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	00eb      	lsls	r3, r5, #3
 800aa7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa82:	00e2      	lsls	r2, r4, #3
 800aa84:	4614      	mov	r4, r2
 800aa86:	461d      	mov	r5, r3
 800aa88:	4643      	mov	r3, r8
 800aa8a:	18e3      	adds	r3, r4, r3
 800aa8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa90:	464b      	mov	r3, r9
 800aa92:	eb45 0303 	adc.w	r3, r5, r3
 800aa96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aaa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	f04f 0300 	mov.w	r3, #0
 800aab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aab6:	4629      	mov	r1, r5
 800aab8:	008b      	lsls	r3, r1, #2
 800aaba:	4621      	mov	r1, r4
 800aabc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aac0:	4621      	mov	r1, r4
 800aac2:	008a      	lsls	r2, r1, #2
 800aac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aac8:	f7fd fb90 	bl	80081ec <__aeabi_uldivmod>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4b60      	ldr	r3, [pc, #384]	; (800ac54 <UART_SetConfig+0x4e4>)
 800aad2:	fba3 2302 	umull	r2, r3, r3, r2
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	011c      	lsls	r4, r3, #4
 800aada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aaec:	4642      	mov	r2, r8
 800aaee:	464b      	mov	r3, r9
 800aaf0:	1891      	adds	r1, r2, r2
 800aaf2:	61b9      	str	r1, [r7, #24]
 800aaf4:	415b      	adcs	r3, r3
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aafc:	4641      	mov	r1, r8
 800aafe:	1851      	adds	r1, r2, r1
 800ab00:	6139      	str	r1, [r7, #16]
 800ab02:	4649      	mov	r1, r9
 800ab04:	414b      	adcs	r3, r1
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	f04f 0200 	mov.w	r2, #0
 800ab0c:	f04f 0300 	mov.w	r3, #0
 800ab10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab14:	4659      	mov	r1, fp
 800ab16:	00cb      	lsls	r3, r1, #3
 800ab18:	4651      	mov	r1, sl
 800ab1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab1e:	4651      	mov	r1, sl
 800ab20:	00ca      	lsls	r2, r1, #3
 800ab22:	4610      	mov	r0, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	4642      	mov	r2, r8
 800ab2a:	189b      	adds	r3, r3, r2
 800ab2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab30:	464b      	mov	r3, r9
 800ab32:	460a      	mov	r2, r1
 800ab34:	eb42 0303 	adc.w	r3, r2, r3
 800ab38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab46:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab48:	f04f 0200 	mov.w	r2, #0
 800ab4c:	f04f 0300 	mov.w	r3, #0
 800ab50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab54:	4649      	mov	r1, r9
 800ab56:	008b      	lsls	r3, r1, #2
 800ab58:	4641      	mov	r1, r8
 800ab5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab5e:	4641      	mov	r1, r8
 800ab60:	008a      	lsls	r2, r1, #2
 800ab62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab66:	f7fd fb41 	bl	80081ec <__aeabi_uldivmod>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4b38      	ldr	r3, [pc, #224]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ab72:	fba3 2301 	umull	r2, r3, r3, r1
 800ab76:	095b      	lsrs	r3, r3, #5
 800ab78:	2264      	movs	r2, #100	; 0x64
 800ab7a:	fb02 f303 	mul.w	r3, r2, r3
 800ab7e:	1acb      	subs	r3, r1, r3
 800ab80:	011b      	lsls	r3, r3, #4
 800ab82:	3332      	adds	r3, #50	; 0x32
 800ab84:	4a33      	ldr	r2, [pc, #204]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ab86:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab90:	441c      	add	r4, r3
 800ab92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab96:	2200      	movs	r2, #0
 800ab98:	673b      	str	r3, [r7, #112]	; 0x70
 800ab9a:	677a      	str	r2, [r7, #116]	; 0x74
 800ab9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800aba0:	4642      	mov	r2, r8
 800aba2:	464b      	mov	r3, r9
 800aba4:	1891      	adds	r1, r2, r2
 800aba6:	60b9      	str	r1, [r7, #8]
 800aba8:	415b      	adcs	r3, r3
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abb0:	4641      	mov	r1, r8
 800abb2:	1851      	adds	r1, r2, r1
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	4649      	mov	r1, r9
 800abb8:	414b      	adcs	r3, r1
 800abba:	607b      	str	r3, [r7, #4]
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	f04f 0300 	mov.w	r3, #0
 800abc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abc8:	4659      	mov	r1, fp
 800abca:	00cb      	lsls	r3, r1, #3
 800abcc:	4651      	mov	r1, sl
 800abce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abd2:	4651      	mov	r1, sl
 800abd4:	00ca      	lsls	r2, r1, #3
 800abd6:	4610      	mov	r0, r2
 800abd8:	4619      	mov	r1, r3
 800abda:	4603      	mov	r3, r0
 800abdc:	4642      	mov	r2, r8
 800abde:	189b      	adds	r3, r3, r2
 800abe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abe2:	464b      	mov	r3, r9
 800abe4:	460a      	mov	r2, r1
 800abe6:	eb42 0303 	adc.w	r3, r2, r3
 800abea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	663b      	str	r3, [r7, #96]	; 0x60
 800abf6:	667a      	str	r2, [r7, #100]	; 0x64
 800abf8:	f04f 0200 	mov.w	r2, #0
 800abfc:	f04f 0300 	mov.w	r3, #0
 800ac00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac04:	4649      	mov	r1, r9
 800ac06:	008b      	lsls	r3, r1, #2
 800ac08:	4641      	mov	r1, r8
 800ac0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac0e:	4641      	mov	r1, r8
 800ac10:	008a      	lsls	r2, r1, #2
 800ac12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac16:	f7fd fae9 	bl	80081ec <__aeabi_uldivmod>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ac20:	fba3 1302 	umull	r1, r3, r3, r2
 800ac24:	095b      	lsrs	r3, r3, #5
 800ac26:	2164      	movs	r1, #100	; 0x64
 800ac28:	fb01 f303 	mul.w	r3, r1, r3
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	3332      	adds	r3, #50	; 0x32
 800ac32:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ac34:	fba2 2303 	umull	r2, r3, r2, r3
 800ac38:	095b      	lsrs	r3, r3, #5
 800ac3a:	f003 020f 	and.w	r2, r3, #15
 800ac3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4422      	add	r2, r4
 800ac46:	609a      	str	r2, [r3, #8]
}
 800ac48:	bf00      	nop
 800ac4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac54:	51eb851f 	.word	0x51eb851f

0800ac58 <memset>:
 800ac58:	4402      	add	r2, r0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <memset+0xa>
 800ac60:	4770      	bx	lr
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <memset+0x4>

0800ac68 <__libc_init_array>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	4d0d      	ldr	r5, [pc, #52]	; (800aca0 <__libc_init_array+0x38>)
 800ac6c:	4c0d      	ldr	r4, [pc, #52]	; (800aca4 <__libc_init_array+0x3c>)
 800ac6e:	1b64      	subs	r4, r4, r5
 800ac70:	10a4      	asrs	r4, r4, #2
 800ac72:	2600      	movs	r6, #0
 800ac74:	42a6      	cmp	r6, r4
 800ac76:	d109      	bne.n	800ac8c <__libc_init_array+0x24>
 800ac78:	4d0b      	ldr	r5, [pc, #44]	; (800aca8 <__libc_init_array+0x40>)
 800ac7a:	4c0c      	ldr	r4, [pc, #48]	; (800acac <__libc_init_array+0x44>)
 800ac7c:	f000 f818 	bl	800acb0 <_init>
 800ac80:	1b64      	subs	r4, r4, r5
 800ac82:	10a4      	asrs	r4, r4, #2
 800ac84:	2600      	movs	r6, #0
 800ac86:	42a6      	cmp	r6, r4
 800ac88:	d105      	bne.n	800ac96 <__libc_init_array+0x2e>
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
 800ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac90:	4798      	blx	r3
 800ac92:	3601      	adds	r6, #1
 800ac94:	e7ee      	b.n	800ac74 <__libc_init_array+0xc>
 800ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9a:	4798      	blx	r3
 800ac9c:	3601      	adds	r6, #1
 800ac9e:	e7f2      	b.n	800ac86 <__libc_init_array+0x1e>
 800aca0:	0800ace8 	.word	0x0800ace8
 800aca4:	0800ace8 	.word	0x0800ace8
 800aca8:	0800ace8 	.word	0x0800ace8
 800acac:	0800acec 	.word	0x0800acec

0800acb0 <_init>:
 800acb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb2:	bf00      	nop
 800acb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb6:	bc08      	pop	{r3}
 800acb8:	469e      	mov	lr, r3
 800acba:	4770      	bx	lr

0800acbc <_fini>:
 800acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acbe:	bf00      	nop
 800acc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc2:	bc08      	pop	{r3}
 800acc4:	469e      	mov	lr, r3
 800acc6:	4770      	bx	lr
