
02_BL_Disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .marker_data  00000004  08008000  08008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000745c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000214  0800760c  0800760c  0001760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007820  08007820  00028004  2**0
                  CONTENTS
  5 .ARM          00000008  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007828  08007828  00028004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800782c  0800782c  0001782c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  20000000  08007830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00028004  2**0
                  CONTENTS
 11 .bss          00004334  20000068  20000068  00030068  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000439c  2000439c  00030068  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028004  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00028034  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017c95  00000000  00000000  00028077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000042a8  00000000  00000000  0003fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001658  00000000  00000000  00043fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001131  00000000  00000000  00045610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026cfc  00000000  00000000  00046741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001abf0  00000000  00000000  0006d43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e4d35  00000000  00000000  0008802d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006000  00000000  00000000  0016cd64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  00172d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075f4 	.word	0x080075f4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080075f4 	.word	0x080075f4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <BL_Print_Message>:
	CBL_GO_TO_USER_APP,
 };

/* API Definitions -----------------------------------------------------------*/
void BL_Print_Message(char *format, ...)
{
 800058c:	b40f      	push	{r0, r1, r2, r3}
 800058e:	b580      	push	{r7, lr}
 8000590:	b09a      	sub	sp, #104	; 0x68
 8000592:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2260      	movs	r2, #96	; 0x60
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f006 fba3 	bl	8006cec <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 80005a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005aa:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fb90 	bl	8006cd8 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART_PC, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2264      	movs	r2, #100	; 0x64
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <BL_Print_Message+0x48>)
 80005c2:	f003 fb67 	bl	8003c94 <HAL_UART_Transmit>
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80005c6:	bf00      	nop
 80005c8:	3768      	adds	r7, #104	; 0x68
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	20000404 	.word	0x20000404

080005d8 <BL_UART_Fetch_Host_Command>:

BL_Status BL_UART_Fetch_Host_Command (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	/* Local Definations Scope */
	BL_Status Status = BL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71bb      	strb	r3, [r7, #6]
	uint16_t Data_length = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	80bb      	strh	r3, [r7, #4]

	/* Clear BL_Host_Buffer */
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 80005ea:	22c8      	movs	r2, #200	; 0xc8
 80005ec:	2100      	movs	r1, #0
 80005ee:	484d      	ldr	r0, [pc, #308]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005f0:	f006 fb7c 	bl	8006cec <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	494a      	ldr	r1, [pc, #296]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005fc:	484a      	ldr	r0, [pc, #296]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 80005fe:	f003 fbd4 	bl	8003daa <HAL_UART_Receive>
 8000602:	4603      	mov	r3, r0
 8000604:	71bb      	strb	r3, [r7, #6]


	if (HAL_Status != HAL_OK)
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <BL_UART_Fetch_Host_Command+0x3a>
	{
		Status = BL_NOT_OK;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e083      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}

	else
	{
		Data_length = BL_Host_Buffer[0];
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	80bb      	strh	r3, [r7, #4]

		/* recieve the cmd  */
		HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, &BL_Host_Buffer[1], Data_length, HAL_MAX_DELAY);
 8000618:	88ba      	ldrh	r2, [r7, #4]
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4943      	ldr	r1, [pc, #268]	; (800072c <BL_UART_Fetch_Host_Command+0x154>)
 8000620:	4841      	ldr	r0, [pc, #260]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 8000622:	f003 fbc2 	bl	8003daa <HAL_UART_Receive>
 8000626:	4603      	mov	r3, r0
 8000628:	71bb      	strb	r3, [r7, #6]

	if (HAL_Status != HAL_OK)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <BL_UART_Fetch_Host_Command+0x5e>
	{
		Status = BL_NOT_OK;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e071      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}
	else{
		switch (BL_Host_Buffer[1])
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	3b10      	subs	r3, #16
 800063c:	2b12      	cmp	r3, #18
 800063e:	d868      	bhi.n	8000712 <BL_UART_Fetch_Host_Command+0x13a>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <BL_UART_Fetch_Host_Command+0x70>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000695 	.word	0x08000695
 800064c:	080006a7 	.word	0x080006a7
 8000650:	080006b9 	.word	0x080006b9
 8000654:	08000713 	.word	0x08000713
 8000658:	080006cb 	.word	0x080006cb
 800065c:	080006dd 	.word	0x080006dd
 8000660:	080006ef 	.word	0x080006ef
 8000664:	08000713 	.word	0x08000713
 8000668:	08000713 	.word	0x08000713
 800066c:	08000713 	.word	0x08000713
 8000670:	08000713 	.word	0x08000713
 8000674:	08000713 	.word	0x08000713
 8000678:	08000713 	.word	0x08000713
 800067c:	08000713 	.word	0x08000713
 8000680:	08000713 	.word	0x08000713
 8000684:	08000713 	.word	0x08000713
 8000688:	08000713 	.word	0x08000713
 800068c:	08000713 	.word	0x08000713
 8000690:	08000701 	.word	0x08000701
		{
		case CBL_GET_VER_CMD:
		            BL_Print_Message("Gets the protocol version \r\n");
 8000694:	4826      	ldr	r0, [pc, #152]	; (8000730 <BL_UART_Fetch_Host_Command+0x158>)
 8000696:	f7ff ff79 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Version(BL_Host_Buffer);
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 800069c:	f000 f918 	bl	80008d0 <Bootloader_Get_Version>
		            Status = BL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
		            break;
 80006a4:	e039      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_HELP_CMD:
		            BL_Print_Message("Gets help with Commands ID \r\n");
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <BL_UART_Fetch_Host_Command+0x15c>)
 80006a8:	f7ff ff70 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Help(BL_Host_Buffer);
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006ae:	f000 f941 	bl	8000934 <Bootloader_Get_Help>
		            Status = BL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
		            break;
 80006b6:	e030      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_CID_CMD:
		            BL_Print_Message("Gets the chip ID \r\n");
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <BL_UART_Fetch_Host_Command+0x160>)
 80006ba:	f7ff ff67 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006c0:	f000 f966 	bl	8000990 <Bootloader_Get_Chip_Identification_Number>
		            Status = BL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
		            break;
 80006c8:	e027      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_ADDR_CMD:
					BL_Print_Message("Jumps to specific address located in the flash memory \r\n");
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <BL_UART_Fetch_Host_Command+0x164>)
 80006cc:	f7ff ff5e 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006d2:	f000 fa5b 	bl	8000b8c <Bootloader_Jump_To_Address>
					Status = BL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
					break;
 80006da:	e01e      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_FLASH_ERASE_CMD:
					BL_Print_Message("Erases some pages in flash memory \r\n");
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <BL_UART_Fetch_Host_Command+0x168>)
 80006de:	f7ff ff55 	bl	800058c <BL_Print_Message>
					Bootloader_Erase_Flash(BL_Host_Buffer);
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006e4:	f000 fad9 	bl	8000c9a <Bootloader_Erase_Flash>
					Status = BL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	71fb      	strb	r3, [r7, #7]
					break;
 80006ec:	e015      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_MEM_WRITE_CMD:
					BL_Print_Message("Write bytes in Flash Memory from address specified by the application \r\n");
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <BL_UART_Fetch_Host_Command+0x16c>)
 80006f0:	f7ff ff4c 	bl	800058c <BL_Print_Message>
					Bootloader_Memory_Write(BL_Host_Buffer);
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006f6:	f000 fb64 	bl	8000dc2 <Bootloader_Memory_Write>
					Status = BL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
					break;
 80006fe:	e00c      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_USER_APP:
					BL_Print_Message("Jumps to user application code located in the flash memory \r\n");
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <BL_UART_Fetch_Host_Command+0x170>)
 8000702:	f7ff ff43 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_UserApp(BL_Host_Buffer);
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000708:	f000 f97a 	bl	8000a00 <Bootloader_Jump_To_UserApp>
					Status = BL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
					break;
 8000710:	e003      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>


		default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <BL_UART_Fetch_Host_Command+0x174>)
 8000714:	f7ff ff3a 	bl	800058c <BL_Print_Message>
					break;
 8000718:	bf00      	nop
			}
		}
	}
  return Status;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	20000494 	.word	0x20000494
 800072c:	20000085 	.word	0x20000085
 8000730:	0800760c 	.word	0x0800760c
 8000734:	0800762c 	.word	0x0800762c
 8000738:	0800764c 	.word	0x0800764c
 800073c:	08007660 	.word	0x08007660
 8000740:	0800769c 	.word	0x0800769c
 8000744:	080076c4 	.word	0x080076c4
 8000748:	08007710 	.word	0x08007710
 800074c:	08007750 	.word	0x08007750

08000750 <Bootloader_Send_Data_To_Host>:
  * @param  Data_Len    : Data Length.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_Data_To_Host (uint8_t *Host_Buffer, uint32_t Data_Len)
 {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_DEBUG_UART_HOST, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <Bootloader_Send_Data_To_Host+0x24>)
 8000766:	f003 fa95 	bl	8003c94 <HAL_UART_Transmit>
 }
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000494 	.word	0x20000494

08000778 <Bootloader_Send_ACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_ACK (uint8_t Replay_Len)
 {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Info[2] = {0, 0};
 8000782:	2300      	movs	r3, #0
 8000784:	81bb      	strh	r3, [r7, #12]
	Ack_Info[0] = CBL_SEND_ACK;
 8000786:	23cd      	movs	r3, #205	; 0xcd
 8000788:	733b      	strb	r3, [r7, #12]
	Ack_Info[1] = Replay_Len; /* Length of the following packet (Response) from STM32 to the Host*/
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host(Ack_Info, 2);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffdb 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Bootloader_Send_NACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_NACK	(void)
 {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
	uint8_t Ack_Info = CBL_SEND_NACK;
 80007a8:	23ab      	movs	r3, #171	; 0xab
 80007aa:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&Ack_Info, 1);
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffcd 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Bootloader_CRC_Verify>:
  * @param  Data_Len : Data Length.
  * @param  Host_CRC : CRC Delivered by Host.
  * @retval CRC_Status.
**************************************************************************************/
 static uint8_t Bootloader_CRC_Verify (uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
 {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007dc:	2300      	movs	r3, #0
 80007de:	75fb      	strb	r3, [r7, #23]
 80007e0:	e00f      	b.n	8000802 <Bootloader_CRC_Verify+0x42>
	{
		Data_Buffer = (uint32_t)(pData[Data_Counter]);
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 80007f6:	f001 fa0a 	bl	8001c0e <HAL_CRC_Accumulate>
 80007fa:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	3301      	adds	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	429a      	cmp	r2, r3
 8000808:	d8eb      	bhi.n	80007e2 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
    __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0201 	orr.w	r2, r2, #1
 8000818:	609a      	str	r2, [r3, #8]

	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC)
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d102      	bne.n	8000828 <Bootloader_CRC_Verify+0x68>
	{
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000822:	2301      	movs	r3, #1
 8000824:	77fb      	strb	r3, [r7, #31]
 8000826:	e001      	b.n	800082c <Bootloader_CRC_Verify+0x6c>
	}
	else
	{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 800082c:	7ffb      	ldrb	r3, [r7, #31]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000014c 	.word	0x2000014c

0800083c <Calculate_CRC32>:

/* Custom CRC Verification with different Polynomial (0x08C71CC1) */
static uint8_t Calculate_CRC32 (uint8_t* Buffer, uint32_t Buffer_Length, uint32_t Host_CRC)
{
 800083c:	b480      	push	{r7}
 800083e:	b08b      	sub	sp, #44	; 0x2c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t MCU_CRC_Calculated = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
    uint32_t CRC_Value = 0xFFFFFFFF;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	e01f      	b.n	800089e <Calculate_CRC32+0x62>
	{
      CRC_Value = CRC_Value ^ Buffer[i];
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	4053      	eors	r3, r2
 800086c:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e00e      	b.n	8000892 <Calculate_CRC32+0x56>
	{
      if(CRC_Value & 0x80000000)
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	da05      	bge.n	8000886 <Calculate_CRC32+0x4a>
	  {
            CRC_Value = (CRC_Value << 1) ^ 0x08C71CC1;
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <Calculate_CRC32+0x90>)
 8000880:	4053      	eors	r3, r2
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	e002      	b.n	800088c <Calculate_CRC32+0x50>
      }
	  else
	  {
            CRC_Value = (CRC_Value << 1);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	3301      	adds	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	d9ed      	bls.n	8000874 <Calculate_CRC32+0x38>
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	3301      	adds	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3db      	bcc.n	800085e <Calculate_CRC32+0x22>
      }
      }
  }
	/* Compare the Host CRC and Calculated CRC */
	if(CRC_Value == Host_CRC)
 80008a6:	6a3a      	ldr	r2, [r7, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d103      	bne.n	80008b6 <Calculate_CRC32+0x7a>
	{
		   CRC_Status = CRC_VERIFICATION_PASSED;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008b4:	e002      	b.n	80008bc <Calculate_CRC32+0x80>
	}
	else
	{
		   CRC_Status = CRC_VERIFICATION_FAILED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	       return CRC_Status;
 80008bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	372c      	adds	r7, #44	; 0x2c
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	08c71cc1 	.word	0x08c71cc1

080008d0 <Bootloader_Get_Version>:
  * @brief  Get Bootloader Version.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Version	(uint8_t *Host_Buffer){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	/* Local Definations Scope */
	uint8_t BL_Version [4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <Bootloader_Get_Version+0x60>)
 80008da:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80008fa:	8afb      	ldrh	r3, [r7, #22]
 80008fc:	3b04      	subs	r3, #4
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <Calculate_CRC32>
 8000908:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800090a:	2b01      	cmp	r3, #1
 800090c:	d109      	bne.n	8000922 <Bootloader_Get_Version+0x52>

		Bootloader_Send_ACK(4);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff ff32 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(BL_Version, 4);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff18 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	  Bootloader_Send_NACK();
	}	
}
 8000920:	e001      	b.n	8000926 <Bootloader_Get_Version+0x56>
	  Bootloader_Send_NACK();
 8000922:	f7ff ff3e 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	01000164 	.word	0x01000164

08000934 <Bootloader_Get_Help>:
  * @brief  Get Commands Help.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Help	(uint8_t *Host_Buffer){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	81fb      	strh	r3, [r7, #14]
  uint32_t Host_CRC32 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3301      	adds	r3, #1
 800094c:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	3b04      	subs	r3, #4
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60bb      	str	r3, [r7, #8]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	3b04      	subs	r3, #4
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff6a 	bl	800083c <Calculate_CRC32>
 8000968:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <Bootloader_Get_Help+0x4a>

		Bootloader_Send_ACK(12);
 800096e:	200c      	movs	r0, #12
 8000970:	f7ff ff02 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs, 12);
 8000974:	210c      	movs	r1, #12
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <Bootloader_Get_Help+0x58>)
 8000978:	f7ff feea 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 800097c:	e001      	b.n	8000982 <Bootloader_Get_Help+0x4e>
	Bootloader_Send_NACK();
 800097e:	f7ff ff10 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000

08000990 <Bootloader_Get_Chip_Identification_Number>:
  * @brief  Get Chip Identification Number.
  * @param  *pData   : Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Chip_Identification_Number	(uint8_t *Host_Buffer){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3301      	adds	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	3b04      	subs	r3, #4
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	3b04      	subs	r3, #4
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff3a 	bl	800083c <Calculate_CRC32>
 80009c8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d110      	bne.n	80009f0 <Bootloader_Get_Chip_Identification_Number+0x60>

		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Bootloader_Get_Chip_Identification_Number+0x6c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d8:	b29b      	uxth	r3, r3
 80009da:	81fb      	strh	r3, [r7, #14]
		Bootloader_Send_ACK(2);
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff fecb 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t* )&MCU_Identification_Number, 2);
 80009e2:	f107 030e 	add.w	r3, r7, #14
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff feb1 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 80009ee:	e001      	b.n	80009f4 <Bootloader_Get_Chip_Identification_Number+0x64>
	Bootloader_Send_NACK();
 80009f0:	f7ff fed7 	bl	80007a2 <Bootloader_Send_NACK>
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e0042000 	.word	0xe0042000

08000a00 <Bootloader_Jump_To_UserApp>:
  * @brief  Jump To User Application.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_UserApp (uint8_t *Host_Buffer){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a1a:	8bfb      	ldrh	r3, [r7, #30]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED ==
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000a26:	8bfb      	ldrh	r3, [r7, #30]
 8000a28:	3b04      	subs	r3, #4
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff04 	bl	800083c <Calculate_CRC32>
 8000a34:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED ==
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11b      	bne.n	8000a72 <Bootloader_Jump_To_UserApp+0x72>


		Bootloader_Send_ACK(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fe9c 	bl	8000778 <Bootloader_Send_ACK>

		Bootloader_Send_Data_To_Host((uint8_t*)CRC_VERIFICATION_PASSED, 1);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe84 	bl	8000750 <Bootloader_Send_Data_To_Host>
		/* ------> Jump to user Application <------ */
    // Read the MSP (Main Stack Pointer) value from the user application's vector table

		Bootloader_Jump_To_Application();
 8000a48:	f000 f81e 	bl	8000a88 <Bootloader_Jump_To_Application>
    uint32_t MSP_value   = *((volatile uint32_t* )0x08008000U);
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <Bootloader_Jump_To_UserApp+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	617b      	str	r3, [r7, #20]
	  // Read the reset handler address from the user application's vector table
	  uint32_t MainAppAdd  = *((volatile uint32_t* )(0x08008000U + 4));
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <Bootloader_Jump_To_UserApp+0x84>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
	  // Define a function pointer to the reset handler address
	  pMainApp ResetHandler_Address = (pMainApp)MainAppAdd;
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f383 8808 	msr	MSP, r3
}
 8000a66:	bf00      	nop
	  // Set the MSP to the value obtained from the user application's vector table
	  __set_MSP(MSP_value);
	  // Deinitialize the RCC (Reset and Clock Control) peripheral (Block any External Interrupts)
	  HAL_RCC_DeInit();
 8000a68:	f002 fd2a 	bl	80034c0 <HAL_RCC_DeInit>
	  // Jump to the reset handler address in the user application
	  ResetHandler_Address();
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4798      	blx	r3

	  Bootloader_Send_NACK();
	}


}
 8000a70:	e001      	b.n	8000a76 <Bootloader_Jump_To_UserApp+0x76>
	  Bootloader_Send_NACK();
 8000a72:	f7ff fe96 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08008000 	.word	0x08008000
 8000a84:	08008004 	.word	0x08008004

08000a88 <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application()
  {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
	    void(*App_Reset_Handler)(void);

	  	uint32_t ResetHandlerAddress ;

	  	/*configure MSP of user APP by reading value form base address of sector2*/
	  	uint32_t Local_u32MSPval =*((volatile uint32_t * )(0x08008000));
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <Bootloader_Jump_To_Application+0x28>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]

	  	/*write the user MSP value inside into msp register*/
	  	__asm volatile("msr MSP,%0"::"r"(Local_u32MSPval));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f383 8808 	msr	MSP, r3

	  	/*Get reset Handler Address of user app*/
	  	ResetHandlerAddress = *((volatile uint32_t * ) (0x08008000 + 4)) ;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <Bootloader_Jump_To_Application+0x2c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60bb      	str	r3, [r7, #8]

	  	App_Reset_Handler=(void*)ResetHandlerAddress;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	607b      	str	r3, [r7, #4]

	  	/*jump to the user app handler */
	  	App_Reset_Handler();
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4798      	blx	r3



  }
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08008000 	.word	0x08008000
 8000ab4:	08008004 	.word	0x08008004

08000ab8 <Host_Address_Verification>:
  * @param  Jump_Address.
  * @retval Address_Verification.
**************************************************************************************/

static uint8_t Host_Address_Verification (uint32_t Jump_Address)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aca:	d306      	bcc.n	8000ada <Host_Address_Verification+0x22>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <Host_Address_Verification+0x4c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d802      	bhi.n	8000ada <Host_Address_Verification+0x22>
	{
		  Address_Verification = ADDRESS_IS_VALID;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e00c      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END)){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ae0:	d306      	bcc.n	8000af0 <Host_Address_Verification+0x38>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000ae8:	d802      	bhi.n	8000af0 <Host_Address_Verification+0x38>
		  Address_Verification = ADDRESS_IS_VALID;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e001      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else{
		  Address_Verification = ADDRESS_IS_INVALID;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20040000 	.word	0x20040000

08000b08 <toggleBankAndReset>:
void toggleBankAndReset() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	FLASH_AdvOBProgramInitTypeDef OBInit;
	HAL_FLASH_Unlock();
 8000b0e:	f001 fa45 	bl	8001f9c <HAL_FLASH_Unlock>
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
	HAL_FLASH_OB_Unlock();
 8000b12:	f001 fa75 	bl	8002000 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_AdvOBGetConfig(&OBInit);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fca1 	bl	8002460 <HAL_FLASHEx_AdvOBGetConfig>
	OBInit.OptionType = OPTIONBYTE_BOOTCONFIG;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]

	if (((OBInit.BootConfig) & (OB_DUAL_BOOT_ENABLE)) == OB_DUAL_BOOT_ENABLE) {
 8000b22:	7d3b      	ldrb	r3, [r7, #20]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <toggleBankAndReset+0x2a>
		OBInit.BootConfig = OB_DUAL_BOOT_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	753b      	strb	r3, [r7, #20]
 8000b30:	e001      	b.n	8000b36 <toggleBankAndReset+0x2e>
	} else {
		OBInit.BootConfig = OB_DUAL_BOOT_ENABLE;
 8000b32:	2310      	movs	r3, #16
 8000b34:	753b      	strb	r3, [r7, #20]
	}
	if (HAL_FLASHEx_AdvOBProgram(&OBInit) != HAL_OK) {
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fc53 	bl	80023e4 <HAL_FLASHEx_AdvOBProgram>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d009      	beq.n	8000b58 <toggleBankAndReset+0x50>

		while (1) {
			HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b48:	f000 ff24 	bl	8001994 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <toggleBankAndReset+0x80>)
 8000b52:	f001 fff6 	bl	8002b42 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000b56:	e7f5      	b.n	8000b44 <toggleBankAndReset+0x3c>
		}
	}
	if (HAL_FLASH_OB_Launch() != HAL_OK) {
 8000b58:	f001 fa7e 	bl	8002058 <HAL_FLASH_OB_Launch>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <toggleBankAndReset+0x6c>

		while (1) {
			HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 ff16 	bl	8001994 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <toggleBankAndReset+0x80>)
 8000b6e:	f001 ffe8 	bl	8002b42 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000b72:	e7f6      	b.n	8000b62 <toggleBankAndReset+0x5a>
		}
	}
	HAL_FLASH_OB_Lock();
 8000b74:	f001 fa60 	bl	8002038 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000b78:	f001 fa32 	bl	8001fe0 <HAL_FLASH_Lock>
	HAL_NVIC_SystemReset();
 8000b7c:	f001 f827 	bl	8001bce <HAL_NVIC_SystemReset>

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021800 	.word	0x40021800

08000b8c <Bootloader_Jump_To_Address>:
  * @brief  Jump To Specific Address.
  * @param  *Host_Buffer: Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3301      	adds	r3, #1
 8000bac:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000bae:	8bfb      	ldrh	r3, [r7, #30]
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED == 
		                     Bootloader_CRC_Verify(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000bba:	8bfb      	ldrh	r3, [r7, #30]
 8000bbc:	3b04      	subs	r3, #4
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fdfc 	bl	80007c0 <Bootloader_CRC_Verify>
 8000bc8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d121      	bne.n	8000c12 <Bootloader_Jump_To_Address+0x86>

		Bootloader_Send_ACK(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fdd2 	bl	8000778 <Bootloader_Send_ACK>
		HOST_Jump_Address = *((uint32_t* )&Host_Buffer[2]);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000bda:	617b      	str	r3, [r7, #20]
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);				
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f7ff ff6b 	bl	8000ab8 <Host_Address_Verification>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
    if( ADDRESS_IS_VALID == Address_Verification ){
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10b      	bne.n	8000c04 <Bootloader_Jump_To_Address+0x78>

			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000bec:	f107 030f 	add.w	r3, r7, #15
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdac 	bl	8000750 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump (1 --> state for thumb architecture) */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
			Jump_Address();
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4798      	blx	r3
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 8000c02:	e008      	b.n	8000c16 <Bootloader_Jump_To_Address+0x8a>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000c04:	f107 030f 	add.w	r3, r7, #15
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fda0 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000c10:	e001      	b.n	8000c16 <Bootloader_Jump_To_Address+0x8a>
	Bootloader_Send_NACK();
 8000c12:	f7ff fdc6 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000c16:	bf00      	nop
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <Perform_Flash_Erase>:



#define INVALID_SECTOR            0x12
  uint8_t Perform_Flash_Erase(uint8_t initial_sector_number, uint8_t number_of_sector)
  {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b08a      	sub	sp, #40	; 0x28
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	460a      	mov	r2, r1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71bb      	strb	r3, [r7, #6]
  	//we have totally 12 sectors in one bank .. sector[0 to 11]
  	//number_of_sector has to be in the range of 0 to 11
  	// if sector_number = 0xff , that means mass erase !

  	FLASH_EraseInitTypeDef flashErase_handle;
  	uint32_t sectorError = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  	uint8_t erase_status = 0x01;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  	if (number_of_sector > 23)
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b17      	cmp	r3, #23
 8000c3c:	d901      	bls.n	8000c42 <Perform_Flash_Erase+0x24>
  		return (uint8_t) INVALID_SECTOR;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	e027      	b.n	8000c92 <Perform_Flash_Erase+0x74>

  	if ((initial_sector_number == 0xFFFFFFFF) || (number_of_sector <= 23)) {
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	2b17      	cmp	r3, #23
 8000c46:	d823      	bhi.n	8000c90 <Perform_Flash_Erase+0x72>
  		if (number_of_sector == (uint32_t) 0xFFFFFFFF) {
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
  			flashErase_handle.Banks = FLASH_BANK_1;
  		} else {
  			/*Here we are just calculating how many sectors needs to erased */
  			uint32_t remanining_sector = 24 - number_of_sector;
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	f1c3 0318 	rsb	r3, r3, #24
 8000c4e:	623b      	str	r3, [r7, #32]
  			if (number_of_sector > remanining_sector) {
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	6a3a      	ldr	r2, [r7, #32]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d201      	bcs.n	8000c5c <Perform_Flash_Erase+0x3e>
  				number_of_sector = remanining_sector;
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	71bb      	strb	r3, [r7, #6]
  			}
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  			flashErase_handle.Sector = initial_sector_number; // this is the initial sector
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	617b      	str	r3, [r7, #20]
  			flashErase_handle.NbSectors = number_of_sector;
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	61bb      	str	r3, [r7, #24]
  		}

  		/*Get access to touch the flash registers */
  		HAL_FLASH_Unlock();
 8000c68:	f001 f998 	bl	8001f9c <HAL_FLASH_Unlock>
  		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our MCU will work on this voltage range
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
  		erase_status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle,
 8000c70:	f107 0208 	add.w	r2, r7, #8
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fb40 	bl	8002300 <HAL_FLASHEx_Erase>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  				&sectorError);
  		HAL_FLASH_Lock();
 8000c86:	f001 f9ab 	bl	8001fe0 <HAL_FLASH_Lock>

  		return (uint8_t) erase_status;
 8000c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c8e:	e000      	b.n	8000c92 <Perform_Flash_Erase+0x74>
  	}

  	return (uint8_t) INVALID_SECTOR;
 8000c90:	2312      	movs	r3, #18
  }
 8000c92:	4618      	mov	r0, r3
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Bootloader_Erase_Flash>:





static void Bootloader_Erase_Flash	(uint8_t *Host_Buffer){
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000cb8:	8afb      	ldrh	r3, [r7, #22]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000cc4:	8afb      	ldrh	r3, [r7, #22]
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fdb5 	bl	800083c <Calculate_CRC32>
 8000cd2:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d115      	bne.n	8000d04 <Bootloader_Erase_Flash+0x6a>

		Bootloader_Send_ACK(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fd4d 	bl	8000778 <Bootloader_Send_ACK>
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4610      	mov	r0, r2
 8000cee:	f7ff ff96 	bl	8000c1e <Perform_Flash_Erase>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000cf6:	f107 030f 	add.w	r3, r7, #15
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd27 	bl	8000750 <Bootloader_Send_Data_To_Host>
  }
	else{

	Bootloader_Send_NACK();
	}	
}
 8000d02:	e001      	b.n	8000d08 <Bootloader_Erase_Flash+0x6e>
	Bootloader_Send_NACK();
 8000d04:	f7ff fd4d 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Flash_Memory_Write_Payload>:
  * @param  *Payload_Len           :Data Length.
  * @param  Number_Of_Sectors.
  * @retval Flash_Payload_Write_Status.
**************************************************************************************/

uint8_t Flash_Memory_Write_Payload (uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d22:	2300      	movs	r3, #0
 8000d24:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_Counter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	837b      	strh	r3, [r7, #26]
	uint32_t Address = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000d2e:	f001 f935 	bl	8001f9c <HAL_FLASH_Unlock>
 8000d32:	4603      	mov	r3, r0
 8000d34:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK){
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <Flash_Memory_Write_Payload+0x32>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	77bb      	strb	r3, [r7, #30]
 8000d40:	e025      	b.n	8000d8e <Flash_Memory_Write_Payload+0x7e>
	}
	else{
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	83bb      	strh	r3, [r7, #28]
 8000d46:	e01e      	b.n	8000d86 <Flash_Memory_Write_Payload+0x76>
            /* Use uint16_t pointer to properly handle 16-bit data */
            uint16_t* dataToWrite = (uint16_t*)&Host_Payload[Payload_Counter];
 8000d48:	8bbb      	ldrh	r3, [r7, #28]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d50:	8bba      	ldrh	r2, [r7, #28]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	18d1      	adds	r1, r2, r3
                                           Payload_Start_Address + Payload_Counter,
                                           *dataToWrite);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	881b      	ldrh	r3, [r3, #0]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	461c      	mov	r4, r3
 8000d60:	4615      	mov	r5, r2
 8000d62:	4622      	mov	r2, r4
 8000d64:	462b      	mov	r3, r5
 8000d66:	2001      	movs	r0, #1
 8000d68:	f001 f80e 	bl	8001d88 <HAL_FLASH_Program>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	77fb      	strb	r3, [r7, #31]
            if (HAL_Status != HAL_OK){
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <Flash_Memory_Write_Payload+0x6c>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d76:	2300      	movs	r3, #0
 8000d78:	77bb      	strb	r3, [r7, #30]
                break;
 8000d7a:	e008      	b.n	8000d8e <Flash_Memory_Write_Payload+0x7e>
            }
            else {
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	77bb      	strb	r3, [r7, #30]
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000d80:	8bbb      	ldrh	r3, [r7, #28]
 8000d82:	3302      	adds	r3, #2
 8000d84:	83bb      	strh	r3, [r7, #28]
 8000d86:	8bba      	ldrh	r2, [r7, #28]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3dc      	bcc.n	8000d48 <Flash_Memory_Write_Payload+0x38>
            }
        }
  }
	
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000d8e:	7fbb      	ldrb	r3, [r7, #30]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10f      	bne.n	8000db4 <Flash_Memory_Write_Payload+0xa4>
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <Flash_Memory_Write_Payload+0xa4>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000d9a:	f001 f921 	bl	8001fe0 <HAL_FLASH_Lock>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK){
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <Flash_Memory_Write_Payload+0x9e>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000da8:	2300      	movs	r3, #0
 8000daa:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000dac:	e004      	b.n	8000db8 <Flash_Memory_Write_Payload+0xa8>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000dae:	2301      	movs	r3, #1
 8000db0:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000db2:	e001      	b.n	8000db8 <Flash_Memory_Write_Payload+0xa8>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000db4:	2300      	movs	r3, #0
 8000db6:	77bb      	strb	r3, [r7, #30]
	}
	
	return Flash_Payload_Write_Status;
 8000db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}

08000dc2 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write	(uint8_t *Host_Buffer)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
    uint32_t HOST_Address = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72bb      	strb	r3, [r7, #10]
	uint8_t Payload_Len = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	72fb      	strb	r3, [r7, #11]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000dde:	2300      	movs	r3, #0
 8000de0:	727b      	strb	r3, [r7, #9]
	

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1; //calculate the length
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	3b04      	subs	r3, #4
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32))
 8000df8:	8afb      	ldrh	r3, [r7, #22]
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fd1b 	bl	800083c <Calculate_CRC32>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d139      	bne.n	8000e80 <Bootloader_Memory_Write+0xbe>
	{

		Bootloader_Send_ACK(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fcb3 	bl	8000778 <Bootloader_Send_ACK>
	 /* Extract the payload length from the Host packet */
	    Payload_Len  = Host_Buffer[6];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	799b      	ldrb	r3, [r3, #6]
 8000e16:	72fb      	strb	r3, [r7, #11]
	 /* Extract the start address from the Host packet */
        HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e1e:	60fb      	str	r3, [r7, #12]
     /* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f7ff fe49 	bl	8000ab8 <Host_Address_Verification>
 8000e26:	4603      	mov	r3, r0
 8000e28:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11e      	bne.n	8000e6e <Bootloader_Memory_Write+0xac>
		{
        Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3307      	adds	r3, #7
 8000e34:	7afa      	ldrb	r2, [r7, #11]
 8000e36:	b292      	uxth	r2, r2
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff68 	bl	8000d10 <Flash_Memory_Write_Payload>
 8000e40:	4603      	mov	r3, r0
 8000e42:	727b      	strb	r3, [r7, #9]

        if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 8000e44:	7a7b      	ldrb	r3, [r7, #9]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d10a      	bne.n	8000e60 <Bootloader_Memory_Write+0x9e>
        {
				 /* Report payload write passed */
		Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e4a:	f107 0309 	add.w	r3, r7, #9
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fc7d 	bl	8000750 <Bootloader_Send_Data_To_Host>
				 /* ------> Send Acknowledge <------ */
        Bootloader_Send_Data_To_Host((uint8_t* )CBL_SEND_ACK, 1);
 8000e56:	2101      	movs	r1, #1
 8000e58:	20cd      	movs	r0, #205	; 0xcd
 8000e5a:	f7ff fc79 	bl	8000750 <Bootloader_Send_Data_To_Host>
	else
	{

	Bootloader_Send_NACK();
	}	
}
 8000e5e:	e011      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
			Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e60:	f107 0309 	add.w	r3, r7, #9
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc72 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000e6c:	e00a      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
			Address_Verification = ADDRESS_IS_INVALID;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000e72:	f107 030a 	add.w	r3, r7, #10
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc69 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000e7e:	e001      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
	Bootloader_Send_NACK();
 8000e80:	f7ff fc8f 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <get_Active_Bank_no>:



uint32_t get_Active_Bank_no(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
    // Create a pointer to the register at 0x1FFF C000
    volatile uint32_t* OptionByte = (volatile uint32_t*)0x1FFFC000;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <get_Active_Bank_no+0x24>)
 8000e94:	607b      	str	r3, [r7, #4]

    // Read the value from the register and check if bit 4 is set
    uint32_t BFB2 = (*OptionByte >> 4) & 0x01;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]



    return BFB2;
 8000ea2:	683b      	ldr	r3, [r7, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	1fffc000 	.word	0x1fffc000

08000eb4 <check_ValidityMarker>:
	


void check_ValidityMarker() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
    // Read the validity marker from the specified address
    uint32_t* validityMarkerAddress = (uint32_t*)0x08008000;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <check_ValidityMarker+0x48>)
 8000ebc:	60fb      	str	r3, [r7, #12]
    uint32_t validityMarker = *validityMarkerAddress;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60bb      	str	r3, [r7, #8]
    uint8_t mode= 0  ;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
    // Check if the validity marker is equal to 200
    if (validityMarker ==  0xA0A0)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d108      	bne.n	8000ee4 <check_ValidityMarker+0x30>
    {
    	 mode = 0x01;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
    	 HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  True
 8000ed6:	1df9      	adds	r1, r7, #7
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2201      	movs	r2, #1
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <check_ValidityMarker+0x4c>)
 8000ede:	f002 fed9 	bl	8003c94 <HAL_UART_Transmit>
    {
   	    mode = 0x02;
   	    HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  False
    }

}
 8000ee2:	e007      	b.n	8000ef4 <check_ValidityMarker+0x40>
   	    mode = 0x02;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	71fb      	strb	r3, [r7, #7]
   	    HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  False
 8000ee8:	1df9      	adds	r1, r7, #7
 8000eea:	230a      	movs	r3, #10
 8000eec:	2201      	movs	r2, #1
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <check_ValidityMarker+0x4c>)
 8000ef0:	f002 fed0 	bl	8003c94 <HAL_UART_Transmit>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08008000 	.word	0x08008000
 8000f00:	20000404 	.word	0x20000404

08000f04 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_CRC_Init+0x20>)
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <MX_CRC_Init+0x24>)
 8000f0c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_CRC_Init+0x20>)
 8000f10:	f000 fe61 	bl	8001bd6 <HAL_CRC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f1a:	f000 fa19 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000014c 	.word	0x2000014c
 8000f28:	40023000 	.word	0x40023000

08000f2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_CRC_MspInit+0x3c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10d      	bne.n	8000f5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023000 	.word	0x40023000
 8000f6c:	40023800 	.word	0x40023800

08000f70 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <vApplicationGetIdleTaskMemory+0x30>)
 8000f86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000160 	.word	0x20000160
 8000fa0:	200001b4 	.word	0x200001b4

08000fa4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fa4:	b5b0      	push	{r4, r5, r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex1 */
  osMutexDef(Mutex1);
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 8000fb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 ff89 	bl	8004ece <osMutexCreate>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4a15      	ldr	r2, [pc, #84]	; (8001014 <MX_FREERTOS_Init+0x70>)
 8000fc0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, -1, 0, 128);
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <MX_FREERTOS_Init+0x74>)
 8000fc4:	f107 041c 	add.w	r4, r7, #28
 8000fc8:	461d      	mov	r5, r3
 8000fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f003 ff16 	bl	8004e0e <osThreadCreate>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <MX_FREERTOS_Init+0x78>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_init, osPriorityNormal, 0, 128);
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <MX_FREERTOS_Init+0x7c>)
 8000fea:	463c      	mov	r4, r7
 8000fec:	461d      	mov	r5, r3
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 ff05 	bl	8004e0e <osThreadCreate>
 8001004:	4603      	mov	r3, r0
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <MX_FREERTOS_Init+0x80>)
 8001008:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800100a:	bf00      	nop
 800100c:	3740      	adds	r7, #64	; 0x40
 800100e:	46bd      	mov	sp, r7
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	bf00      	nop
 8001014:	2000015c 	.word	0x2000015c
 8001018:	0800778c 	.word	0x0800778c
 800101c:	20000154 	.word	0x20000154
 8001020:	080077b0 	.word	0x080077b0
 8001024:	20000158 	.word	0x20000158

08001028 <StartDefaultTask>:

volatile uint8_t indecator_Var, dummy;
volatile uint8_t RecVal;
volatile uint8_t FIRMWARE_UPDATE_TRIGGER = 0x7F;
void StartDefaultTask(void const * argument)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
   HAL_UART_Receive_IT(&huart1, &RecVal, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	490b      	ldr	r1, [pc, #44]	; (8001060 <StartDefaultTask+0x38>)
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <StartDefaultTask+0x3c>)
 8001036:	f002 ff4f 	bl	8003ed8 <HAL_UART_Receive_IT>
   HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2201      	movs	r2, #1
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <StartDefaultTask+0x40>)
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <StartDefaultTask+0x44>)
 8001044:	f002 feb1 	bl	8003daa <HAL_UART_Receive>
  	    if (0x7F == indecator_Var)
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <StartDefaultTask+0x40>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b7f      	cmp	r3, #127	; 0x7f
 8001050:	d101      	bne.n	8001056 <StartDefaultTask+0x2e>
  	     BL_UART_Fetch_Host_Command();
 8001052:	f7ff fac1 	bl	80005d8 <BL_UART_Fetch_Host_Command>
 	     osDelay(65);
 8001056:	2041      	movs	r0, #65	; 0x41
 8001058:	f003 ff25 	bl	8004ea6 <osDelay>
   HAL_UART_Receive_IT(&huart1, &RecVal, 1);
 800105c:	e7e8      	b.n	8001030 <StartDefaultTask+0x8>
 800105e:	bf00      	nop
 8001060:	200003b5 	.word	0x200003b5
 8001064:	20000404 	.word	0x20000404
 8001068:	200003b4 	.word	0x200003b4
 800106c:	20000494 	.word	0x20000494

08001070 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
  /* Infinite loop */
  for(;;)
  {
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <Task2_init+0x1c>)
 800107e:	f001 fd60 	bl	8002b42 <HAL_GPIO_TogglePin>
//      HAL_Delay(100);
      osDelay(500);
 8001082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001086:	f003 ff0e 	bl	8004ea6 <osDelay>
      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800108a:	e7f5      	b.n	8001078 <Task2_init+0x8>
 800108c:	40021800 	.word	0x40021800

08001090 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Task3_init */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
//    UNUSED(huart);



    	HAL_UART_Receive_IT(&huart1, &RecVal, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	491d      	ldr	r1, [pc, #116]	; (8001110 <HAL_UART_RxCpltCallback+0x80>)
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <HAL_UART_RxCpltCallback+0x84>)
 800109e:	f002 ff1b 	bl	8003ed8 <HAL_UART_Receive_IT>
    			    if (FIRMWARE_UPDATE_TRIGGER == RecVal)
 80010a2:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_UART_RxCpltCallback+0x88>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b19      	ldr	r3, [pc, #100]	; (8001110 <HAL_UART_RxCpltCallback+0x80>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d10b      	bne.n	80010ca <HAL_UART_RxCpltCallback+0x3a>
    			    {
    						  /* Send Acknowledge */
    						  uint8_t ackValue = 0xCD;
 80010b2:	23cd      	movs	r3, #205	; 0xcd
 80010b4:	73fb      	strb	r3, [r7, #15]
    						  HAL_UART_Transmit(&huart1, &ackValue, 1, HAL_MAX_DELAY);
 80010b6:	f107 010f 	add.w	r1, r7, #15
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	2201      	movs	r2, #1
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <HAL_UART_RxCpltCallback+0x84>)
 80010c2:	f002 fde7 	bl	8003c94 <HAL_UART_Transmit>
    						  /* System reset (Jump to Bootloader) */
    						  HAL_NVIC_SystemReset();
 80010c6:	f000 fd82 	bl	8001bce <HAL_NVIC_SystemReset>
    				 }

    			    if (RecVal == 0x66)
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_UART_RxCpltCallback+0x80>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b66      	cmp	r3, #102	; 0x66
 80010d2:	d10b      	bne.n	80010ec <HAL_UART_RxCpltCallback+0x5c>
    			    { // Example command byte from ESP
    			   	            // get active bank here..
    			   	            uint8_t mode = get_Active_Bank_no();
 80010d4:	f7ff feda 	bl	8000e8c <get_Active_Bank_no>
 80010d8:	4603      	mov	r3, r0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	73bb      	strb	r3, [r7, #14]
    			   	            HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  active bank
 80010de:	f107 010e 	add.w	r1, r7, #14
 80010e2:	230a      	movs	r3, #10
 80010e4:	2201      	movs	r2, #1
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_UART_RxCpltCallback+0x84>)
 80010e8:	f002 fdd4 	bl	8003c94 <HAL_UART_Transmit>
    			   	 }

    			    if (RecVal == 0x8C)
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_UART_RxCpltCallback+0x80>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b8c      	cmp	r3, #140	; 0x8c
 80010f4:	d101      	bne.n	80010fa <HAL_UART_RxCpltCallback+0x6a>
    			     {
    			    	toggleBankAndReset();
 80010f6:	f7ff fd07 	bl	8000b08 <toggleBankAndReset>
    			     }

    			    if (RecVal == 0x4C)
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_UART_RxCpltCallback+0x80>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b4c      	cmp	r3, #76	; 0x4c
 8001102:	d101      	bne.n	8001108 <HAL_UART_RxCpltCallback+0x78>
    			     {
    			    	/*  check validity marker  */
    			    	check_ValidityMarker();
 8001104:	f7ff fed6 	bl	8000eb4 <check_ValidityMarker>
    			     }


}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200003b5 	.word	0x200003b5
 8001114:	20000404 	.word	0x20000404
 8001118:	20000007 	.word	0x20000007

0800111c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	4b3f      	ldr	r3, [pc, #252]	; (8001234 <MX_GPIO_Init+0x118>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a3e      	ldr	r2, [pc, #248]	; (8001234 <MX_GPIO_Init+0x118>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b3c      	ldr	r3, [pc, #240]	; (8001234 <MX_GPIO_Init+0x118>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_GPIO_Init+0x118>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <MX_GPIO_Init+0x118>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_GPIO_Init+0x118>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_GPIO_Init+0x118>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <MX_GPIO_Init+0x118>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_GPIO_Init+0x118>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_GPIO_Init+0x118>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a29      	ldr	r2, [pc, #164]	; (8001234 <MX_GPIO_Init+0x118>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_GPIO_Init+0x118>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_GPIO_Init+0x118>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a22      	ldr	r2, [pc, #136]	; (8001234 <MX_GPIO_Init+0x118>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_GPIO_Init+0x118>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_GPIO_Init+0x118>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <MX_GPIO_Init+0x118>)
 80011c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_GPIO_Init+0x118>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	4816      	ldr	r0, [pc, #88]	; (8001238 <MX_GPIO_Init+0x11c>)
 80011e0:	f001 fc96 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011ea:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0x120>)
 80011ec:	f001 fc90 	bl	8002b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011f0:	2320      	movs	r3, #32
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_GPIO_Init+0x11c>)
 8001208:	f001 fad6 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800120c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_GPIO_Init+0x120>)
 8001226:	f001 fac7 	bl	80027b8 <HAL_GPIO_Init>

}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	; 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	40021800 	.word	0x40021800

08001240 <main>:




int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001244:	f000 fb64 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001248:	f000 f810 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124c:	f7ff ff66 	bl	800111c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001250:	f000 fa12 	bl	8001678 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001254:	f000 f9e6 	bl	8001624 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001258:	f7ff fe54 	bl	8000f04 <MX_CRC_Init>
  MX_USART3_UART_Init();
 800125c:	f000 fa36 	bl	80016cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
;
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001260:	f7ff fea0 	bl	8000fa4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001264:	f003 fdcc 	bl	8004e00 <osKernelStart>
//  HAL_UART_Receive_IT(&huart1, &RecVal, 1);

//  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 // toggleBankAndReset() ;

  while (1)
 8001268:	e7fe      	b.n	8001268 <main+0x28>
	...

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	; 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	; 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f005 fd36 	bl	8006cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <SystemClock_Config+0xb8>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <SystemClock_Config+0xb8>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	; 0x40
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <SystemClock_Config+0xb8>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <SystemClock_Config+0xbc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <SystemClock_Config+0xbc>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <SystemClock_Config+0xbc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fc63 	bl	8002bac <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012ec:	f000 f830 	bl	8001350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fec6 	bl	800309c <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001316:	f000 f81b 	bl	8001350 <Error_Handler>
  }
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a04      	ldr	r2, [pc, #16]	; (800134c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800133e:	f000 fb09 	bl	8001954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40010000 	.word	0x40010000

08001350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001354:	b672      	cpsid	i
}
 8001356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001358:	e7fe      	b.n	8001358 <Error_Handler+0x8>
	...

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_MspInit+0x94>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <HAL_MspInit+0x94>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_MspInit+0x94>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <HAL_MspInit+0x94>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a1a      	ldr	r2, [pc, #104]	; (80013f0 <HAL_MspInit+0x94>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_MspInit+0x94>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	210f      	movs	r1, #15
 800139e:	f06f 0001 	mvn.w	r0, #1
 80013a2:	f000 fbea 	bl	8001b7a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2105      	movs	r1, #5
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 fbe5 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fbfe 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2105      	movs	r1, #5
 80013ba:	2004      	movs	r0, #4
 80013bc:	f000 fbdd 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80013c0:	2004      	movs	r0, #4
 80013c2:	f000 fbf6 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	2005      	movs	r0, #5
 80013cc:	f000 fbd5 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013d0:	2005      	movs	r0, #5
 80013d2:	f000 fbee 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	2051      	movs	r0, #81	; 0x51
 80013dc:	f000 fbcd 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013e0:	2051      	movs	r0, #81	; 0x51
 80013e2:	f000 fbe6 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_InitTick+0xd0>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_InitTick+0xd0>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6453      	str	r3, [r2, #68]	; 0x44
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_InitTick+0xd0>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	f107 0310 	add.w	r3, r7, #16
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f002 f816 	bl	800345c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001430:	f002 f800 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8001434:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001438:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_InitTick+0xd4>)
 800143a:	fba2 2303 	umull	r2, r3, r2, r3
 800143e:	0c9b      	lsrs	r3, r3, #18
 8001440:	3b01      	subs	r3, #1
 8001442:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_InitTick+0xd8>)
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_InitTick+0xdc>)
 8001448:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_InitTick+0xd8>)
 800144c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001450:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001452:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_InitTick+0xd8>)
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_InitTick+0xd8>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_InitTick+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_InitTick+0xd8>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800146a:	4818      	ldr	r0, [pc, #96]	; (80014cc <HAL_InitTick+0xd8>)
 800146c:	f002 f920 	bl	80036b0 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147a:	2b00      	cmp	r3, #0
 800147c:	d11b      	bne.n	80014b6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800147e:	4813      	ldr	r0, [pc, #76]	; (80014cc <HAL_InitTick+0xd8>)
 8001480:	f002 f970 	bl	8003764 <HAL_TIM_Base_Start_IT>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800148a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148e:	2b00      	cmp	r3, #0
 8001490:	d111      	bne.n	80014b6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001492:	2019      	movs	r0, #25
 8001494:	f000 fb8d 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	d808      	bhi.n	80014b0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800149e:	2200      	movs	r2, #0
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	2019      	movs	r0, #25
 80014a4:	f000 fb69 	bl	8001b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_InitTick+0xe0>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e002      	b.n	80014b6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3730      	adds	r7, #48	; 0x30
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800
 80014c8:	431bde83 	.word	0x431bde83
 80014cc:	200003b8 	.word	0x200003b8
 80014d0:	40010000 	.word	0x40010000
 80014d4:	2000000c 	.word	0x2000000c

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001508:	f001 fb36 	bl	8002b78 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001514:	f000 fc8c 	bl	8001e30 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001532:	f002 f987 	bl	8003844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200003b8 	.word	0x200003b8

08001540 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <USART1_IRQHandler+0x10>)
 8001546:	f002 fced 	bl	8003f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000404 	.word	0x20000404

08001554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART2_IRQHandler+0x10>)
 800155a:	f002 fce3 	bl	8003f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000044c 	.word	0x2000044c

08001568 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <USART3_IRQHandler+0x10>)
 800156e:	f002 fcd9 	bl	8003f24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000494 	.word	0x20000494

0800157c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f005 fb9e 	bl	8006cfc <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20030000 	.word	0x20030000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000400 	.word	0x20000400
 80015f4:	200043a0 	.word	0x200043a0

080015f8 <SystemInit>:
  * @param  None
  * @retval None
  */
#define USER_VECT_TAB_ADDRESS
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <SystemInit+0x28>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a07      	ldr	r2, [pc, #28]	; (8001620 <SystemInit+0x28>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = 0x08000000;
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SystemInit+0x28>)
 800160e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001612:	609a      	str	r2, [r3, #8]
		  /*VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART1_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART1_UART_Init+0x4c>)
 800165c:	f002 faca 	bl	8003bf4 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f7ff fe73 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000404 	.word	0x20000404
 8001674:	40011000 	.word	0x40011000

08001678 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART2_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f002 faa0 	bl	8003bf4 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f7ff fe49 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000044c 	.word	0x2000044c
 80016c8:	40004400 	.word	0x40004400

080016cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <MX_USART3_UART_Init+0x50>)
 80016d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016f2:	220c      	movs	r2, #12
 80016f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART3_UART_Init+0x4c>)
 8001704:	f002 fa76 	bl	8003bf4 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800170e:	f7ff fe1f 	bl	8001350 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000494 	.word	0x20000494
 800171c:	40004800 	.word	0x40004800

08001720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	; 0x38
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_UART_MspInit+0x180>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d135      	bne.n	80017ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <HAL_UART_MspInit+0x184>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b54      	ldr	r3, [pc, #336]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	623b      	str	r3, [r7, #32]
 800175c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a4f      	ldr	r2, [pc, #316]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b4d      	ldr	r3, [pc, #308]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800177a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178c:	2307      	movs	r3, #7
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001794:	4619      	mov	r1, r3
 8001796:	4844      	ldr	r0, [pc, #272]	; (80018a8 <HAL_UART_MspInit+0x188>)
 8001798:	f001 f80e 	bl	80027b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2105      	movs	r1, #5
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 f9ea 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f000 fa03 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017ac:	e073      	b.n	8001896 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a3e      	ldr	r2, [pc, #248]	; (80018ac <HAL_UART_MspInit+0x18c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d134      	bne.n	8001822 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	61bb      	str	r3, [r7, #24]
 80017d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a31      	ldr	r2, [pc, #196]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_UART_MspInit+0x184>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017f0:	2360      	movs	r3, #96	; 0x60
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4829      	ldr	r0, [pc, #164]	; (80018b0 <HAL_UART_MspInit+0x190>)
 800180c:	f000 ffd4 	bl	80027b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2105      	movs	r1, #5
 8001814:	2026      	movs	r0, #38	; 0x26
 8001816:	f000 f9b0 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800181a:	2026      	movs	r0, #38	; 0x26
 800181c:	f000 f9c9 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
}
 8001820:	e039      	b.n	8001896 <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_UART_MspInit+0x194>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d134      	bne.n	8001896 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a1b      	ldr	r2, [pc, #108]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_UART_MspInit+0x184>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_UART_MspInit+0x184>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a14      	ldr	r2, [pc, #80]	; (80018a4 <HAL_UART_MspInit+0x184>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_UART_MspInit+0x184>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001864:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001876:	2307      	movs	r3, #7
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <HAL_UART_MspInit+0x198>)
 8001882:	f000 ff99 	bl	80027b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2105      	movs	r1, #5
 800188a:	2027      	movs	r0, #39	; 0x27
 800188c:	f000 f975 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001890:	2027      	movs	r0, #39	; 0x27
 8001892:	f000 f98e 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
}
 8001896:	bf00      	nop
 8001898:	3738      	adds	r7, #56	; 0x38
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40004800 	.word	0x40004800
 80018b8:	40020400 	.word	0x40020400

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c0:	f7ff fe9a 	bl	80015f8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ea:	f005 fa0d 	bl	8006d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fca7 	bl	8001240 <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001900:	08007830 	.word	0x08007830
  ldr r2, =_sbss
 8001904:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001908:	2000439c 	.word	0x2000439c

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f913 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f7ff fd58 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fd0a 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000010 	.word	0x20000010
 8001978:	200004dc 	.word	0x200004dc

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200004dc 	.word	0x200004dc

08001994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d005      	beq.n	80019ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_Delay+0x44>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4413      	add	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ba:	bf00      	nop
 80019bc:	f7ff ffde 	bl	800197c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d8f7      	bhi.n	80019bc <HAL_Delay+0x28>
  {
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000010 	.word	0x20000010

080019dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f8:	4013      	ands	r3, r2
 80019fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <__NVIC_SetPriorityGrouping+0x44>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	60d3      	str	r3, [r2, #12]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <__NVIC_GetPriorityGrouping+0x18>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	f003 0307 	and.w	r3, r3, #7
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	db0b      	blt.n	8001a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	f003 021f 	and.w	r2, r3, #31
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <__NVIC_EnableIRQ+0x38>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	2001      	movs	r0, #1
 8001a62:	fa00 f202 	lsl.w	r2, r0, r2
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000e100 	.word	0xe000e100

08001a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	db0a      	blt.n	8001aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	490c      	ldr	r1, [pc, #48]	; (8001ac8 <__NVIC_SetPriority+0x4c>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	0112      	lsls	r2, r2, #4
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa4:	e00a      	b.n	8001abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4908      	ldr	r1, [pc, #32]	; (8001acc <__NVIC_SetPriority+0x50>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	0112      	lsls	r2, r2, #4
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	440b      	add	r3, r1
 8001aba:	761a      	strb	r2, [r3, #24]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f1c3 0307 	rsb	r3, r3, #7
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	bf28      	it	cs
 8001aee:	2304      	movcs	r3, #4
 8001af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	2b06      	cmp	r3, #6
 8001af8:	d902      	bls.n	8001b00 <NVIC_EncodePriority+0x30>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3b03      	subs	r3, #3
 8001afe:	e000      	b.n	8001b02 <NVIC_EncodePriority+0x32>
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	f04f 32ff 	mov.w	r2, #4294967295
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	401a      	ands	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b22:	43d9      	mvns	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	4313      	orrs	r3, r2
         );
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3724      	adds	r7, #36	; 0x24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3c:	f3bf 8f4f 	dsb	sy
}
 8001b40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <__NVIC_SystemReset+0x24>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b4a:	4904      	ldr	r1, [pc, #16]	; (8001b5c <__NVIC_SystemReset+0x24>)
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_SystemReset+0x28>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b52:	f3bf 8f4f 	dsb	sy
}
 8001b56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <__NVIC_SystemReset+0x20>
 8001b5c:	e000ed00 	.word	0xe000ed00
 8001b60:	05fa0004 	.word	0x05fa0004

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff35 	bl	80019dc <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff4a 	bl	8001a24 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff9a 	bl	8001ad0 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff69 	bl	8001a7c <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff3d 	bl	8001a40 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001bd2:	f7ff ffb1 	bl	8001b38 <__NVIC_SystemReset>

08001bd6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e00e      	b.n	8001c06 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d105      	bne.n	8001bfe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff f997 	bl	8000f2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b087      	sub	sp, #28
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2202      	movs	r2, #2
 8001c22:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	441a      	add	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3f0      	bcc.n	8001c2a <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001c56:	693b      	ldr	r3, [r7, #16]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	371c      	adds	r7, #28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c72:	f7ff fe83 	bl	800197c <HAL_GetTick>
 8001c76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d008      	beq.n	8001c96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2280      	movs	r2, #128	; 0x80
 8001c88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e052      	b.n	8001d3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0216 	bic.w	r2, r2, #22
 8001ca4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d103      	bne.n	8001cc6 <HAL_DMA_Abort+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0208 	bic.w	r2, r2, #8
 8001cd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce6:	e013      	b.n	8001d10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce8:	f7ff fe48 	bl	800197c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b05      	cmp	r3, #5
 8001cf4:	d90c      	bls.n	8001d10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e015      	b.n	8001d3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1e4      	bne.n	8001ce8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	223f      	movs	r2, #63	; 0x3f
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d004      	beq.n	8001d62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e00c      	b.n	8001d7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2205      	movs	r2, #5
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <HAL_FLASH_Program+0xa0>)
 8001d9c:	7e1b      	ldrb	r3, [r3, #24]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_FLASH_Program+0x1e>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e03b      	b.n	8001e1e <HAL_FLASH_Program+0x96>
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_FLASH_Program+0xa0>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db0:	f000 f966 	bl	8002080 <FLASH_WaitForLastOperation>
 8001db4:	4603      	mov	r3, r0
 8001db6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d12b      	bne.n	8001e16 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001dc4:	783b      	ldrb	r3, [r7, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	68b8      	ldr	r0, [r7, #8]
 8001dca:	f000 fa11 	bl	80021f0 <FLASH_Program_Byte>
 8001dce:	e016      	b.n	8001dfe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001dd6:	883b      	ldrh	r3, [r7, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68b8      	ldr	r0, [r7, #8]
 8001ddc:	f000 f9e4 	bl	80021a8 <FLASH_Program_HalfWord>
 8001de0:	e00d      	b.n	8001dfe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d105      	bne.n	8001df4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4619      	mov	r1, r3
 8001dec:	68b8      	ldr	r0, [r7, #8]
 8001dee:	f000 f9b9 	bl	8002164 <FLASH_Program_Word>
 8001df2:	e004      	b.n	8001dfe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f000 f981 	bl	8002100 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e02:	f000 f93d 	bl	8002080 <FLASH_WaitForLastOperation>
 8001e06:	4603      	mov	r3, r0
 8001e08:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_FLASH_Program+0xa4>)
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_FLASH_Program+0xa4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_FLASH_Program+0xa0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200004e0 	.word	0x200004e0
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d020      	beq.n	8001e88 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	e00b      	b.n	8001e78 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001e60:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d103      	bne.n	8001e72 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e002      	b.n	8001e78 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001e72:	4b3f      	ldr	r3, [pc, #252]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001e78:	f000 f9dc 	bl	8002234 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f883 	bl	8001f88 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e88:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d04a      	beq.n	8001f2a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e94:	4b35      	ldr	r3, [pc, #212]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d12d      	bne.n	8001f00 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	4a31      	ldr	r2, [pc, #196]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001eac:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f859 	bl	8001f74 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	4a29      	ldr	r2, [pc, #164]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001eca:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001ed4:	7a1b      	ldrb	r3, [r3, #8]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fb1a 	bl	8002514 <FLASH_Erase_Sector>
 8001ee0:	e023      	b.n	8001f2a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001ef4:	f000 fc1a 	bl	800272c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f83b 	bl	8001f74 <HAL_FLASH_EndOfOperationCallback>
 8001efe:	e014      	b.n	8001f2a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d107      	bne.n	8001f1a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001f0a:	f000 fc0f 	bl	800272c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f82e 	bl	8001f74 <HAL_FLASH_EndOfOperationCallback>
 8001f18:	e004      	b.n	8001f24 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f828 	bl	8001f74 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d116      	bne.n	8001f62 <HAL_FLASH_IRQHandler+0x132>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f42:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <HAL_FLASH_IRQHandler+0x13c>)
 8001f56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_FLASH_IRQHandler+0x140>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	761a      	strb	r2, [r3, #24]
  }
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00
 8001f70:	200004e0 	.word	0x200004e0

08001f74 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	da0b      	bge.n	8001fc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fae:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fb0:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_FLASH_Unlock+0x3c>)
 8001fb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_FLASH_Unlock+0x38>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	da01      	bge.n	8001fc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40023c00 	.word	0x40023c00
 8001fd8:	45670123 	.word	0x45670123
 8001fdc:	cdef89ab 	.word	0xcdef89ab

08001fe0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_FLASH_Lock+0x1c>)
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_FLASH_Lock+0x1c>)
 8001fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_FLASH_OB_Unlock+0x2c>)
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_FLASH_OB_Unlock+0x2c>)
 8002012:	4a07      	ldr	r2, [pc, #28]	; (8002030 <HAL_FLASH_OB_Unlock+0x30>)
 8002014:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8002016:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_FLASH_OB_Unlock+0x2c>)
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_FLASH_OB_Unlock+0x34>)
 800201a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40023c00 	.word	0x40023c00
 8002030:	08192a3b 	.word	0x08192a3b
 8002034:	4c5d6e7f 	.word	0x4c5d6e7f

08002038 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_FLASH_OB_Lock+0x1c>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	4a04      	ldr	r2, [pc, #16]	; (8002054 <HAL_FLASH_OB_Lock+0x1c>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40023c00 	.word	0x40023c00

08002058 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_FLASH_OB_Launch+0x24>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4a06      	ldr	r2, [pc, #24]	; (800207c <HAL_FLASH_OB_Launch+0x24>)
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	b2db      	uxtb	r3, r3
 800206a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800206c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002070:	f000 f806 	bl	8002080 <FLASH_WaitForLastOperation>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c14 	.word	0x40023c14

08002080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <FLASH_WaitForLastOperation+0x78>)
 800208e:	2200      	movs	r2, #0
 8002090:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002092:	f7ff fc73 	bl	800197c <HAL_GetTick>
 8002096:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002098:	e010      	b.n	80020bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d00c      	beq.n	80020bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <FLASH_WaitForLastOperation+0x38>
 80020a8:	f7ff fc68 	bl	800197c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d201      	bcs.n	80020bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e019      	b.n	80020f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <FLASH_WaitForLastOperation+0x7c>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <FLASH_WaitForLastOperation+0x7c>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <FLASH_WaitForLastOperation+0x7c>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <FLASH_WaitForLastOperation+0x7c>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80020e6:	f000 f8a5 	bl	8002234 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
  
}  
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200004e0 	.word	0x200004e0
 80020fc:	40023c00 	.word	0x40023c00

08002100 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 8002112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002116:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	4a10      	ldr	r2, [pc, #64]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 800211e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002122:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <FLASH_Program_DoubleWord+0x60>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002136:	f3bf 8f6f 	isb	sy
}
 800213a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800213c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	000a      	movs	r2, r1
 800214a:	2300      	movs	r3, #0
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	3104      	adds	r1, #4
 8002150:	4613      	mov	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40023c00 	.word	0x40023c00

08002164 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <FLASH_Program_Word+0x40>)
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	4a0c      	ldr	r2, [pc, #48]	; (80021a4 <FLASH_Program_Word+0x40>)
 8002174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002178:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <FLASH_Program_Word+0x40>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <FLASH_Program_Word+0x40>)
 8002180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002184:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <FLASH_Program_Word+0x40>)
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <FLASH_Program_Word+0x40>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40023c00 	.word	0x40023c00

080021a8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021b4:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4a09      	ldr	r2, [pc, #36]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	4a06      	ldr	r2, [pc, #24]	; (80021ec <FLASH_Program_HalfWord+0x44>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	801a      	strh	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00

080021f0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <FLASH_Program_Byte+0x40>)
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	4a0b      	ldr	r2, [pc, #44]	; (8002230 <FLASH_Program_Byte+0x40>)
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002206:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <FLASH_Program_Byte+0x40>)
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <FLASH_Program_Byte+0x40>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <FLASH_Program_Byte+0x40>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <FLASH_Program_Byte+0x40>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	701a      	strb	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f043 0310 	orr.w	r3, r3, #16
 800224c:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 800224e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 8002252:	2210      	movs	r2, #16
 8002254:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002262:	4b26      	ldr	r3, [pc, #152]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	4a24      	ldr	r2, [pc, #144]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 800226c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 8002270:	2220      	movs	r2, #32
 8002272:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 800228a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	4a15      	ldr	r2, [pc, #84]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 80022ac:	2280      	movs	r2, #128	; 0x80
 80022ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d009      	beq.n	80022d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 80022ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f043 0320 	orr.w	r3, r3, #32
 80022e4:	4a05      	ldr	r2, [pc, #20]	; (80022fc <FLASH_SetErrorCode+0xc8>)
 80022e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <FLASH_SetErrorCode+0xc4>)
 80022ea:	2202      	movs	r2, #2
 80022ec:	60da      	str	r2, [r3, #12]
  }
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40023c00 	.word	0x40023c00
 80022fc:	200004e0 	.word	0x200004e0

08002300 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HAL_FLASHEx_Erase+0xdc>)
 8002314:	7e1b      	ldrb	r3, [r3, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_FLASHEx_Erase+0x1e>
 800231a:	2302      	movs	r3, #2
 800231c:	e05a      	b.n	80023d4 <HAL_FLASHEx_Erase+0xd4>
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HAL_FLASHEx_Erase+0xdc>)
 8002320:	2201      	movs	r2, #1
 8002322:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002328:	f7ff feaa 	bl	8002080 <FLASH_WaitForLastOperation>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d14a      	bne.n	80023cc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d117      	bne.n	8002376 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f000 f8a4 	bl	80024a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002358:	f24c 3050 	movw	r0, #50000	; 0xc350
 800235c:	f7ff fe90 	bl	8002080 <FLASH_WaitForLastOperation>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_FLASHEx_Erase+0xe0>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_FLASHEx_Erase+0xe0>)
 800236a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800236e:	f023 0304 	bic.w	r3, r3, #4
 8002372:	6113      	str	r3, [r2, #16]
 8002374:	e028      	b.n	80023c8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	e01c      	b.n	80023b8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	4619      	mov	r1, r3
 8002386:	68b8      	ldr	r0, [r7, #8]
 8002388:	f000 f8c4 	bl	8002514 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800238c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002390:	f7ff fe76 	bl	8002080 <FLASH_WaitForLastOperation>
 8002394:	4603      	mov	r3, r0
 8002396:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_FLASHEx_Erase+0xe0>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_FLASHEx_Erase+0xe0>)
 800239e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80023a2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	601a      	str	r2, [r3, #0]
          break;
 80023b0:	e00a      	b.n	80023c8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4413      	add	r3, r2
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d3da      	bcc.n	800237e <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80023c8:	f000 f9b0 	bl	800272c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_FLASHEx_Erase+0xdc>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	761a      	strb	r2, [r3, #24]

  return status;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200004e0 	.word	0x200004e0
 80023e0:	40023c00 	.word	0x40023c00

080023e4 <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01e      	beq.n	800243a <HAL_FLASHEx_AdvOBProgram+0x56>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10d      	bne.n	8002420 <HAL_FLASHEx_AdvOBProgram+0x3c>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	899b      	ldrh	r3, [r3, #12]
 8002408:	4618      	mov	r0, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	89db      	ldrh	r3, [r3, #14]
 800240e:	4619      	mov	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	461a      	mov	r2, r3
 8002416:	f000 f8f3 	bl	8002600 <FLASH_OB_EnablePCROP>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
 800241e:	e00c      	b.n	800243a <HAL_FLASHEx_AdvOBProgram+0x56>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
#else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	899b      	ldrh	r3, [r3, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	89db      	ldrh	r3, [r3, #14]
 800242a:	4619      	mov	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	461a      	mov	r2, r3
 8002432:	f000 f92d 	bl	8002690 <FLASH_OB_DisablePCROP>
 8002436:	4603      	mov	r3, r0
 8002438:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  /*Program BOOT config option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_FLASHEx_AdvOBProgram+0x70>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7c1b      	ldrb	r3, [r3, #16]
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f8b0 	bl	80025b0 <FLASH_OB_BootConfig>
 8002450:	4603      	mov	r3, r0
 8002452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
  /*Get Sector for Bank1*/
  pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002468:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_FLASHEx_AdvOBGetConfig+0x34>)
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	819a      	strh	r2, [r3, #12]

  /*Get Sector for Bank2*/
  pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_FLASHEx_AdvOBGetConfig+0x38>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	81da      	strh	r2, [r3, #14]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_FLASHEx_AdvOBGetConfig+0x3c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	741a      	strb	r2, [r3, #16]
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023c16 	.word	0x40023c16
 8002498:	40023c1a 	.word	0x40023c1a
 800249c:	40023c14 	.word	0x40023c14

080024a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024ac:	4b18      	ldr	r3, [pc, #96]	; (8002510 <FLASH_MassErase+0x70>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4a17      	ldr	r2, [pc, #92]	; (8002510 <FLASH_MassErase+0x70>)
 80024b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d108      	bne.n	80024d0 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <FLASH_MassErase+0x70>)
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	4a13      	ldr	r2, [pc, #76]	; (8002510 <FLASH_MassErase+0x70>)
 80024c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6113      	str	r3, [r2, #16]
 80024ce:	e00f      	b.n	80024f0 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d106      	bne.n	80024e4 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <FLASH_MassErase+0x70>)
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	4a0d      	ldr	r2, [pc, #52]	; (8002510 <FLASH_MassErase+0x70>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6113      	str	r3, [r2, #16]
 80024e2:	e005      	b.n	80024f0 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <FLASH_MassErase+0x70>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	4a09      	ldr	r2, [pc, #36]	; (8002510 <FLASH_MassErase+0x70>)
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <FLASH_MassErase+0x70>)
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	4313      	orrs	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <FLASH_MassErase+0x70>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6113      	str	r3, [r2, #16]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e010      	b.n	8002552 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d103      	bne.n	800253e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e009      	b.n	8002552 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d103      	bne.n	800254c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e002      	b.n	8002552 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800254c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002550:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0b      	cmp	r3, #11
 8002556:	d902      	bls.n	800255e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <FLASH_Erase_Sector+0x98>)
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	490f      	ldr	r1, [pc, #60]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002576:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	4a0c      	ldr	r2, [pc, #48]	; (80025ac <FLASH_Erase_Sector+0x98>)
 800257c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002580:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4313      	orrs	r3, r2
 800258c:	4a07      	ldr	r2, [pc, #28]	; (80025ac <FLASH_Erase_Sector+0x98>)
 800258e:	f043 0302 	orr.w	r3, r3, #2
 8002592:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <FLASH_Erase_Sector+0x98>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	4a04      	ldr	r2, [pc, #16]	; (80025ac <FLASH_Erase_Sector+0x98>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	6113      	str	r3, [r2, #16]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT(BootConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025be:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c2:	f7ff fd5d 	bl	8002080 <FLASH_WaitForLastOperation>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10f      	bne.n	80025f0 <FLASH_OB_BootConfig+0x40>
  {
    /* Set Dual Bank Boot */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <FLASH_OB_BootConfig+0x4c>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <FLASH_OB_BootConfig+0x4c>)
 80025d8:	f023 0310 	bic.w	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <FLASH_OB_BootConfig+0x4c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4905      	ldr	r1, [pc, #20]	; (80025fc <FLASH_OB_BootConfig+0x4c>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	700b      	strb	r3, [r1, #0]
  }

  return status;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023c14 	.word	0x40023c14

08002600 <FLASH_OB_EnablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002610:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002614:	f7ff fd34 	bl	8002080 <FLASH_WaitForLastOperation>
 8002618:	4603      	mov	r3, r0
 800261a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12d      	bne.n	800267e <FLASH_OB_EnablePCROP+0x7e>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d002      	beq.n	800262e <FLASH_OB_EnablePCROP+0x2e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d109      	bne.n	8002642 <FLASH_OB_EnablePCROP+0x42>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <FLASH_OB_EnablePCROP+0x88>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4913      	ldr	r1, [pc, #76]	; (8002688 <FLASH_OB_EnablePCROP+0x88>)
 800263a:	4313      	orrs	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	800b      	strh	r3, [r1, #0]
 8002640:	e008      	b.n	8002654 <FLASH_OB_EnablePCROP+0x54>
    }
    else
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <FLASH_OB_EnablePCROP+0x8c>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	b29b      	uxth	r3, r3
 800264c:	490f      	ldr	r1, [pc, #60]	; (800268c <FLASH_OB_EnablePCROP+0x8c>)
 800264e:	4313      	orrs	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d111      	bne.n	800267e <FLASH_OB_EnablePCROP+0x7e>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800265a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800265e:	f7ff fd0f 	bl	8002080 <FLASH_WaitForLastOperation>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <FLASH_OB_EnablePCROP+0x7e>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 800266c:	4b07      	ldr	r3, [pc, #28]	; (800268c <FLASH_OB_EnablePCROP+0x8c>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29a      	uxth	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4905      	ldr	r1, [pc, #20]	; (800268c <FLASH_OB_EnablePCROP+0x8c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	b29b      	uxth	r3, r3
 800267c:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023c16 	.word	0x40023c16
 800268c:	40023c1a 	.word	0x40023c1a

08002690 <FLASH_OB_DisablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026a4:	f7ff fcec 	bl	8002080 <FLASH_WaitForLastOperation>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d133      	bne.n	800271a <FLASH_OB_DisablePCROP+0x8a>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d002      	beq.n	80026be <FLASH_OB_DisablePCROP+0x2e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d10b      	bne.n	80026d6 <FLASH_OB_DisablePCROP+0x46>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~SectorBank1);
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <FLASH_OB_DisablePCROP+0x94>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	4915      	ldr	r1, [pc, #84]	; (8002724 <FLASH_OB_DisablePCROP+0x94>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	800b      	strh	r3, [r1, #0]
 80026d4:	e00a      	b.n	80026ec <FLASH_OB_DisablePCROP+0x5c>
    }
    else
    {
      /*Write protection done on sectors of BANK2*/
      assert_param(IS_OB_PCROP(SectorBank2));
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <FLASH_OB_DisablePCROP+0x98>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4910      	ldr	r1, [pc, #64]	; (8002728 <FLASH_OB_DisablePCROP+0x98>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d113      	bne.n	800271a <FLASH_OB_DisablePCROP+0x8a>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026f2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026f6:	f7ff fcc3 	bl	8002080 <FLASH_WaitForLastOperation>
 80026fa:	4603      	mov	r3, r0
 80026fc:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <FLASH_OB_DisablePCROP+0x8a>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <FLASH_OB_DisablePCROP+0x98>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29a      	uxth	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	b29b      	uxth	r3, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	b29b      	uxth	r3, r3
 8002712:	4905      	ldr	r1, [pc, #20]	; (8002728 <FLASH_OB_DisablePCROP+0x98>)
 8002714:	4013      	ands	r3, r2
 8002716:	b29b      	uxth	r3, r3
 8002718:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 800271a:	7dfb      	ldrb	r3, [r7, #23]

}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023c16 	.word	0x40023c16
 8002728:	40023c1a 	.word	0x40023c1a

0800272c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002742:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002746:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002748:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800274e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a16      	ldr	r2, [pc, #88]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800275a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800275e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002760:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d017      	beq.n	80027a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002778:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800277e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002782:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800278a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <FLASH_FlushCaches+0x88>)
 8002796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800279a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <FLASH_FlushCaches+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <FLASH_FlushCaches+0x88>)
 80027a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a6:	6013      	str	r3, [r2, #0]
  }
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e177      	b.n	8002ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027d4:	2201      	movs	r2, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4013      	ands	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	f040 8166 	bne.w	8002abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d005      	beq.n	800280a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	2b02      	cmp	r3, #2
 8002808:	d130      	bne.n	800286c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002840:	2201      	movs	r2, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0201 	and.w	r2, r3, #1
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b03      	cmp	r3, #3
 8002876:	d017      	beq.n	80028a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d123      	bne.n	80028fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	08da      	lsrs	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3208      	adds	r2, #8
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	220f      	movs	r2, #15
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	08da      	lsrs	r2, r3, #3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	69b9      	ldr	r1, [r7, #24]
 80028f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80c0 	beq.w	8002abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_GPIO_Init+0x324>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800295a:	4a61      	ldr	r2, [pc, #388]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	220f      	movs	r2, #15
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	4013      	ands	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_GPIO_Init+0x32c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d037      	beq.n	80029f6 <HAL_GPIO_Init+0x23e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a57      	ldr	r2, [pc, #348]	; (8002ae8 <HAL_GPIO_Init+0x330>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_GPIO_Init+0x23a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_GPIO_Init+0x334>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d02b      	beq.n	80029ee <HAL_GPIO_Init+0x236>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a55      	ldr	r2, [pc, #340]	; (8002af0 <HAL_GPIO_Init+0x338>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d025      	beq.n	80029ea <HAL_GPIO_Init+0x232>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a54      	ldr	r2, [pc, #336]	; (8002af4 <HAL_GPIO_Init+0x33c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01f      	beq.n	80029e6 <HAL_GPIO_Init+0x22e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a53      	ldr	r2, [pc, #332]	; (8002af8 <HAL_GPIO_Init+0x340>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d019      	beq.n	80029e2 <HAL_GPIO_Init+0x22a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a52      	ldr	r2, [pc, #328]	; (8002afc <HAL_GPIO_Init+0x344>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d013      	beq.n	80029de <HAL_GPIO_Init+0x226>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_GPIO_Init+0x348>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00d      	beq.n	80029da <HAL_GPIO_Init+0x222>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_GPIO_Init+0x34c>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d007      	beq.n	80029d6 <HAL_GPIO_Init+0x21e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_GPIO_Init+0x350>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_GPIO_Init+0x21a>
 80029ce:	2309      	movs	r3, #9
 80029d0:	e012      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029d2:	230a      	movs	r3, #10
 80029d4:	e010      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029d6:	2308      	movs	r3, #8
 80029d8:	e00e      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029da:	2307      	movs	r3, #7
 80029dc:	e00c      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029de:	2306      	movs	r3, #6
 80029e0:	e00a      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029e2:	2305      	movs	r3, #5
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029e6:	2304      	movs	r3, #4
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x240>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x328>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a16:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a8e:	4a1f      	ldr	r2, [pc, #124]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_GPIO_Init+0x354>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f ae84 	bls.w	80027d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40021400 	.word	0x40021400
 8002afc:	40021800 	.word	0x40021800
 8002b00:	40021c00 	.word	0x40021c00
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40022400 	.word	0x40022400
 8002b0c:	40013c00 	.word	0x40013c00

08002b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	807b      	strh	r3, [r7, #2]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b20:	787b      	ldrb	r3, [r7, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b26:	887a      	ldrh	r2, [r7, #2]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b2c:	e003      	b.n	8002b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b2e:	887b      	ldrh	r3, [r7, #2]
 8002b30:	041a      	lsls	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	619a      	str	r2, [r3, #24]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b54:	887a      	ldrh	r2, [r7, #2]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	887b      	ldrh	r3, [r7, #2]
 8002b62:	400b      	ands	r3, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	619a      	str	r2, [r3, #24]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002b88:	f000 f808 	bl	8002b9c <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <HAL_PWR_PVD_IRQHandler+0x20>)
 8002b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b92:	615a      	str	r2, [r3, #20]
  }
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e267      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	4b88      	ldr	r3, [pc, #544]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b85      	ldr	r3, [pc, #532]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b7e      	ldr	r3, [pc, #504]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05b      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d157      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e242      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x74>
 8002c12:	4b76      	ldr	r3, [pc, #472]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6d      	ldr	r3, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6c      	ldr	r2, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c44:	4b69      	ldr	r3, [pc, #420]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a68      	ldr	r2, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe fe8a 	bl	800197c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fe86 	bl	800197c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	; 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e207      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xc0>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fe76 	bl	800197c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fe72 	bl	800197c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1f3      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b51      	ldr	r3, [pc, #324]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0xe8>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b47      	ldr	r3, [pc, #284]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b41      	ldr	r3, [pc, #260]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e1c7      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4937      	ldr	r1, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe fe2b 	bl	800197c <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe fe27 	bl	800197c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1a8      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4925      	ldr	r1, [pc, #148]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fe0a 	bl	800197c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe fe06 	bl	800197c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e187      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fdea 	bl	800197c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe fde6 	bl	800197c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e167      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x240>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x200>
 8002dca:	e01b      	b.n	8002e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fdd3 	bl	800197c <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e00e      	b.n	8002df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe fdcf 	bl	800197c <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d907      	bls.n	8002df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e150      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	42470000 	.word	0x42470000
 8002df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ea      	bne.n	8002dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8097 	beq.w	8002f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b81      	ldr	r3, [pc, #516]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	4b7d      	ldr	r3, [pc, #500]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	4b7a      	ldr	r3, [pc, #488]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b77      	ldr	r3, [pc, #476]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a73      	ldr	r2, [pc, #460]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fd8f 	bl	800197c <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe fd8b 	bl	800197c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e10c      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
 8002e88:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a63      	ldr	r2, [pc, #396]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x30c>
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a5b      	ldr	r2, [pc, #364]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002eb8:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a57      	ldr	r2, [pc, #348]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	4a54      	ldr	r2, [pc, #336]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fd50 	bl	800197c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fd4c 	bl	800197c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0cb      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	4b49      	ldr	r3, [pc, #292]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fe fd3a 	bl	800197c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fd36 	bl	800197c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0b5      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f22:	4b3e      	ldr	r3, [pc, #248]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	4a38      	ldr	r2, [pc, #224]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a1 	beq.w	800308c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4a:	4b34      	ldr	r3, [pc, #208]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b08      	cmp	r3, #8
 8002f54:	d05c      	beq.n	8003010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d141      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b31      	ldr	r3, [pc, #196]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fe fd0a 	bl	800197c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe fd06 	bl	800197c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e087      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7e:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69da      	ldr	r2, [r3, #28]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	491b      	ldr	r1, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fba:	f7fe fcdf 	bl	800197c <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc2:	f7fe fcdb 	bl	800197c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e05c      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x416>
 8002fe0:	e054      	b.n	800308c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fcc8 	bl	800197c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe fcc4 	bl	800197c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e045      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_OscConfig+0x470>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
 800300e:	e03d      	b.n	800308c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d107      	bne.n	8003028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e038      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
 8003024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x4ec>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d028      	beq.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d121      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d11a      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800305e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	4293      	cmp	r3, r2
 8003062:	d111      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	3b01      	subs	r3, #1
 8003072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d107      	bne.n	8003088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0cc      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b0:	4b68      	ldr	r3, [pc, #416]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d90c      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b65      	ldr	r3, [pc, #404]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b63      	ldr	r3, [pc, #396]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0b8      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d020      	beq.n	8003126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f0:	4b59      	ldr	r3, [pc, #356]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4a58      	ldr	r2, [pc, #352]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003108:	4b53      	ldr	r3, [pc, #332]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a52      	ldr	r2, [pc, #328]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003114:	4b50      	ldr	r3, [pc, #320]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	494d      	ldr	r1, [pc, #308]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	4313      	orrs	r3, r2
 8003124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d044      	beq.n	80031bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d107      	bne.n	800314a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d119      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d003      	beq.n	800315a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003156:	2b03      	cmp	r3, #3
 8003158:	d107      	bne.n	800316a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e06f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316a:	4b3b      	ldr	r3, [pc, #236]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e067      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f023 0203 	bic.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4934      	ldr	r1, [pc, #208]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800318c:	f7fe fbf6 	bl	800197c <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	e00a      	b.n	80031aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003194:	f7fe fbf2 	bl	800197c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e04f      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 020c 	and.w	r2, r3, #12
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d1eb      	bne.n	8003194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20c      	bcs.n	80031e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e032      	b.n	800324a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4916      	ldr	r1, [pc, #88]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320e:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	490e      	ldr	r1, [pc, #56]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003222:	f000 f821 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003226:	4602      	mov	r2, r0
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	490a      	ldr	r1, [pc, #40]	; (800325c <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	5ccb      	ldrb	r3, [r1, r3]
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f8d6 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00
 8003258:	40023800 	.word	0x40023800
 800325c:	080077d4 	.word	0x080077d4
 8003260:	20000008 	.word	0x20000008
 8003264:	2000000c 	.word	0x2000000c

08003268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800326c:	b090      	sub	sp, #64	; 0x40
 800326e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	637b      	str	r3, [r7, #52]	; 0x34
 8003274:	2300      	movs	r3, #0
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003278:	2300      	movs	r3, #0
 800327a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003280:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	2b08      	cmp	r3, #8
 800328a:	d00d      	beq.n	80032a8 <HAL_RCC_GetSysClockFreq+0x40>
 800328c:	2b08      	cmp	r3, #8
 800328e:	f200 80a1 	bhi.w	80033d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0x34>
 8003296:	2b04      	cmp	r3, #4
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800329a:	e09b      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800329c:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_GetSysClockFreq+0x184>)
 800329e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032a0:	e09b      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032a2:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032a6:	e098      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a8:	4b4f      	ldr	r3, [pc, #316]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032b2:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	099b      	lsrs	r3, r3, #6
 80032c4:	2200      	movs	r2, #0
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	627a      	str	r2, [r7, #36]	; 0x24
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032d0:	2100      	movs	r1, #0
 80032d2:	4b47      	ldr	r3, [pc, #284]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d4:	fb03 f201 	mul.w	r2, r3, r1
 80032d8:	2300      	movs	r3, #0
 80032da:	fb00 f303 	mul.w	r3, r0, r3
 80032de:	4413      	add	r3, r2
 80032e0:	4a43      	ldr	r2, [pc, #268]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e2:	fba0 1202 	umull	r1, r2, r0, r2
 80032e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e8:	460a      	mov	r2, r1
 80032ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80032ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ee:	4413      	add	r3, r2
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	2200      	movs	r2, #0
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	61fa      	str	r2, [r7, #28]
 80032fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003302:	f7fc ffc5 	bl	8000290 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4613      	mov	r3, r2
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330e:	e053      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003310:	4b35      	ldr	r3, [pc, #212]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	2200      	movs	r2, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	617a      	str	r2, [r7, #20]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003322:	f04f 0b00 	mov.w	fp, #0
 8003326:	4652      	mov	r2, sl
 8003328:	465b      	mov	r3, fp
 800332a:	f04f 0000 	mov.w	r0, #0
 800332e:	f04f 0100 	mov.w	r1, #0
 8003332:	0159      	lsls	r1, r3, #5
 8003334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003338:	0150      	lsls	r0, r2, #5
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	ebb2 080a 	subs.w	r8, r2, sl
 8003342:	eb63 090b 	sbc.w	r9, r3, fp
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003352:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003356:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800335a:	ebb2 0408 	subs.w	r4, r2, r8
 800335e:	eb63 0509 	sbc.w	r5, r3, r9
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	00eb      	lsls	r3, r5, #3
 800336c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003370:	00e2      	lsls	r2, r4, #3
 8003372:	4614      	mov	r4, r2
 8003374:	461d      	mov	r5, r3
 8003376:	eb14 030a 	adds.w	r3, r4, sl
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	eb45 030b 	adc.w	r3, r5, fp
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800338e:	4629      	mov	r1, r5
 8003390:	028b      	lsls	r3, r1, #10
 8003392:	4621      	mov	r1, r4
 8003394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003398:	4621      	mov	r1, r4
 800339a:	028a      	lsls	r2, r1, #10
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a2:	2200      	movs	r2, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033ac:	f7fc ff70 	bl	8000290 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0c1b      	lsrs	r3, r3, #16
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	3301      	adds	r3, #1
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d2:	e002      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_GetSysClockFreq+0x184>)
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3740      	adds	r7, #64	; 0x40
 80033e0:	46bd      	mov	sp, r7
 80033e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	00f42400 	.word	0x00f42400
 80033f0:	017d7840 	.word	0x017d7840

080033f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f8:	4b03      	ldr	r3, [pc, #12]	; (8003408 <HAL_RCC_GetHCLKFreq+0x14>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003410:	f7ff fff0 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 8003414:	4602      	mov	r2, r0
 8003416:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	0a9b      	lsrs	r3, r3, #10
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	4903      	ldr	r1, [pc, #12]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003422:	5ccb      	ldrb	r3, [r1, r3]
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	080077e4 	.word	0x080077e4

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003438:	f7ff ffdc 	bl	80033f4 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	080077e4 	.word	0x080077e4

0800345c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	220f      	movs	r2, #15
 800346a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	08db      	lsrs	r3, r3, #3
 8003496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCC_GetClockConfig+0x60>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 020f 	and.w	r2, r3, #15
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	601a      	str	r2, [r3, #0]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40023c00 	.word	0x40023c00

080034c0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034c6:	f7fe fa59 	bl	800197c <HAL_GetTick>
 80034ca:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a71      	ldr	r2, [pc, #452]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034da:	f7fe fa4f 	bl	800197c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0d0      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80034ec:	4b6a      	ldr	r3, [pc, #424]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80034f8:	4b67      	ldr	r3, [pc, #412]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a66      	ldr	r2, [pc, #408]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80034fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003502:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003504:	f7fe fa3a 	bl	800197c <HAL_GetTick>
 8003508:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800350a:	4b63      	ldr	r3, [pc, #396]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003512:	f7fe fa33 	bl	800197c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0b2      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003528:	4b5b      	ldr	r3, [pc, #364]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ee      	bne.n	8003512 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003534:	f7fe fa22 	bl	800197c <HAL_GetTick>
 8003538:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800353a:	4b57      	ldr	r3, [pc, #348]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a56      	ldr	r2, [pc, #344]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003540:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003544:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe fa18 	bl	800197c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e099      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800355a:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003566:	f7fe fa09 	bl	800197c <HAL_GetTick>
 800356a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800356c:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a49      	ldr	r2, [pc, #292]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003576:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003578:	e008      	b.n	800358c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe f9ff 	bl	800197c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e080      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003598:	f7fe f9f0 	bl	800197c <HAL_GetTick>
 800359c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3d      	ldr	r2, [pc, #244]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035a8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035ac:	f7fe f9e6 	bl	800197c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e067      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80035be:	4b36      	ldr	r3, [pc, #216]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80035ca:	f7fe f9d7 	bl	800197c <HAL_GetTick>
 80035ce:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80035d0:	4b31      	ldr	r3, [pc, #196]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a30      	ldr	r2, [pc, #192]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035da:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035de:	f7fe f9cd 	bl	800197c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e04e      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80035f0:	4b29      	ldr	r3, [pc, #164]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80035fc:	4b26      	ldr	r3, [pc, #152]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 80035fe:	4a27      	ldr	r2, [pc, #156]	; (800369c <HAL_RCC_DeInit+0x1dc>)
 8003600:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003602:	4b25      	ldr	r3, [pc, #148]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_RCC_DeInit+0x1e0>)
 8003606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800360c:	4a24      	ldr	r2, [pc, #144]	; (80036a0 <HAL_RCC_DeInit+0x1e0>)
 800360e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003612:	4b21      	ldr	r3, [pc, #132]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4a20      	ldr	r2, [pc, #128]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003618:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800361c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 800361e:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a1d      	ldr	r2, [pc, #116]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003628:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 800362a:	4b1b      	ldr	r3, [pc, #108]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003634:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800363c:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003640:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800364c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 800364e:	4b12      	ldr	r3, [pc, #72]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	4a11      	ldr	r2, [pc, #68]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003658:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800365a:	4b0f      	ldr	r3, [pc, #60]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	4a0e      	ldr	r2, [pc, #56]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003666:	4b0c      	ldr	r3, [pc, #48]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 8003668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800366a:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <HAL_RCC_DeInit+0x1d8>)
 800366c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003670:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_DeInit+0x1e4>)
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <HAL_RCC_DeInit+0x1e8>)
 8003676:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <HAL_RCC_DeInit+0x1ec>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd feb9 	bl	80013f4 <HAL_InitTick>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 800368c:	2300      	movs	r3, #0
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	04003010 	.word	0x04003010
 80036a0:	24003000 	.word	0x24003000
 80036a4:	20000008 	.word	0x20000008
 80036a8:	00f42400 	.word	0x00f42400
 80036ac:	2000000c 	.word	0x2000000c

080036b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e041      	b.n	8003746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f839 	bl	800374e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4619      	mov	r1, r3
 80036ee:	4610      	mov	r0, r2
 80036f0:	f000 f9c0 	bl	8003a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d001      	beq.n	800377c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e04e      	b.n	800381a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_TIM_Base_Start_IT+0xc4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d022      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a6:	d01d      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	; (800382c <HAL_TIM_Base_Start_IT+0xc8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d018      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_TIM_Base_Start_IT+0xcc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d013      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_TIM_Base_Start_IT+0xd0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_TIM_Base_Start_IT+0xd4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a19      	ldr	r2, [pc, #100]	; (800383c <HAL_TIM_Base_Start_IT+0xd8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x80>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIM_Base_Start_IT+0xdc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d111      	bne.n	8003808 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d010      	beq.n	8003818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003806:	e007      	b.n	8003818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0201 	orr.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40001800 	.word	0x40001800

08003844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0202 	mvn.w	r2, #2
 8003878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8d2 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8c4 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8d5 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d020      	beq.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d01b      	beq.n	80038f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f06f 0204 	mvn.w	r2, #4
 80038c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8ac 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 80038e0:	e005      	b.n	80038ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f89e 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f8af 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0208 	mvn.w	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f886 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f878 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f889 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0210 	mvn.w	r2, #16
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2208      	movs	r2, #8
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f860 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f852 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f863 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d007      	beq.n	80039b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0201 	mvn.w	r2, #1
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fcbe 	bl	800132c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f906 	bl	8003be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f834 	bl	8003a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00c      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0220 	mvn.w	r2, #32
 8003a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f8d8 	bl	8003bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a46      	ldr	r2, [pc, #280]	; (8003ba0 <TIM_Base_SetConfig+0x12c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d00f      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a43      	ldr	r2, [pc, #268]	; (8003ba4 <TIM_Base_SetConfig+0x130>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a42      	ldr	r2, [pc, #264]	; (8003ba8 <TIM_Base_SetConfig+0x134>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a41      	ldr	r2, [pc, #260]	; (8003bac <TIM_Base_SetConfig+0x138>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a40      	ldr	r2, [pc, #256]	; (8003bb0 <TIM_Base_SetConfig+0x13c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <TIM_Base_SetConfig+0x12c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d027      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a32      	ldr	r2, [pc, #200]	; (8003ba4 <TIM_Base_SetConfig+0x130>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d023      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a31      	ldr	r2, [pc, #196]	; (8003ba8 <TIM_Base_SetConfig+0x134>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a30      	ldr	r2, [pc, #192]	; (8003bac <TIM_Base_SetConfig+0x138>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2f      	ldr	r2, [pc, #188]	; (8003bb0 <TIM_Base_SetConfig+0x13c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2e      	ldr	r2, [pc, #184]	; (8003bb4 <TIM_Base_SetConfig+0x140>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a2d      	ldr	r2, [pc, #180]	; (8003bb8 <TIM_Base_SetConfig+0x144>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a2c      	ldr	r2, [pc, #176]	; (8003bbc <TIM_Base_SetConfig+0x148>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <TIM_Base_SetConfig+0x14c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2a      	ldr	r2, [pc, #168]	; (8003bc4 <TIM_Base_SetConfig+0x150>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <TIM_Base_SetConfig+0x154>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <TIM_Base_SetConfig+0x12c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0xf8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <TIM_Base_SetConfig+0x13c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d105      	bne.n	8003b92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	611a      	str	r2, [r3, #16]
  }
}
 8003b92:	bf00      	nop
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40000400 	.word	0x40000400
 8003ba8:	40000800 	.word	0x40000800
 8003bac:	40000c00 	.word	0x40000c00
 8003bb0:	40010400 	.word	0x40010400
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40001800 	.word	0x40001800
 8003bc4:	40001c00 	.word	0x40001c00
 8003bc8:	40002000 	.word	0x40002000

08003bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e042      	b.n	8003c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fd80 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2224      	movs	r2, #36	; 0x24
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fe55 	bl	80048e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	d175      	bne.n	8003da0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_UART_Transmit+0x2c>
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e06e      	b.n	8003da2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	; 0x21
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cd2:	f7fd fe53 	bl	800197c <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	d108      	bne.n	8003d00 <HAL_UART_Transmit+0x6c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e003      	b.n	8003d08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d08:	e02e      	b.n	8003d68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	; 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fbb7 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e03a      	b.n	8003da2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10b      	bne.n	8003d4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	3302      	adds	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e007      	b.n	8003d5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	781a      	ldrb	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	3301      	adds	r3, #1
 8003d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1cb      	bne.n	8003d0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb83 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e006      	b.n	8003da2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08a      	sub	sp, #40	; 0x28
 8003dae:	af02      	add	r7, sp, #8
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	f040 8081 	bne.w	8003ece <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_UART_Receive+0x2e>
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e079      	b.n	8003ed0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2222      	movs	r2, #34	; 0x22
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df0:	f7fd fdc4 	bl	800197c <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	88fa      	ldrh	r2, [r7, #6]
 8003e00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d108      	bne.n	8003e1e <HAL_UART_Receive+0x74>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61bb      	str	r3, [r7, #24]
 8003e1c:	e003      	b.n	8003e26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e26:	e047      	b.n	8003eb8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2120      	movs	r1, #32
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fb28 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e042      	b.n	8003ed0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10c      	bne.n	8003e6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3302      	adds	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	e01f      	b.n	8003eaa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d007      	beq.n	8003e84 <HAL_UART_Receive+0xda>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_UART_Receive+0xe8>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e008      	b.n	8003ea4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1b2      	bne.n	8003e28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d112      	bne.n	8003f18 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_UART_Receive_IT+0x26>
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e00b      	b.n	8003f1a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fb13 	bl	800453a <UART_Start_Receive_IT>
 8003f14:	4603      	mov	r3, r0
 8003f16:	e000      	b.n	8003f1a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b0ba      	sub	sp, #232	; 0xe8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10f      	bne.n	8003f8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 fbf2 	bl	800476c <UART_Receive_IT>
      return;
 8003f88:	e25b      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80de 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
 8003f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80d1 	beq.w	8004150 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
 8003fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
 8003fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
 8004002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0204 	orr.w	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d011      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f043 0208 	orr.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 81f2 	beq.w	8004438 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
 8004060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d002      	beq.n	8004072 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 fb7d 	bl	800476c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	bf0c      	ite	eq
 8004080:	2301      	moveq	r3, #1
 8004082:	2300      	movne	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <HAL_UART_IRQHandler+0x17a>
 8004096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04f      	beq.n	800413e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fa85 	bl	80045ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d141      	bne.n	8004136 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3314      	adds	r3, #20
 80040b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3314      	adds	r3, #20
 80040da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1d9      	bne.n	80040b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	2b00      	cmp	r3, #0
 8004104:	d013      	beq.n	800412e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	4a7e      	ldr	r2, [pc, #504]	; (8004304 <HAL_UART_IRQHandler+0x3e0>)
 800410c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fe16 	bl	8001d44 <HAL_DMA_Abort_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004128:	4610      	mov	r0, r2
 800412a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	e00e      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f994 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00a      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f990 	bl	800445c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e006      	b.n	800414c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f98c 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800414a:	e175      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	bf00      	nop
    return;
 800414e:	e173      	b.n	8004438 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 814f 	bne.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800415a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 8148 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8141 	beq.w	80043f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004196:	2b40      	cmp	r3, #64	; 0x40
 8004198:	f040 80b6 	bne.w	8004308 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8145 	beq.w	800443c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ba:	429a      	cmp	r2, r3
 80041bc:	f080 813e 	bcs.w	800443c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	f000 8088 	beq.w	80042e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004206:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800420e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800421a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1d9      	bne.n	80041d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800424a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800424e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e1      	bne.n	8004222 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800426e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b6:	f023 0310 	bic.w	r3, r3, #16
 80042ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e3      	bne.n	80042a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fd fcbf 	bl	8001c64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4619      	mov	r1, r3
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8b7 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004302:	e09b      	b.n	800443c <HAL_UART_IRQHandler+0x518>
 8004304:	08004675 	.word	0x08004675
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004310:	b29b      	uxth	r3, r3
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 808e 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8089 	beq.w	8004440 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004344:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	330c      	adds	r3, #12
 800434e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004352:	647a      	str	r2, [r7, #68]	; 0x44
 8004354:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004358:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e3      	bne.n	800432e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	623b      	str	r3, [r7, #32]
   return(result);
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800438a:	633a      	str	r2, [r7, #48]	; 0x30
 800438c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d0:	61fa      	str	r2, [r7, #28]
 80043d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	69b9      	ldr	r1, [r7, #24]
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	617b      	str	r3, [r7, #20]
   return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f83d 	bl	8004470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f6:	e023      	b.n	8004440 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f943 	bl	800469c <UART_Transmit_IT>
    return;
 8004416:	e014      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
 8004424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f983 	bl	800473c <UART_EndTransmit_IT>
    return;
 8004436:	e004      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
    return;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_UART_IRQHandler+0x51e>
      return;
 8004440:	bf00      	nop
  }
}
 8004442:	37e8      	adds	r7, #232	; 0xe8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e03b      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d037      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fd fa6b 	bl	800197c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e03a      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d023      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d020      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d01d      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d116      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f857 	bl	80045ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2208      	movs	r2, #8
 8004504:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0b4      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2222      	movs	r2, #34	; 0x22
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800457e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b095      	sub	sp, #84	; 0x54
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	330c      	adds	r3, #12
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d6:	643a      	str	r2, [r7, #64]	; 0x40
 80045d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	64bb      	str	r3, [r7, #72]	; 0x48
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3314      	adds	r3, #20
 8004608:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800460a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	2b01      	cmp	r3, #1
 8004624:	d119      	bne.n	800465a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	60bb      	str	r3, [r7, #8]
   return(result);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 0310 	bic.w	r3, r3, #16
 800463c:	647b      	str	r3, [r7, #68]	; 0x44
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	330c      	adds	r3, #12
 8004644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004646:	61ba      	str	r2, [r7, #24]
 8004648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	613b      	str	r3, [r7, #16]
   return(result);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004668:	bf00      	nop
 800466a:	3754      	adds	r7, #84	; 0x54
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f7ff fee4 	bl	800445c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b21      	cmp	r3, #33	; 0x21
 80046ae:	d13e      	bne.n	800472e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d114      	bne.n	80046e4 <UART_Transmit_IT+0x48>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d110      	bne.n	80046e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	1c9a      	adds	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]
 80046e2:	e008      	b.n	80046f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	1c59      	adds	r1, r3, #1
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6211      	str	r1, [r2, #32]
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4619      	mov	r1, r3
 8004704:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10f      	bne.n	800472a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004718:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004728:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	e000      	b.n	8004730 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004752:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fe73 	bl	8004448 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	; 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b22      	cmp	r3, #34	; 0x22
 800477e:	f040 80ae 	bne.w	80048de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d117      	bne.n	80047bc <UART_Receive_IT+0x50>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d113      	bne.n	80047bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004794:	2300      	movs	r3, #0
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	629a      	str	r2, [r3, #40]	; 0x28
 80047ba:	e026      	b.n	800480a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	d007      	beq.n	80047e0 <UART_Receive_IT+0x74>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <UART_Receive_IT+0x82>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e008      	b.n	8004800 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29b      	uxth	r3, r3
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	4619      	mov	r1, r3
 8004818:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800481a:	2b00      	cmp	r3, #0
 800481c:	d15d      	bne.n	80048da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0220 	bic.w	r2, r2, #32
 800482c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800483c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	d135      	bne.n	80048d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	613b      	str	r3, [r7, #16]
   return(result);
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f023 0310 	bic.w	r3, r3, #16
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	623a      	str	r2, [r7, #32]
 800488c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	69f9      	ldr	r1, [r7, #28]
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	61bb      	str	r3, [r7, #24]
   return(result);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e5      	bne.n	800486a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d10a      	bne.n	80048c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fdd1 	bl	8004470 <HAL_UARTEx_RxEventCallback>
 80048ce:	e002      	b.n	80048d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fc fbdd 	bl	8001090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e002      	b.n	80048e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3730      	adds	r7, #48	; 0x30
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b0c0      	sub	sp, #256	; 0x100
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	68d9      	ldr	r1, [r3, #12]
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	ea40 0301 	orr.w	r3, r0, r1
 8004910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	431a      	orrs	r2, r3
 8004920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	431a      	orrs	r2, r3
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004940:	f021 010c 	bic.w	r1, r1, #12
 8004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800494e:	430b      	orrs	r3, r1
 8004950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	ea40 0301 	orr.w	r3, r0, r1
 800496e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b8f      	ldr	r3, [pc, #572]	; (8004bb4 <UART_SetConfig+0x2cc>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d005      	beq.n	8004988 <UART_SetConfig+0xa0>
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b8d      	ldr	r3, [pc, #564]	; (8004bb8 <UART_SetConfig+0x2d0>)
 8004984:	429a      	cmp	r2, r3
 8004986:	d104      	bne.n	8004992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fd54 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 800498c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004990:	e003      	b.n	800499a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7fe fd3b 	bl	800340c <HAL_RCC_GetPCLK1Freq>
 8004996:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a4:	f040 810c 	bne.w	8004bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	1891      	adds	r1, r2, r2
 80049c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80049c2:	415b      	adcs	r3, r3
 80049c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ca:	4621      	mov	r1, r4
 80049cc:	eb12 0801 	adds.w	r8, r2, r1
 80049d0:	4629      	mov	r1, r5
 80049d2:	eb43 0901 	adc.w	r9, r3, r1
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	f04f 0300 	mov.w	r3, #0
 80049de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ea:	4690      	mov	r8, r2
 80049ec:	4699      	mov	r9, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	eb18 0303 	adds.w	r3, r8, r3
 80049f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049f8:	462b      	mov	r3, r5
 80049fa:	eb49 0303 	adc.w	r3, r9, r3
 80049fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a16:	460b      	mov	r3, r1
 8004a18:	18db      	adds	r3, r3, r3
 8004a1a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	eb42 0303 	adc.w	r3, r2, r3
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
 8004a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a2c:	f7fb fc30 	bl	8000290 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b61      	ldr	r3, [pc, #388]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	011c      	lsls	r4, r3, #4
 8004a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a60:	4641      	mov	r1, r8
 8004a62:	eb12 0a01 	adds.w	sl, r2, r1
 8004a66:	4649      	mov	r1, r9
 8004a68:	eb43 0b01 	adc.w	fp, r3, r1
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a80:	4692      	mov	sl, r2
 8004a82:	469b      	mov	fp, r3
 8004a84:	4643      	mov	r3, r8
 8004a86:	eb1a 0303 	adds.w	r3, sl, r3
 8004a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	eb4b 0303 	adc.w	r3, fp, r3
 8004a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aac:	460b      	mov	r3, r1
 8004aae:	18db      	adds	r3, r3, r3
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	eb42 0303 	adc.w	r3, r2, r3
 8004ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8004aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ac2:	f7fb fbe5 	bl	8000290 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004ace:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2264      	movs	r2, #100	; 0x64
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	1acb      	subs	r3, r1, r3
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004af0:	441c      	add	r4, r3
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004afc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b04:	4642      	mov	r2, r8
 8004b06:	464b      	mov	r3, r9
 8004b08:	1891      	adds	r1, r2, r2
 8004b0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b0c:	415b      	adcs	r3, r3
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b14:	4641      	mov	r1, r8
 8004b16:	1851      	adds	r1, r2, r1
 8004b18:	6339      	str	r1, [r7, #48]	; 0x30
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	414b      	adcs	r3, r1
 8004b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	00cb      	lsls	r3, r1, #3
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b36:	4651      	mov	r1, sl
 8004b38:	00ca      	lsls	r2, r1, #3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4642      	mov	r2, r8
 8004b42:	189b      	adds	r3, r3, r2
 8004b44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b48:	464b      	mov	r3, r9
 8004b4a:	460a      	mov	r2, r1
 8004b4c:	eb42 0303 	adc.w	r3, r2, r3
 8004b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b68:	460b      	mov	r3, r1
 8004b6a:	18db      	adds	r3, r3, r3
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	4613      	mov	r3, r2
 8004b70:	eb42 0303 	adc.w	r3, r2, r3
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b7e:	f7fb fb87 	bl	8000290 <__aeabi_uldivmod>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004b88:	fba3 1302 	umull	r1, r3, r3, r2
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	2164      	movs	r1, #100	; 0x64
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	3332      	adds	r3, #50	; 0x32
 8004b9a:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <UART_SetConfig+0x2d4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	f003 0207 	and.w	r2, r3, #7
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4422      	add	r2, r4
 8004bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bb0:	e106      	b.n	8004dc0 <UART_SetConfig+0x4d8>
 8004bb2:	bf00      	nop
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	40011400 	.word	0x40011400
 8004bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bd2:	4642      	mov	r2, r8
 8004bd4:	464b      	mov	r3, r9
 8004bd6:	1891      	adds	r1, r2, r2
 8004bd8:	6239      	str	r1, [r7, #32]
 8004bda:	415b      	adcs	r3, r3
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004be2:	4641      	mov	r1, r8
 8004be4:	1854      	adds	r4, r2, r1
 8004be6:	4649      	mov	r1, r9
 8004be8:	eb43 0501 	adc.w	r5, r3, r1
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	00eb      	lsls	r3, r5, #3
 8004bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bfa:	00e2      	lsls	r2, r4, #3
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	461d      	mov	r5, r3
 8004c00:	4643      	mov	r3, r8
 8004c02:	18e3      	adds	r3, r4, r3
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c08:	464b      	mov	r3, r9
 8004c0a:	eb45 0303 	adc.w	r3, r5, r3
 8004c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c2e:	4629      	mov	r1, r5
 8004c30:	008b      	lsls	r3, r1, #2
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c38:	4621      	mov	r1, r4
 8004c3a:	008a      	lsls	r2, r1, #2
 8004c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c40:	f7fb fb26 	bl	8000290 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c4e:	095b      	lsrs	r3, r3, #5
 8004c50:	011c      	lsls	r4, r3, #4
 8004c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c56:	2200      	movs	r2, #0
 8004c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c64:	4642      	mov	r2, r8
 8004c66:	464b      	mov	r3, r9
 8004c68:	1891      	adds	r1, r2, r2
 8004c6a:	61b9      	str	r1, [r7, #24]
 8004c6c:	415b      	adcs	r3, r3
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c74:	4641      	mov	r1, r8
 8004c76:	1851      	adds	r1, r2, r1
 8004c78:	6139      	str	r1, [r7, #16]
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	414b      	adcs	r3, r1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c8c:	4659      	mov	r1, fp
 8004c8e:	00cb      	lsls	r3, r1, #3
 8004c90:	4651      	mov	r1, sl
 8004c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c96:	4651      	mov	r1, sl
 8004c98:	00ca      	lsls	r2, r1, #3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca8:	464b      	mov	r3, r9
 8004caa:	460a      	mov	r2, r1
 8004cac:	eb42 0303 	adc.w	r3, r2, r3
 8004cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ccc:	4649      	mov	r1, r9
 8004cce:	008b      	lsls	r3, r1, #2
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cd6:	4641      	mov	r1, r8
 8004cd8:	008a      	lsls	r2, r1, #2
 8004cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cde:	f7fb fad7 	bl	8000290 <__aeabi_uldivmod>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004cea:	fba3 2301 	umull	r2, r3, r3, r1
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2264      	movs	r2, #100	; 0x64
 8004cf2:	fb02 f303 	mul.w	r3, r2, r3
 8004cf6:	1acb      	subs	r3, r1, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d08:	441c      	add	r4, r3
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d0e:	2200      	movs	r2, #0
 8004d10:	673b      	str	r3, [r7, #112]	; 0x70
 8004d12:	677a      	str	r2, [r7, #116]	; 0x74
 8004d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	1891      	adds	r1, r2, r2
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	415b      	adcs	r3, r3
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d28:	4641      	mov	r1, r8
 8004d2a:	1851      	adds	r1, r2, r1
 8004d2c:	6039      	str	r1, [r7, #0]
 8004d2e:	4649      	mov	r1, r9
 8004d30:	414b      	adcs	r3, r1
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d40:	4659      	mov	r1, fp
 8004d42:	00cb      	lsls	r3, r1, #3
 8004d44:	4651      	mov	r1, sl
 8004d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d4a:	4651      	mov	r1, sl
 8004d4c:	00ca      	lsls	r2, r1, #3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	4642      	mov	r2, r8
 8004d56:	189b      	adds	r3, r3, r2
 8004d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	460a      	mov	r2, r1
 8004d5e:	eb42 0303 	adc.w	r3, r2, r3
 8004d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6e:	667a      	str	r2, [r7, #100]	; 0x64
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	008b      	lsls	r3, r1, #2
 8004d80:	4641      	mov	r1, r8
 8004d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d86:	4641      	mov	r1, r8
 8004d88:	008a      	lsls	r2, r1, #2
 8004d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d8e:	f7fb fa7f 	bl	8000290 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <UART_SetConfig+0x4e4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 020f 	and.w	r2, r3, #15
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4422      	add	r2, r4
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dcc:	51eb851f 	.word	0x51eb851f

08004dd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de2:	2b84      	cmp	r3, #132	; 0x84
 8004de4:	d005      	beq.n	8004df2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004de6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4413      	add	r3, r2
 8004dee:	3303      	adds	r3, #3
 8004df0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e04:	f000 fe50 	bl	8005aa8 <vTaskStartScheduler>
  
  return osOK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e10:	b089      	sub	sp, #36	; 0x24
 8004e12:	af04      	add	r7, sp, #16
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d020      	beq.n	8004e62 <osThreadCreate+0x54>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01c      	beq.n	8004e62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685c      	ldr	r4, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691e      	ldr	r6, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ffc8 	bl	8004dd0 <makeFreeRtosPriority>
 8004e40:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e4a:	9202      	str	r2, [sp, #8]
 8004e4c:	9301      	str	r3, [sp, #4]
 8004e4e:	9100      	str	r1, [sp, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4632      	mov	r2, r6
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	f000 fc5e 	bl	8005718 <xTaskCreateStatic>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e01c      	b.n	8004e9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685c      	ldr	r4, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e6e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffaa 	bl	8004dd0 <makeFreeRtosPriority>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	f107 030c 	add.w	r3, r7, #12
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	9200      	str	r2, [sp, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 fca0 	bl	80057d2 <xTaskCreate>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d001      	beq.n	8004e9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ea6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <osDelay+0x16>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	e000      	b.n	8004ebe <osDelay+0x18>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fdbe 	bl	8005a40 <vTaskDelay>
  
  return osOK;
 8004ec4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f000 fa2a 	bl	800533e <xQueueCreateMutexStatic>
 8004eea:	4603      	mov	r3, r0
 8004eec:	e003      	b.n	8004ef6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f000 fa0d 	bl	800530e <xQueueCreateMutex>
 8004ef4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f103 0208 	add.w	r2, r3, #8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f04f 32ff 	mov.w	r2, #4294967295
 8004f16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f103 0208 	add.w	r2, r3, #8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f103 0208 	add.w	r2, r3, #8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	601a      	str	r2, [r3, #0]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d103      	bne.n	8004fc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	60fb      	str	r3, [r7, #12]
 8004fbe:	e00c      	b.n	8004fda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e002      	b.n	8004fce <vListInsert+0x2e>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d2f6      	bcs.n	8004fc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6892      	ldr	r2, [r2, #8]
 8005028:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6852      	ldr	r2, [r2, #4]
 8005032:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	429a      	cmp	r2, r3
 800503c:	d103      	bne.n	8005046 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10a      	bne.n	8005092 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800508e:	bf00      	nop
 8005090:	e7fe      	b.n	8005090 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005092:	f001 fb3f 	bl	8006714 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	68f9      	ldr	r1, [r7, #12]
 80050a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050a2:	fb01 f303 	mul.w	r3, r1, r3
 80050a6:	441a      	add	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	3b01      	subs	r3, #1
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050c8:	fb01 f303 	mul.w	r3, r1, r3
 80050cc:	441a      	add	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	22ff      	movs	r2, #255	; 0xff
 80050de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3310      	adds	r3, #16
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 ff19 	bl	8005f2c <xTaskRemoveFromEventList>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d012      	beq.n	8005126 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <xQueueGenericReset+0xcc>)
 8005102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	e009      	b.n	8005126 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3310      	adds	r3, #16
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fef1 	bl	8004efe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff feec 	bl	8004efe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005126:	f001 fb25 	bl	8006774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800512a:	2301      	movs	r3, #1
}
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	e000ed04 	.word	0xe000ed04

08005138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08e      	sub	sp, #56	; 0x38
 800513c:	af02      	add	r7, sp, #8
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <xQueueGenericCreateStatic+0x52>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <xQueueGenericCreateStatic+0x56>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <xQueueGenericCreateStatic+0x58>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	e7fe      	b.n	80051a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <xQueueGenericCreateStatic+0x7e>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <xQueueGenericCreateStatic+0x82>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <xQueueGenericCreateStatic+0x84>
 80051ba:	2300      	movs	r3, #0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61fb      	str	r3, [r7, #28]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051d6:	2348      	movs	r3, #72	; 0x48
 80051d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b48      	cmp	r3, #72	; 0x48
 80051de:	d00a      	beq.n	80051f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61bb      	str	r3, [r7, #24]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00d      	beq.n	800521e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800520a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f83f 	bl	800529c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005220:	4618      	mov	r0, r3
 8005222:	3730      	adds	r7, #48	; 0x30
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericCreate+0x2a>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	613b      	str	r3, [r7, #16]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	3348      	adds	r3, #72	; 0x48
 8005260:	4618      	mov	r0, r3
 8005262:	f001 fb39 	bl	80068d8 <pvPortMalloc>
 8005266:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	3348      	adds	r3, #72	; 0x48
 8005276:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005280:	79fa      	ldrb	r2, [r7, #7]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f805 	bl	800529c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005292:	69bb      	ldr	r3, [r7, #24]
	}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e002      	b.n	80052be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ca:	2101      	movs	r1, #1
 80052cc:	69b8      	ldr	r0, [r7, #24]
 80052ce:	f7ff fecb 	bl	8005068 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052fa:	2300      	movs	r3, #0
 80052fc:	2200      	movs	r2, #0
 80052fe:	2100      	movs	r1, #0
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f837 	bl	8005374 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005306:	bf00      	nop
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800530e:	b580      	push	{r7, lr}
 8005310:	b086      	sub	sp, #24
 8005312:	af00      	add	r7, sp, #0
 8005314:	4603      	mov	r3, r0
 8005316:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005318:	2301      	movs	r3, #1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	461a      	mov	r2, r3
 8005324:	6939      	ldr	r1, [r7, #16]
 8005326:	6978      	ldr	r0, [r7, #20]
 8005328:	f7ff ff7e 	bl	8005228 <xQueueGenericCreate>
 800532c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7ff ffd3 	bl	80052da <prvInitialiseMutex>

		return xNewQueue;
 8005334:	68fb      	ldr	r3, [r7, #12]
	}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af02      	add	r7, sp, #8
 8005344:	4603      	mov	r3, r0
 8005346:	6039      	str	r1, [r7, #0]
 8005348:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800534a:	2301      	movs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2200      	movs	r2, #0
 800535a:	6939      	ldr	r1, [r7, #16]
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	f7ff feeb 	bl	8005138 <xQueueGenericCreateStatic>
 8005362:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7ff ffb8 	bl	80052da <prvInitialiseMutex>

		return xNewQueue;
 800536a:	68fb      	ldr	r3, [r7, #12]
	}
 800536c:	4618      	mov	r0, r3
 800536e:	3718      	adds	r7, #24
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	; 0x38
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10a      	bne.n	80053a6 <xQueueGenericSend+0x32>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053a2:	bf00      	nop
 80053a4:	e7fe      	b.n	80053a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d103      	bne.n	80053b4 <xQueueGenericSend+0x40>
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <xQueueGenericSend+0x44>
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <xQueueGenericSend+0x46>
 80053b8:	2300      	movs	r3, #0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <xQueueGenericSend+0x60>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d103      	bne.n	80053e2 <xQueueGenericSend+0x6e>
 80053da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericSend+0x72>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericSend+0x74>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xQueueGenericSend+0x8e>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	623b      	str	r3, [r7, #32]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005402:	f000 ff4f 	bl	80062a4 <xTaskGetSchedulerState>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xQueueGenericSend+0x9e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <xQueueGenericSend+0xa2>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xQueueGenericSend+0xa4>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xQueueGenericSend+0xbe>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	61fb      	str	r3, [r7, #28]
}
 800542e:	bf00      	nop
 8005430:	e7fe      	b.n	8005430 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005432:	f001 f96f 	bl	8006714 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <xQueueGenericSend+0xd4>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d129      	bne.n	800549c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544e:	f000 f88f 	bl	8005570 <prvCopyDataToQueue>
 8005452:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d010      	beq.n	800547e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	3324      	adds	r3, #36	; 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f000 fd63 	bl	8005f2c <xTaskRemoveFromEventList>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d013      	beq.n	8005494 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800546c:	4b3f      	ldr	r3, [pc, #252]	; (800556c <xQueueGenericSend+0x1f8>)
 800546e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	e00a      	b.n	8005494 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d007      	beq.n	8005494 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005484:	4b39      	ldr	r3, [pc, #228]	; (800556c <xQueueGenericSend+0x1f8>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005494:	f001 f96e 	bl	8006774 <vPortExitCritical>
				return pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	e063      	b.n	8005564 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054a2:	f001 f967 	bl	8006774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e05c      	b.n	8005564 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d106      	bne.n	80054be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 fd9b 	bl	8005ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054ba:	2301      	movs	r3, #1
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054be:	f001 f959 	bl	8006774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054c2:	f000 fb51 	bl	8005b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c6:	f001 f925 	bl	8006714 <vPortEnterCritical>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054d0:	b25b      	sxtb	r3, r3
 80054d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d6:	d103      	bne.n	80054e0 <xQueueGenericSend+0x16c>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d103      	bne.n	80054f6 <xQueueGenericSend+0x182>
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f6:	f001 f93d 	bl	8006774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054fa:	1d3a      	adds	r2, r7, #4
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	4611      	mov	r1, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fd8a 	bl	800601c <xTaskCheckForTimeOut>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d124      	bne.n	8005558 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005510:	f000 f8ea 	bl	80056e8 <prvIsQueueFull>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	3310      	adds	r3, #16
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fcde 	bl	8005ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552a:	f000 f88b 	bl	8005644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800552e:	f000 fb29 	bl	8005b84 <xTaskResumeAll>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	f47f af7c 	bne.w	8005432 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <xQueueGenericSend+0x1f8>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	e772      	b.n	8005432 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800554c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554e:	f000 f879 	bl	8005644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005552:	f000 fb17 	bl	8005b84 <xTaskResumeAll>
 8005556:	e76c      	b.n	8005432 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800555a:	f000 f873 	bl	8005644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800555e:	f000 fb11 	bl	8005b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005564:	4618      	mov	r0, r3
 8005566:	3738      	adds	r7, #56	; 0x38
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d14d      	bne.n	8005632 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fea0 	bl	80062e0 <xTaskPriorityDisinherit>
 80055a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	e043      	b.n	8005632 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d119      	bne.n	80055e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6858      	ldr	r0, [r3, #4]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b8:	461a      	mov	r2, r3
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	f001 fbca 	bl	8006d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	441a      	add	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d32b      	bcc.n	8005632 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	e026      	b.n	8005632 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68d8      	ldr	r0, [r3, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	461a      	mov	r2, r3
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	f001 fbb0 	bl	8006d54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	425b      	negs	r3, r3
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d207      	bcs.n	8005620 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	425b      	negs	r3, r3
 800561a:	441a      	add	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d105      	bne.n	8005632 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	3b01      	subs	r3, #1
 8005630:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800563a:	697b      	ldr	r3, [r7, #20]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800564c:	f001 f862 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005658:	e011      	b.n	800567e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d012      	beq.n	8005688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3324      	adds	r3, #36	; 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fc60 	bl	8005f2c <xTaskRemoveFromEventList>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005672:	f000 fd35 	bl	80060e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	3b01      	subs	r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800567e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dce9      	bgt.n	800565a <prvUnlockQueue+0x16>
 8005686:	e000      	b.n	800568a <prvUnlockQueue+0x46>
					break;
 8005688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	22ff      	movs	r2, #255	; 0xff
 800568e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005692:	f001 f86f 	bl	8006774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005696:	f001 f83d 	bl	8006714 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a2:	e011      	b.n	80056c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d012      	beq.n	80056d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3310      	adds	r3, #16
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fc3b 	bl	8005f2c <xTaskRemoveFromEventList>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056bc:	f000 fd10 	bl	80060e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dce9      	bgt.n	80056a4 <prvUnlockQueue+0x60>
 80056d0:	e000      	b.n	80056d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056dc:	f001 f84a 	bl	8006774 <vPortExitCritical>
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056f0:	f001 f810 	bl	8006714 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d102      	bne.n	8005706 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e001      	b.n	800570a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005706:	2300      	movs	r3, #0
 8005708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800570a:	f001 f833 	bl	8006774 <vPortExitCritical>

	return xReturn;
 800570e:	68fb      	ldr	r3, [r7, #12]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08e      	sub	sp, #56	; 0x38
 800571c:	af04      	add	r7, sp, #16
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xTaskCreateStatic+0x2a>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	623b      	str	r3, [r7, #32]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xTaskCreateStatic+0x46>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61fb      	str	r3, [r7, #28]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800575e:	2354      	movs	r3, #84	; 0x54
 8005760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b54      	cmp	r3, #84	; 0x54
 8005766:	d00a      	beq.n	800577e <xTaskCreateStatic+0x66>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61bb      	str	r3, [r7, #24]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800577e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01e      	beq.n	80057c4 <xTaskCreateStatic+0xac>
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005794:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800579e:	2300      	movs	r3, #0
 80057a0:	9303      	str	r3, [sp, #12]
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	9302      	str	r3, [sp, #8]
 80057a6:	f107 0314 	add.w	r3, r7, #20
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 f850 	bl	800585c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057be:	f000 f8d5 	bl	800596c <prvAddNewTaskToReadyList>
 80057c2:	e001      	b.n	80057c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057c8:	697b      	ldr	r3, [r7, #20]
	}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3728      	adds	r7, #40	; 0x28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b08c      	sub	sp, #48	; 0x30
 80057d6:	af04      	add	r7, sp, #16
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057e2:	88fb      	ldrh	r3, [r7, #6]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f001 f876 	bl	80068d8 <pvPortMalloc>
 80057ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057f4:	2054      	movs	r0, #84	; 0x54
 80057f6:	f001 f86f 	bl	80068d8 <pvPortMalloc>
 80057fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
 8005808:	e005      	b.n	8005816 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800580a:	6978      	ldr	r0, [r7, #20]
 800580c:	f001 f930 	bl	8006a70 <vPortFree>
 8005810:	e001      	b.n	8005816 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	2300      	movs	r3, #0
 8005828:	9303      	str	r3, [sp, #12]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	9302      	str	r3, [sp, #8]
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 f80e 	bl	800585c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005840:	69f8      	ldr	r0, [r7, #28]
 8005842:	f000 f893 	bl	800596c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e002      	b.n	8005852 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800584c:	f04f 33ff 	mov.w	r3, #4294967295
 8005850:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005852:	69bb      	ldr	r3, [r7, #24]
	}
 8005854:	4618      	mov	r0, r3
 8005856:	3720      	adds	r7, #32
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005874:	3b01      	subs	r3, #1
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f023 0307 	bic.w	r3, r3, #7
 8005882:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	617b      	str	r3, [r7, #20]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01f      	beq.n	80058ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e012      	b.n	80058d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	7819      	ldrb	r1, [r3, #0]
 80058b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	3334      	adds	r3, #52	; 0x34
 80058c0:	460a      	mov	r2, r1
 80058c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	3301      	adds	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d9e9      	bls.n	80058b0 <prvInitialiseNewTask+0x54>
 80058dc:	e000      	b.n	80058e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80058de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e8:	e003      	b.n	80058f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d901      	bls.n	80058fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058f8:	2306      	movs	r3, #6
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005900:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	2200      	movs	r2, #0
 800590c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	3304      	adds	r3, #4
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fb13 	bl	8004f3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	3318      	adds	r3, #24
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fb0e 	bl	8004f3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005926:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	f1c3 0207 	rsb	r2, r3, #7
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2200      	movs	r2, #0
 800593c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	68f9      	ldr	r1, [r7, #12]
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f000 fdb4 	bl	80064b8 <pxPortInitialiseStack>
 8005950:	4602      	mov	r2, r0
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005962:	bf00      	nop
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005974:	f000 fece 	bl	8006714 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005978:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	4a29      	ldr	r2, [pc, #164]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 8005980:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005982:	4b29      	ldr	r3, [pc, #164]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800598a:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005990:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <prvAddNewTaskToReadyList+0xb8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d110      	bne.n	80059ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005998:	f000 fbc6 	bl	8006128 <prvInitialiseTaskLists>
 800599c:	e00d      	b.n	80059ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800599e:	4b23      	ldr	r3, [pc, #140]	; (8005a2c <prvAddNewTaskToReadyList+0xc0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d802      	bhi.n	80059ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059b4:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <prvAddNewTaskToReadyList+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <prvAddNewTaskToReadyList+0xc4>)
 80059c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	2201      	movs	r2, #1
 80059ca:	409a      	lsls	r2, r3
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <prvAddNewTaskToReadyList+0xc8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	4a18      	ldr	r2, [pc, #96]	; (8005a34 <prvAddNewTaskToReadyList+0xc8>)
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <prvAddNewTaskToReadyList+0xcc>)
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7ff fab3 	bl	8004f58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059f2:	f000 febf 	bl	8006774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <prvAddNewTaskToReadyList+0xc0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <prvAddNewTaskToReadyList+0xbc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d207      	bcs.n	8005a1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <prvAddNewTaskToReadyList+0xd0>)
 8005a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1c:	bf00      	nop
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000600 	.word	0x20000600
 8005a28:	20000500 	.word	0x20000500
 8005a2c:	2000060c 	.word	0x2000060c
 8005a30:	2000061c 	.word	0x2000061c
 8005a34:	20000608 	.word	0x20000608
 8005a38:	20000504 	.word	0x20000504
 8005a3c:	e000ed04 	.word	0xe000ed04

08005a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d017      	beq.n	8005a82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a52:	4b13      	ldr	r3, [pc, #76]	; (8005aa0 <vTaskDelay+0x60>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <vTaskDelay+0x30>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	60bb      	str	r3, [r7, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a70:	f000 f87a 	bl	8005b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a74:	2100      	movs	r1, #0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fcb8 	bl	80063ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a7c:	f000 f882 	bl	8005b84 <xTaskResumeAll>
 8005a80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <vTaskDelay+0x64>)
 8005a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a98:	bf00      	nop
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20000628 	.word	0x20000628
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08a      	sub	sp, #40	; 0x28
 8005aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	1d39      	adds	r1, r7, #4
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fb fa56 	bl	8000f70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	9202      	str	r2, [sp, #8]
 8005acc:	9301      	str	r3, [sp, #4]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	491e      	ldr	r1, [pc, #120]	; (8005b50 <vTaskStartScheduler+0xa8>)
 8005ad8:	481e      	ldr	r0, [pc, #120]	; (8005b54 <vTaskStartScheduler+0xac>)
 8005ada:	f7ff fe1d 	bl	8005718 <xTaskCreateStatic>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4a1d      	ldr	r2, [pc, #116]	; (8005b58 <vTaskStartScheduler+0xb0>)
 8005ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <vTaskStartScheduler+0xb0>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aec:	2301      	movs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e001      	b.n	8005af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d116      	bne.n	8005b2a <vTaskStartScheduler+0x82>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
}
 8005b0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b10:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <vTaskStartScheduler+0xb4>)
 8005b12:	f04f 32ff 	mov.w	r2, #4294967295
 8005b16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b18:	4b11      	ldr	r3, [pc, #68]	; (8005b60 <vTaskStartScheduler+0xb8>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <vTaskStartScheduler+0xbc>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b24:	f000 fd54 	bl	80065d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b28:	e00e      	b.n	8005b48 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d10a      	bne.n	8005b48 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60fb      	str	r3, [r7, #12]
}
 8005b44:	bf00      	nop
 8005b46:	e7fe      	b.n	8005b46 <vTaskStartScheduler+0x9e>
}
 8005b48:	bf00      	nop
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	080077cc 	.word	0x080077cc
 8005b54:	080060f9 	.word	0x080060f9
 8005b58:	20000624 	.word	0x20000624
 8005b5c:	20000620 	.word	0x20000620
 8005b60:	2000060c 	.word	0x2000060c
 8005b64:	20000604 	.word	0x20000604

08005b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <vTaskSuspendAll+0x18>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	3301      	adds	r3, #1
 8005b72:	4a03      	ldr	r2, [pc, #12]	; (8005b80 <vTaskSuspendAll+0x18>)
 8005b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b76:	bf00      	nop
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	20000628 	.word	0x20000628

08005b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b92:	4b41      	ldr	r3, [pc, #260]	; (8005c98 <xTaskResumeAll+0x114>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	603b      	str	r3, [r7, #0]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bb0:	f000 fdb0 	bl	8006714 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bb4:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <xTaskResumeAll+0x114>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a37      	ldr	r2, [pc, #220]	; (8005c98 <xTaskResumeAll+0x114>)
 8005bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bbe:	4b36      	ldr	r3, [pc, #216]	; (8005c98 <xTaskResumeAll+0x114>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d161      	bne.n	8005c8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bc6:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <xTaskResumeAll+0x118>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d05d      	beq.n	8005c8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bce:	e02e      	b.n	8005c2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bd0:	4b33      	ldr	r3, [pc, #204]	; (8005ca0 <xTaskResumeAll+0x11c>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7ff fa18 	bl	8005012 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fa13 	bl	8005012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	; (8005ca4 <xTaskResumeAll+0x120>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <xTaskResumeAll+0x120>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <xTaskResumeAll+0x124>)
 8005c0c:	441a      	add	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3304      	adds	r3, #4
 8005c12:	4619      	mov	r1, r3
 8005c14:	4610      	mov	r0, r2
 8005c16:	f7ff f99f 	bl	8004f58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1e:	4b23      	ldr	r3, [pc, #140]	; (8005cac <xTaskResumeAll+0x128>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d302      	bcc.n	8005c2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c28:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <xTaskResumeAll+0x12c>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <xTaskResumeAll+0x11c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1cc      	bne.n	8005bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c3c:	f000 fb12 	bl	8006264 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c40:	4b1c      	ldr	r3, [pc, #112]	; (8005cb4 <xTaskResumeAll+0x130>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c4c:	f000 f836 	bl	8005cbc <xTaskIncrementTick>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c56:	4b16      	ldr	r3, [pc, #88]	; (8005cb0 <xTaskResumeAll+0x12c>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f1      	bne.n	8005c4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c68:	4b12      	ldr	r3, [pc, #72]	; (8005cb4 <xTaskResumeAll+0x130>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <xTaskResumeAll+0x12c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d009      	beq.n	8005c8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c7a:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <xTaskResumeAll+0x134>)
 8005c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c8a:	f000 fd73 	bl	8006774 <vPortExitCritical>

	return xAlreadyYielded;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000628 	.word	0x20000628
 8005c9c:	20000600 	.word	0x20000600
 8005ca0:	200005c0 	.word	0x200005c0
 8005ca4:	20000608 	.word	0x20000608
 8005ca8:	20000504 	.word	0x20000504
 8005cac:	20000500 	.word	0x20000500
 8005cb0:	20000614 	.word	0x20000614
 8005cb4:	20000610 	.word	0x20000610
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc6:	4b4e      	ldr	r3, [pc, #312]	; (8005e00 <xTaskIncrementTick+0x144>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 808e 	bne.w	8005dec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <xTaskIncrementTick+0x148>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cd8:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <xTaskIncrementTick+0x148>)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d120      	bne.n	8005d26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ce4:	4b48      	ldr	r3, [pc, #288]	; (8005e08 <xTaskIncrementTick+0x14c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	603b      	str	r3, [r7, #0]
}
 8005d00:	bf00      	nop
 8005d02:	e7fe      	b.n	8005d02 <xTaskIncrementTick+0x46>
 8005d04:	4b40      	ldr	r3, [pc, #256]	; (8005e08 <xTaskIncrementTick+0x14c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	4b40      	ldr	r3, [pc, #256]	; (8005e0c <xTaskIncrementTick+0x150>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a3e      	ldr	r2, [pc, #248]	; (8005e08 <xTaskIncrementTick+0x14c>)
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4a3e      	ldr	r2, [pc, #248]	; (8005e0c <xTaskIncrementTick+0x150>)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <xTaskIncrementTick+0x154>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a3c      	ldr	r2, [pc, #240]	; (8005e10 <xTaskIncrementTick+0x154>)
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	f000 fa9f 	bl	8006264 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d26:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <xTaskIncrementTick+0x158>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d348      	bcc.n	8005dc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d30:	4b35      	ldr	r3, [pc, #212]	; (8005e08 <xTaskIncrementTick+0x14c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <xTaskIncrementTick+0x158>)
 8005d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d40:	601a      	str	r2, [r3, #0]
					break;
 8005d42:	e03e      	b.n	8005dc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d44:	4b30      	ldr	r3, [pc, #192]	; (8005e08 <xTaskIncrementTick+0x14c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d203      	bcs.n	8005d64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <xTaskIncrementTick+0x158>)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d62:	e02e      	b.n	8005dc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7ff f952 	bl	8005012 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3318      	adds	r3, #24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff f949 	bl	8005012 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	2201      	movs	r2, #1
 8005d86:	409a      	lsls	r2, r3
 8005d88:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <xTaskIncrementTick+0x15c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <xTaskIncrementTick+0x15c>)
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4a1f      	ldr	r2, [pc, #124]	; (8005e1c <xTaskIncrementTick+0x160>)
 8005da0:	441a      	add	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4610      	mov	r0, r2
 8005daa:	f7ff f8d5 	bl	8004f58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db2:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <xTaskIncrementTick+0x164>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3b9      	bcc.n	8005d30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc0:	e7b6      	b.n	8005d30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005dc2:	4b17      	ldr	r3, [pc, #92]	; (8005e20 <xTaskIncrementTick+0x164>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc8:	4914      	ldr	r1, [pc, #80]	; (8005e1c <xTaskIncrementTick+0x160>)
 8005dca:	4613      	mov	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	440b      	add	r3, r1
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d901      	bls.n	8005dde <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dde:	4b11      	ldr	r3, [pc, #68]	; (8005e24 <xTaskIncrementTick+0x168>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	e004      	b.n	8005df6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <xTaskIncrementTick+0x16c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <xTaskIncrementTick+0x16c>)
 8005df4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005df6:	697b      	ldr	r3, [r7, #20]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000628 	.word	0x20000628
 8005e04:	20000604 	.word	0x20000604
 8005e08:	200005b8 	.word	0x200005b8
 8005e0c:	200005bc 	.word	0x200005bc
 8005e10:	20000618 	.word	0x20000618
 8005e14:	20000620 	.word	0x20000620
 8005e18:	20000608 	.word	0x20000608
 8005e1c:	20000504 	.word	0x20000504
 8005e20:	20000500 	.word	0x20000500
 8005e24:	20000614 	.word	0x20000614
 8005e28:	20000610 	.word	0x20000610

08005e2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e32:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <vTaskSwitchContext+0xa4>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e3a:	4b26      	ldr	r3, [pc, #152]	; (8005ed4 <vTaskSwitchContext+0xa8>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e40:	e03f      	b.n	8005ec2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005e42:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <vTaskSwitchContext+0xa8>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e48:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <vTaskSwitchContext+0xac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	fab3 f383 	clz	r3, r3
 8005e54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	f1c3 031f 	rsb	r3, r3, #31
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	491f      	ldr	r1, [pc, #124]	; (8005edc <vTaskSwitchContext+0xb0>)
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	607b      	str	r3, [r7, #4]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <vTaskSwitchContext+0x5a>
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4a12      	ldr	r2, [pc, #72]	; (8005edc <vTaskSwitchContext+0xb0>)
 8005e94:	4413      	add	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d104      	bne.n	8005eb8 <vTaskSwitchContext+0x8c>
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	605a      	str	r2, [r3, #4]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <vTaskSwitchContext+0xb4>)
 8005ec0:	6013      	str	r3, [r2, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	20000628 	.word	0x20000628
 8005ed4:	20000614 	.word	0x20000614
 8005ed8:	20000608 	.word	0x20000608
 8005edc:	20000504 	.word	0x20000504
 8005ee0:	20000500 	.word	0x20000500

08005ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	60fb      	str	r3, [r7, #12]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <vTaskPlaceOnEventList+0x44>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3318      	adds	r3, #24
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff f844 	bl	8004fa0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6838      	ldr	r0, [r7, #0]
 8005f1c:	f000 fa66 	bl	80063ec <prvAddCurrentTaskToDelayedList>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000500 	.word	0x20000500

08005f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	60fb      	str	r3, [r7, #12]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff f858 	bl	8005012 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f62:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <xTaskRemoveFromEventList+0xac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d11c      	bne.n	8005fa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff f84f 	bl	8005012 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2201      	movs	r2, #1
 8005f7a:	409a      	lsls	r2, r3
 8005f7c:	4b17      	ldr	r3, [pc, #92]	; (8005fdc <xTaskRemoveFromEventList+0xb0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <xTaskRemoveFromEventList+0xb0>)
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <xTaskRemoveFromEventList+0xb4>)
 8005f94:	441a      	add	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f7fe ffdb 	bl	8004f58 <vListInsertEnd>
 8005fa2:	e005      	b.n	8005fb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	3318      	adds	r3, #24
 8005fa8:	4619      	mov	r1, r3
 8005faa:	480e      	ldr	r0, [pc, #56]	; (8005fe4 <xTaskRemoveFromEventList+0xb8>)
 8005fac:	f7fe ffd4 	bl	8004f58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <xTaskRemoveFromEventList+0xbc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d905      	bls.n	8005fca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <xTaskRemoveFromEventList+0xc0>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	e001      	b.n	8005fce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000628 	.word	0x20000628
 8005fdc:	20000608 	.word	0x20000608
 8005fe0:	20000504 	.word	0x20000504
 8005fe4:	200005c0 	.word	0x200005c0
 8005fe8:	20000500 	.word	0x20000500
 8005fec:	20000614 	.word	0x20000614

08005ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ff8:	4b06      	ldr	r3, [pc, #24]	; (8006014 <vTaskInternalSetTimeOutState+0x24>)
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006000:	4b05      	ldr	r3, [pc, #20]	; (8006018 <vTaskInternalSetTimeOutState+0x28>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	605a      	str	r2, [r3, #4]
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	20000618 	.word	0x20000618
 8006018:	20000604 	.word	0x20000604

0800601c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b088      	sub	sp, #32
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10a      	bne.n	8006042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
 8006040:	e7fe      	b.n	8006040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604c:	f383 8811 	msr	BASEPRI, r3
 8006050:	f3bf 8f6f 	isb	sy
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800605e:	f000 fb59 	bl	8006714 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006062:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <xTaskCheckForTimeOut+0xbc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d102      	bne.n	8006082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e023      	b.n	80060ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <xTaskCheckForTimeOut+0xc0>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d007      	beq.n	800609e <xTaskCheckForTimeOut+0x82>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	d302      	bcc.n	800609e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	e015      	b.n	80060ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d20b      	bcs.n	80060c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff ff9b 	bl	8005ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	e004      	b.n	80060ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060ca:	f000 fb53 	bl	8006774 <vPortExitCritical>

	return xReturn;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000604 	.word	0x20000604
 80060dc:	20000618 	.word	0x20000618

080060e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060e4:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <vTaskMissedYield+0x14>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]
}
 80060ea:	bf00      	nop
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	20000614 	.word	0x20000614

080060f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006100:	f000 f852 	bl	80061a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <prvIdleTask+0x28>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d9f9      	bls.n	8006100 <prvIdleTask+0x8>
			{
				taskYIELD();
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <prvIdleTask+0x2c>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800611c:	e7f0      	b.n	8006100 <prvIdleTask+0x8>
 800611e:	bf00      	nop
 8006120:	20000504 	.word	0x20000504
 8006124:	e000ed04 	.word	0xe000ed04

08006128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	e00c      	b.n	800614e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4a12      	ldr	r2, [pc, #72]	; (8006188 <prvInitialiseTaskLists+0x60>)
 8006140:	4413      	add	r3, r2
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fedb 	bl	8004efe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3301      	adds	r3, #1
 800614c:	607b      	str	r3, [r7, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b06      	cmp	r3, #6
 8006152:	d9ef      	bls.n	8006134 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006154:	480d      	ldr	r0, [pc, #52]	; (800618c <prvInitialiseTaskLists+0x64>)
 8006156:	f7fe fed2 	bl	8004efe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800615a:	480d      	ldr	r0, [pc, #52]	; (8006190 <prvInitialiseTaskLists+0x68>)
 800615c:	f7fe fecf 	bl	8004efe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006160:	480c      	ldr	r0, [pc, #48]	; (8006194 <prvInitialiseTaskLists+0x6c>)
 8006162:	f7fe fecc 	bl	8004efe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006166:	480c      	ldr	r0, [pc, #48]	; (8006198 <prvInitialiseTaskLists+0x70>)
 8006168:	f7fe fec9 	bl	8004efe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800616c:	480b      	ldr	r0, [pc, #44]	; (800619c <prvInitialiseTaskLists+0x74>)
 800616e:	f7fe fec6 	bl	8004efe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <prvInitialiseTaskLists+0x78>)
 8006174:	4a05      	ldr	r2, [pc, #20]	; (800618c <prvInitialiseTaskLists+0x64>)
 8006176:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <prvInitialiseTaskLists+0x7c>)
 800617a:	4a05      	ldr	r2, [pc, #20]	; (8006190 <prvInitialiseTaskLists+0x68>)
 800617c:	601a      	str	r2, [r3, #0]
}
 800617e:	bf00      	nop
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000504 	.word	0x20000504
 800618c:	20000590 	.word	0x20000590
 8006190:	200005a4 	.word	0x200005a4
 8006194:	200005c0 	.word	0x200005c0
 8006198:	200005d4 	.word	0x200005d4
 800619c:	200005ec 	.word	0x200005ec
 80061a0:	200005b8 	.word	0x200005b8
 80061a4:	200005bc 	.word	0x200005bc

080061a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061ae:	e019      	b.n	80061e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061b0:	f000 fab0 	bl	8006714 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061b4:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <prvCheckTasksWaitingTermination+0x50>)
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe ff26 	bl	8005012 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <prvCheckTasksWaitingTermination+0x54>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <prvCheckTasksWaitingTermination+0x54>)
 80061ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061d0:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <prvCheckTasksWaitingTermination+0x58>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	3b01      	subs	r3, #1
 80061d6:	4a0a      	ldr	r2, [pc, #40]	; (8006200 <prvCheckTasksWaitingTermination+0x58>)
 80061d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061da:	f000 facb 	bl	8006774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f810 	bl	8006204 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061e4:	4b06      	ldr	r3, [pc, #24]	; (8006200 <prvCheckTasksWaitingTermination+0x58>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e1      	bne.n	80061b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061ec:	bf00      	nop
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200005d4 	.word	0x200005d4
 80061fc:	20000600 	.word	0x20000600
 8006200:	200005e8 	.word	0x200005e8

08006204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fc28 	bl	8006a70 <vPortFree>
				vPortFree( pxTCB );
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc25 	bl	8006a70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006226:	e018      	b.n	800625a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800622e:	2b01      	cmp	r3, #1
 8006230:	d103      	bne.n	800623a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc1c 	bl	8006a70 <vPortFree>
	}
 8006238:	e00f      	b.n	800625a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006240:	2b02      	cmp	r3, #2
 8006242:	d00a      	beq.n	800625a <prvDeleteTCB+0x56>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60fb      	str	r3, [r7, #12]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <prvDeleteTCB+0x54>
	}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <prvResetNextTaskUnblockTime+0x38>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d104      	bne.n	800627e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006276:	f04f 32ff 	mov.w	r2, #4294967295
 800627a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800627c:	e008      	b.n	8006290 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627e:	4b07      	ldr	r3, [pc, #28]	; (800629c <prvResetNextTaskUnblockTime+0x38>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <prvResetNextTaskUnblockTime+0x3c>)
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	200005b8 	.word	0x200005b8
 80062a0:	20000620 	.word	0x20000620

080062a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <xTaskGetSchedulerState+0x34>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80062b2:	2301      	movs	r3, #1
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	e008      	b.n	80062ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <xTaskGetSchedulerState+0x38>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d102      	bne.n	80062c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80062c0:	2302      	movs	r3, #2
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	e001      	b.n	80062ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80062c6:	2300      	movs	r3, #0
 80062c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80062ca:	687b      	ldr	r3, [r7, #4]
	}
 80062cc:	4618      	mov	r0, r3
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	2000060c 	.word	0x2000060c
 80062dc:	20000628 	.word	0x20000628

080062e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d06e      	beq.n	80063d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80062f6:	4b3a      	ldr	r3, [pc, #232]	; (80063e0 <xTaskPriorityDisinherit+0x100>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d00a      	beq.n	8006316 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60bb      	str	r3, [r7, #8]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	429a      	cmp	r2, r3
 8006348:	d044      	beq.n	80063d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634e:	2b00      	cmp	r3, #0
 8006350:	d140      	bne.n	80063d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	3304      	adds	r3, #4
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fe5b 	bl	8005012 <uxListRemove>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d115      	bne.n	800638e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006366:	491f      	ldr	r1, [pc, #124]	; (80063e4 <xTaskPriorityDisinherit+0x104>)
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xTaskPriorityDisinherit+0xae>
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	2201      	movs	r2, #1
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	43da      	mvns	r2, r3
 8006384:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <xTaskPriorityDisinherit+0x108>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4013      	ands	r3, r2
 800638a:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <xTaskPriorityDisinherit+0x108>)
 800638c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	f1c3 0207 	rsb	r2, r3, #7
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	2201      	movs	r2, #1
 80063a8:	409a      	lsls	r2, r3
 80063aa:	4b0f      	ldr	r3, [pc, #60]	; (80063e8 <xTaskPriorityDisinherit+0x108>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <xTaskPriorityDisinherit+0x108>)
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <xTaskPriorityDisinherit+0x104>)
 80063c2:	441a      	add	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7fe fdc4 	bl	8004f58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063d4:	697b      	ldr	r3, [r7, #20]
	}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000500 	.word	0x20000500
 80063e4:	20000504 	.word	0x20000504
 80063e8:	20000608 	.word	0x20000608

080063ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063f6:	4b29      	ldr	r3, [pc, #164]	; (800649c <prvAddCurrentTaskToDelayedList+0xb0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063fc:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3304      	adds	r3, #4
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe05 	bl	8005012 <uxListRemove>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006414:	2201      	movs	r2, #1
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	43da      	mvns	r2, r3
 800641c:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4013      	ands	r3, r2
 8006422:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006424:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d10a      	bne.n	8006444 <prvAddCurrentTaskToDelayedList+0x58>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006434:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	481a      	ldr	r0, [pc, #104]	; (80064a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800643e:	f7fe fd8b 	bl	8004f58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006442:	e026      	b.n	8006492 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4413      	add	r3, r2
 800644a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800644c:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	429a      	cmp	r2, r3
 800645a:	d209      	bcs.n	8006470 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800645c:	4b13      	ldr	r3, [pc, #76]	; (80064ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3304      	adds	r3, #4
 8006466:	4619      	mov	r1, r3
 8006468:	4610      	mov	r0, r2
 800646a:	f7fe fd99 	bl	8004fa0 <vListInsert>
}
 800646e:	e010      	b.n	8006492 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3304      	adds	r3, #4
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f7fe fd8f 	bl	8004fa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	d202      	bcs.n	8006492 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800648c:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6013      	str	r3, [r2, #0]
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000604 	.word	0x20000604
 80064a0:	20000500 	.word	0x20000500
 80064a4:	20000608 	.word	0x20000608
 80064a8:	200005ec 	.word	0x200005ec
 80064ac:	200005bc 	.word	0x200005bc
 80064b0:	200005b8 	.word	0x200005b8
 80064b4:	20000620 	.word	0x20000620

080064b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3b04      	subs	r3, #4
 80064c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3b04      	subs	r3, #4
 80064d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064e8:	4a0c      	ldr	r2, [pc, #48]	; (800651c <pxPortInitialiseStack+0x64>)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3b14      	subs	r3, #20
 80064f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f06f 0202 	mvn.w	r2, #2
 8006506:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3b20      	subs	r3, #32
 800650c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800650e:	68fb      	ldr	r3, [r7, #12]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	08006521 	.word	0x08006521

08006520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <prvTaskExitError+0x54>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d00a      	beq.n	800654a <prvTaskExitError+0x2a>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60fb      	str	r3, [r7, #12]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <prvTaskExitError+0x28>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
}
 800655c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800655e:	bf00      	nop
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0fc      	beq.n	8006560 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	20000014 	.word	0x20000014
	...

08006580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	4770      	bx	lr
 800659c:	f3af 8000 	nop.w

080065a0 <pxCurrentTCBConst2>:
 80065a0:	20000500 	.word	0x20000500
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80065a8:	4808      	ldr	r0, [pc, #32]	; (80065cc <prvPortStartFirstTask+0x24>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8814 	msr	CONTROL, r0
 80065ba:	b662      	cpsie	i
 80065bc:	b661      	cpsie	f
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	df00      	svc	0
 80065c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065ca:	bf00      	nop
 80065cc:	e000ed08 	.word	0xe000ed08

080065d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065d6:	4b46      	ldr	r3, [pc, #280]	; (80066f0 <xPortStartScheduler+0x120>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a46      	ldr	r2, [pc, #280]	; (80066f4 <xPortStartScheduler+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10a      	bne.n	80065f6 <xPortStartScheduler+0x26>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065f6:	4b3e      	ldr	r3, [pc, #248]	; (80066f0 <xPortStartScheduler+0x120>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a3f      	ldr	r2, [pc, #252]	; (80066f8 <xPortStartScheduler+0x128>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10a      	bne.n	8006616 <xPortStartScheduler+0x46>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <xPortStartScheduler+0x12c>)
 8006618:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	22ff      	movs	r2, #255	; 0xff
 8006626:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006638:	b2da      	uxtb	r2, r3
 800663a:	4b31      	ldr	r3, [pc, #196]	; (8006700 <xPortStartScheduler+0x130>)
 800663c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800663e:	4b31      	ldr	r3, [pc, #196]	; (8006704 <xPortStartScheduler+0x134>)
 8006640:	2207      	movs	r2, #7
 8006642:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006644:	e009      	b.n	800665a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006646:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <xPortStartScheduler+0x134>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3b01      	subs	r3, #1
 800664c:	4a2d      	ldr	r2, [pc, #180]	; (8006704 <xPortStartScheduler+0x134>)
 800664e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	b2db      	uxtb	r3, r3
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	b2db      	uxtb	r3, r3
 8006658:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d0ef      	beq.n	8006646 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006666:	4b27      	ldr	r3, [pc, #156]	; (8006704 <xPortStartScheduler+0x134>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1c3 0307 	rsb	r3, r3, #7
 800666e:	2b04      	cmp	r3, #4
 8006670:	d00a      	beq.n	8006688 <xPortStartScheduler+0xb8>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60bb      	str	r3, [r7, #8]
}
 8006684:	bf00      	nop
 8006686:	e7fe      	b.n	8006686 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006688:	4b1e      	ldr	r3, [pc, #120]	; (8006704 <xPortStartScheduler+0x134>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	021b      	lsls	r3, r3, #8
 800668e:	4a1d      	ldr	r2, [pc, #116]	; (8006704 <xPortStartScheduler+0x134>)
 8006690:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <xPortStartScheduler+0x134>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <xPortStartScheduler+0x134>)
 800669c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80066a6:	4b18      	ldr	r3, [pc, #96]	; (8006708 <xPortStartScheduler+0x138>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a17      	ldr	r2, [pc, #92]	; (8006708 <xPortStartScheduler+0x138>)
 80066ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <xPortStartScheduler+0x138>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <xPortStartScheduler+0x138>)
 80066b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80066bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066be:	f000 f8dd 	bl	800687c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066c2:	4b12      	ldr	r3, [pc, #72]	; (800670c <xPortStartScheduler+0x13c>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066c8:	f000 f8fc 	bl	80068c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <xPortStartScheduler+0x140>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a0f      	ldr	r2, [pc, #60]	; (8006710 <xPortStartScheduler+0x140>)
 80066d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80066d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066d8:	f7ff ff66 	bl	80065a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066dc:	f7ff fba6 	bl	8005e2c <vTaskSwitchContext>
	prvTaskExitError();
 80066e0:	f7ff ff1e 	bl	8006520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	e000ed00 	.word	0xe000ed00
 80066f4:	410fc271 	.word	0x410fc271
 80066f8:	410fc270 	.word	0x410fc270
 80066fc:	e000e400 	.word	0xe000e400
 8006700:	2000062c 	.word	0x2000062c
 8006704:	20000630 	.word	0x20000630
 8006708:	e000ed20 	.word	0xe000ed20
 800670c:	20000014 	.word	0x20000014
 8006710:	e000ef34 	.word	0xe000ef34

08006714 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	607b      	str	r3, [r7, #4]
}
 800672c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800672e:	4b0f      	ldr	r3, [pc, #60]	; (800676c <vPortEnterCritical+0x58>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3301      	adds	r3, #1
 8006734:	4a0d      	ldr	r2, [pc, #52]	; (800676c <vPortEnterCritical+0x58>)
 8006736:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <vPortEnterCritical+0x58>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d10f      	bne.n	8006760 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006740:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <vPortEnterCritical+0x5c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <vPortEnterCritical+0x4c>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	603b      	str	r3, [r7, #0]
}
 800675c:	bf00      	nop
 800675e:	e7fe      	b.n	800675e <vPortEnterCritical+0x4a>
	}
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000014 	.word	0x20000014
 8006770:	e000ed04 	.word	0xe000ed04

08006774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <vPortExitCritical+0x50>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <vPortExitCritical+0x24>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	607b      	str	r3, [r7, #4]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <vPortExitCritical+0x50>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3b01      	subs	r3, #1
 800679e:	4a09      	ldr	r2, [pc, #36]	; (80067c4 <vPortExitCritical+0x50>)
 80067a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <vPortExitCritical+0x50>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d105      	bne.n	80067b6 <vPortExitCritical+0x42>
 80067aa:	2300      	movs	r3, #0
 80067ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067b6:	bf00      	nop
 80067b8:	370c      	adds	r7, #12
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20000014 	.word	0x20000014
	...

080067d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067d0:	f3ef 8009 	mrs	r0, PSP
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4b15      	ldr	r3, [pc, #84]	; (8006830 <pxCurrentTCBConst>)
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f01e 0f10 	tst.w	lr, #16
 80067e0:	bf08      	it	eq
 80067e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	6010      	str	r0, [r2, #0]
 80067ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067f4:	f380 8811 	msr	BASEPRI, r0
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f7ff fb14 	bl	8005e2c <vTaskSwitchContext>
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f380 8811 	msr	BASEPRI, r0
 800680c:	bc09      	pop	{r0, r3}
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	6808      	ldr	r0, [r1, #0]
 8006812:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006816:	f01e 0f10 	tst.w	lr, #16
 800681a:	bf08      	it	eq
 800681c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006820:	f380 8809 	msr	PSP, r0
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst>:
 8006830:	20000500 	.word	0x20000500
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	607b      	str	r3, [r7, #4]
}
 8006850:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006852:	f7ff fa33 	bl	8005cbc <xTaskIncrementTick>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800685c:	4b06      	ldr	r3, [pc, #24]	; (8006878 <SysTick_Handler+0x40>)
 800685e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006870:	bf00      	nop
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <vPortSetupTimerInterrupt+0x34>)
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <vPortSetupTimerInterrupt+0x38>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <vPortSetupTimerInterrupt+0x3c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <vPortSetupTimerInterrupt+0x40>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <vPortSetupTimerInterrupt+0x44>)
 800689a:	3b01      	subs	r3, #1
 800689c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800689e:	4b04      	ldr	r3, [pc, #16]	; (80068b0 <vPortSetupTimerInterrupt+0x34>)
 80068a0:	2207      	movs	r2, #7
 80068a2:	601a      	str	r2, [r3, #0]
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000e010 	.word	0xe000e010
 80068b4:	e000e018 	.word	0xe000e018
 80068b8:	20000008 	.word	0x20000008
 80068bc:	10624dd3 	.word	0x10624dd3
 80068c0:	e000e014 	.word	0xe000e014

080068c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80068d4 <vPortEnableVFP+0x10>
 80068c8:	6801      	ldr	r1, [r0, #0]
 80068ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80068ce:	6001      	str	r1, [r0, #0]
 80068d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068d2:	bf00      	nop
 80068d4:	e000ed88 	.word	0xe000ed88

080068d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068e4:	f7ff f940 	bl	8005b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068e8:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <pvPortMalloc+0x180>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068f0:	f000 f920 	bl	8006b34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068f4:	4b59      	ldr	r3, [pc, #356]	; (8006a5c <pvPortMalloc+0x184>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f040 8093 	bne.w	8006a28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01d      	beq.n	8006944 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006908:	2208      	movs	r2, #8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d014      	beq.n	8006944 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f023 0307 	bic.w	r3, r3, #7
 8006920:	3308      	adds	r3, #8
 8006922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <pvPortMalloc+0x6c>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d06e      	beq.n	8006a28 <pvPortMalloc+0x150>
 800694a:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <pvPortMalloc+0x188>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d869      	bhi.n	8006a28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006954:	4b43      	ldr	r3, [pc, #268]	; (8006a64 <pvPortMalloc+0x18c>)
 8006956:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006958:	4b42      	ldr	r3, [pc, #264]	; (8006a64 <pvPortMalloc+0x18c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800695e:	e004      	b.n	800696a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	429a      	cmp	r2, r3
 8006972:	d903      	bls.n	800697c <pvPortMalloc+0xa4>
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f1      	bne.n	8006960 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800697c:	4b36      	ldr	r3, [pc, #216]	; (8006a58 <pvPortMalloc+0x180>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	429a      	cmp	r2, r3
 8006984:	d050      	beq.n	8006a28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2208      	movs	r2, #8
 800698c:	4413      	add	r3, r2
 800698e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	2308      	movs	r3, #8
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d91f      	bls.n	80069e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <pvPortMalloc+0xf8>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	613b      	str	r3, [r7, #16]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069e2:	69b8      	ldr	r0, [r7, #24]
 80069e4:	f000 f908 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069e8:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <pvPortMalloc+0x188>)
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <pvPortMalloc+0x188>)
 80069f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069f6:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <pvPortMalloc+0x188>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <pvPortMalloc+0x190>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d203      	bcs.n	8006a0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a02:	4b17      	ldr	r3, [pc, #92]	; (8006a60 <pvPortMalloc+0x188>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <pvPortMalloc+0x190>)
 8006a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	4b13      	ldr	r3, [pc, #76]	; (8006a5c <pvPortMalloc+0x184>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <pvPortMalloc+0x194>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <pvPortMalloc+0x194>)
 8006a26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a28:	f7ff f8ac 	bl	8005b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <pvPortMalloc+0x174>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	60fb      	str	r3, [r7, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <pvPortMalloc+0x172>
	return pvReturn;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3728      	adds	r7, #40	; 0x28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	2000423c 	.word	0x2000423c
 8006a5c:	20004250 	.word	0x20004250
 8006a60:	20004240 	.word	0x20004240
 8006a64:	20004234 	.word	0x20004234
 8006a68:	20004244 	.word	0x20004244
 8006a6c:	20004248 	.word	0x20004248

08006a70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d04d      	beq.n	8006b1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a82:	2308      	movs	r3, #8
 8006a84:	425b      	negs	r3, r3
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	4b24      	ldr	r3, [pc, #144]	; (8006b28 <vPortFree+0xb8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <vPortFree+0x44>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60fb      	str	r3, [r7, #12]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <vPortFree+0x62>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60bb      	str	r3, [r7, #8]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4b14      	ldr	r3, [pc, #80]	; (8006b28 <vPortFree+0xb8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01e      	beq.n	8006b1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11a      	bne.n	8006b1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <vPortFree+0xb8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006af8:	f7ff f836 	bl	8005b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <vPortFree+0xbc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4413      	add	r3, r2
 8006b06:	4a09      	ldr	r2, [pc, #36]	; (8006b2c <vPortFree+0xbc>)
 8006b08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f000 f874 	bl	8006bf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <vPortFree+0xc0>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3301      	adds	r3, #1
 8006b16:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <vPortFree+0xc0>)
 8006b18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b1a:	f7ff f833 	bl	8005b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20004250 	.word	0x20004250
 8006b2c:	20004240 	.word	0x20004240
 8006b30:	2000424c 	.word	0x2000424c

08006b34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <prvHeapInit+0xac>)
 8006b42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00c      	beq.n	8006b68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3307      	adds	r3, #7
 8006b52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0307 	bic.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	4a1f      	ldr	r2, [pc, #124]	; (8006be0 <prvHeapInit+0xac>)
 8006b64:	4413      	add	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b6c:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <prvHeapInit+0xb0>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b72:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <prvHeapInit+0xb0>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b80:	2208      	movs	r2, #8
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0307 	bic.w	r3, r3, #7
 8006b8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <prvHeapInit+0xb4>)
 8006b94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b96:	4b14      	ldr	r3, [pc, #80]	; (8006be8 <prvHeapInit+0xb4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b9e:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <prvHeapInit+0xb4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <prvHeapInit+0xb4>)
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <prvHeapInit+0xb8>)
 8006bc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <prvHeapInit+0xbc>)
 8006bca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <prvHeapInit+0xc0>)
 8006bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006bd2:	601a      	str	r2, [r3, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	20000634 	.word	0x20000634
 8006be4:	20004234 	.word	0x20004234
 8006be8:	2000423c 	.word	0x2000423c
 8006bec:	20004244 	.word	0x20004244
 8006bf0:	20004240 	.word	0x20004240
 8006bf4:	20004250 	.word	0x20004250

08006bf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c00:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <prvInsertBlockIntoFreeList+0xac>)
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	e002      	b.n	8006c0c <prvInsertBlockIntoFreeList+0x14>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d8f7      	bhi.n	8006c06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	4413      	add	r3, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d108      	bne.n	8006c3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	441a      	add	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d118      	bne.n	8006c80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b15      	ldr	r3, [pc, #84]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d00d      	beq.n	8006c76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	441a      	add	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e008      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e003      	b.n	8006c88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d002      	beq.n	8006c96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20004234 	.word	0x20004234
 8006ca8:	2000423c 	.word	0x2000423c

08006cac <_vsiprintf_r>:
 8006cac:	b500      	push	{lr}
 8006cae:	b09b      	sub	sp, #108	; 0x6c
 8006cb0:	9100      	str	r1, [sp, #0]
 8006cb2:	9104      	str	r1, [sp, #16]
 8006cb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cb8:	9105      	str	r1, [sp, #20]
 8006cba:	9102      	str	r1, [sp, #8]
 8006cbc:	4905      	ldr	r1, [pc, #20]	; (8006cd4 <_vsiprintf_r+0x28>)
 8006cbe:	9103      	str	r1, [sp, #12]
 8006cc0:	4669      	mov	r1, sp
 8006cc2:	f000 f9a7 	bl	8007014 <_svfiprintf_r>
 8006cc6:	9b00      	ldr	r3, [sp, #0]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	b01b      	add	sp, #108	; 0x6c
 8006cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cd2:	bf00      	nop
 8006cd4:	ffff0208 	.word	0xffff0208

08006cd8 <vsiprintf>:
 8006cd8:	4613      	mov	r3, r2
 8006cda:	460a      	mov	r2, r1
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <vsiprintf+0x10>)
 8006ce0:	6800      	ldr	r0, [r0, #0]
 8006ce2:	f7ff bfe3 	b.w	8006cac <_vsiprintf_r>
 8006ce6:	bf00      	nop
 8006ce8:	20000064 	.word	0x20000064

08006cec <memset>:
 8006cec:	4402      	add	r2, r0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <memset+0xa>
 8006cf4:	4770      	bx	lr
 8006cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfa:	e7f9      	b.n	8006cf0 <memset+0x4>

08006cfc <__errno>:
 8006cfc:	4b01      	ldr	r3, [pc, #4]	; (8006d04 <__errno+0x8>)
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	20000064 	.word	0x20000064

08006d08 <__libc_init_array>:
 8006d08:	b570      	push	{r4, r5, r6, lr}
 8006d0a:	4d0d      	ldr	r5, [pc, #52]	; (8006d40 <__libc_init_array+0x38>)
 8006d0c:	4c0d      	ldr	r4, [pc, #52]	; (8006d44 <__libc_init_array+0x3c>)
 8006d0e:	1b64      	subs	r4, r4, r5
 8006d10:	10a4      	asrs	r4, r4, #2
 8006d12:	2600      	movs	r6, #0
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	d109      	bne.n	8006d2c <__libc_init_array+0x24>
 8006d18:	4d0b      	ldr	r5, [pc, #44]	; (8006d48 <__libc_init_array+0x40>)
 8006d1a:	4c0c      	ldr	r4, [pc, #48]	; (8006d4c <__libc_init_array+0x44>)
 8006d1c:	f000 fc6a 	bl	80075f4 <_init>
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	2600      	movs	r6, #0
 8006d26:	42a6      	cmp	r6, r4
 8006d28:	d105      	bne.n	8006d36 <__libc_init_array+0x2e>
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d30:	4798      	blx	r3
 8006d32:	3601      	adds	r6, #1
 8006d34:	e7ee      	b.n	8006d14 <__libc_init_array+0xc>
 8006d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3a:	4798      	blx	r3
 8006d3c:	3601      	adds	r6, #1
 8006d3e:	e7f2      	b.n	8006d26 <__libc_init_array+0x1e>
 8006d40:	08007828 	.word	0x08007828
 8006d44:	08007828 	.word	0x08007828
 8006d48:	08007828 	.word	0x08007828
 8006d4c:	0800782c 	.word	0x0800782c

08006d50 <__retarget_lock_acquire_recursive>:
 8006d50:	4770      	bx	lr

08006d52 <__retarget_lock_release_recursive>:
 8006d52:	4770      	bx	lr

08006d54 <memcpy>:
 8006d54:	440a      	add	r2, r1
 8006d56:	4291      	cmp	r1, r2
 8006d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d5c:	d100      	bne.n	8006d60 <memcpy+0xc>
 8006d5e:	4770      	bx	lr
 8006d60:	b510      	push	{r4, lr}
 8006d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	d1f9      	bne.n	8006d62 <memcpy+0xe>
 8006d6e:	bd10      	pop	{r4, pc}

08006d70 <_free_r>:
 8006d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d72:	2900      	cmp	r1, #0
 8006d74:	d044      	beq.n	8006e00 <_free_r+0x90>
 8006d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d7a:	9001      	str	r0, [sp, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d82:	bfb8      	it	lt
 8006d84:	18e4      	addlt	r4, r4, r3
 8006d86:	f000 f8df 	bl	8006f48 <__malloc_lock>
 8006d8a:	4a1e      	ldr	r2, [pc, #120]	; (8006e04 <_free_r+0x94>)
 8006d8c:	9801      	ldr	r0, [sp, #4]
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b933      	cbnz	r3, 8006da0 <_free_r+0x30>
 8006d92:	6063      	str	r3, [r4, #4]
 8006d94:	6014      	str	r4, [r2, #0]
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f000 b8da 	b.w	8006f54 <__malloc_unlock>
 8006da0:	42a3      	cmp	r3, r4
 8006da2:	d908      	bls.n	8006db6 <_free_r+0x46>
 8006da4:	6825      	ldr	r5, [r4, #0]
 8006da6:	1961      	adds	r1, r4, r5
 8006da8:	428b      	cmp	r3, r1
 8006daa:	bf01      	itttt	eq
 8006dac:	6819      	ldreq	r1, [r3, #0]
 8006dae:	685b      	ldreq	r3, [r3, #4]
 8006db0:	1949      	addeq	r1, r1, r5
 8006db2:	6021      	streq	r1, [r4, #0]
 8006db4:	e7ed      	b.n	8006d92 <_free_r+0x22>
 8006db6:	461a      	mov	r2, r3
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	b10b      	cbz	r3, 8006dc0 <_free_r+0x50>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d9fa      	bls.n	8006db6 <_free_r+0x46>
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	1855      	adds	r5, r2, r1
 8006dc4:	42a5      	cmp	r5, r4
 8006dc6:	d10b      	bne.n	8006de0 <_free_r+0x70>
 8006dc8:	6824      	ldr	r4, [r4, #0]
 8006dca:	4421      	add	r1, r4
 8006dcc:	1854      	adds	r4, r2, r1
 8006dce:	42a3      	cmp	r3, r4
 8006dd0:	6011      	str	r1, [r2, #0]
 8006dd2:	d1e0      	bne.n	8006d96 <_free_r+0x26>
 8006dd4:	681c      	ldr	r4, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	440c      	add	r4, r1
 8006ddc:	6014      	str	r4, [r2, #0]
 8006dde:	e7da      	b.n	8006d96 <_free_r+0x26>
 8006de0:	d902      	bls.n	8006de8 <_free_r+0x78>
 8006de2:	230c      	movs	r3, #12
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	e7d6      	b.n	8006d96 <_free_r+0x26>
 8006de8:	6825      	ldr	r5, [r4, #0]
 8006dea:	1961      	adds	r1, r4, r5
 8006dec:	428b      	cmp	r3, r1
 8006dee:	bf04      	itt	eq
 8006df0:	6819      	ldreq	r1, [r3, #0]
 8006df2:	685b      	ldreq	r3, [r3, #4]
 8006df4:	6063      	str	r3, [r4, #4]
 8006df6:	bf04      	itt	eq
 8006df8:	1949      	addeq	r1, r1, r5
 8006dfa:	6021      	streq	r1, [r4, #0]
 8006dfc:	6054      	str	r4, [r2, #4]
 8006dfe:	e7ca      	b.n	8006d96 <_free_r+0x26>
 8006e00:	b003      	add	sp, #12
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	20004394 	.word	0x20004394

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0e      	ldr	r6, [pc, #56]	; (8006e44 <sbrk_aligned+0x3c>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 fba6 	bl	8007564 <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fba1 	bl	8007564 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d00a      	beq.n	8006e3c <sbrk_aligned+0x34>
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d007      	beq.n	8006e40 <sbrk_aligned+0x38>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fb96 	bl	8007564 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d101      	bne.n	8006e40 <sbrk_aligned+0x38>
 8006e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8006e40:	4620      	mov	r0, r4
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	20004398 	.word	0x20004398

08006e48 <_malloc_r>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d905      	bls.n	8006e70 <_malloc_r+0x28>
 8006e64:	230c      	movs	r3, #12
 8006e66:	603b      	str	r3, [r7, #0]
 8006e68:	2600      	movs	r6, #0
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f44 <_malloc_r+0xfc>
 8006e74:	f000 f868 	bl	8006f48 <__malloc_lock>
 8006e78:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7c:	461c      	mov	r4, r3
 8006e7e:	bb5c      	cbnz	r4, 8006ed8 <_malloc_r+0x90>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4638      	mov	r0, r7
 8006e84:	f7ff ffc0 	bl	8006e08 <sbrk_aligned>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	d155      	bne.n	8006f3a <_malloc_r+0xf2>
 8006e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8006e92:	4626      	mov	r6, r4
 8006e94:	2e00      	cmp	r6, #0
 8006e96:	d145      	bne.n	8006f24 <_malloc_r+0xdc>
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d048      	beq.n	8006f2e <_malloc_r+0xe6>
 8006e9c:	6823      	ldr	r3, [r4, #0]
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	eb04 0903 	add.w	r9, r4, r3
 8006ea6:	f000 fb5d 	bl	8007564 <_sbrk_r>
 8006eaa:	4581      	cmp	r9, r0
 8006eac:	d13f      	bne.n	8006f2e <_malloc_r+0xe6>
 8006eae:	6821      	ldr	r1, [r4, #0]
 8006eb0:	1a6d      	subs	r5, r5, r1
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ffa7 	bl	8006e08 <sbrk_aligned>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d037      	beq.n	8006f2e <_malloc_r+0xe6>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	442b      	add	r3, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d038      	beq.n	8006f3e <_malloc_r+0xf6>
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	42a2      	cmp	r2, r4
 8006ed0:	d12b      	bne.n	8006f2a <_malloc_r+0xe2>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	e00f      	b.n	8006ef8 <_malloc_r+0xb0>
 8006ed8:	6822      	ldr	r2, [r4, #0]
 8006eda:	1b52      	subs	r2, r2, r5
 8006edc:	d41f      	bmi.n	8006f1e <_malloc_r+0xd6>
 8006ede:	2a0b      	cmp	r2, #11
 8006ee0:	d917      	bls.n	8006f12 <_malloc_r+0xca>
 8006ee2:	1961      	adds	r1, r4, r5
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	6025      	str	r5, [r4, #0]
 8006ee8:	bf18      	it	ne
 8006eea:	6059      	strne	r1, [r3, #4]
 8006eec:	6863      	ldr	r3, [r4, #4]
 8006eee:	bf08      	it	eq
 8006ef0:	f8c8 1000 	streq.w	r1, [r8]
 8006ef4:	5162      	str	r2, [r4, r5]
 8006ef6:	604b      	str	r3, [r1, #4]
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f104 060b 	add.w	r6, r4, #11
 8006efe:	f000 f829 	bl	8006f54 <__malloc_unlock>
 8006f02:	f026 0607 	bic.w	r6, r6, #7
 8006f06:	1d23      	adds	r3, r4, #4
 8006f08:	1af2      	subs	r2, r6, r3
 8006f0a:	d0ae      	beq.n	8006e6a <_malloc_r+0x22>
 8006f0c:	1b9b      	subs	r3, r3, r6
 8006f0e:	50a3      	str	r3, [r4, r2]
 8006f10:	e7ab      	b.n	8006e6a <_malloc_r+0x22>
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	6862      	ldr	r2, [r4, #4]
 8006f16:	d1dd      	bne.n	8006ed4 <_malloc_r+0x8c>
 8006f18:	f8c8 2000 	str.w	r2, [r8]
 8006f1c:	e7ec      	b.n	8006ef8 <_malloc_r+0xb0>
 8006f1e:	4623      	mov	r3, r4
 8006f20:	6864      	ldr	r4, [r4, #4]
 8006f22:	e7ac      	b.n	8006e7e <_malloc_r+0x36>
 8006f24:	4634      	mov	r4, r6
 8006f26:	6876      	ldr	r6, [r6, #4]
 8006f28:	e7b4      	b.n	8006e94 <_malloc_r+0x4c>
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	e7cc      	b.n	8006ec8 <_malloc_r+0x80>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	4638      	mov	r0, r7
 8006f34:	f000 f80e 	bl	8006f54 <__malloc_unlock>
 8006f38:	e797      	b.n	8006e6a <_malloc_r+0x22>
 8006f3a:	6025      	str	r5, [r4, #0]
 8006f3c:	e7dc      	b.n	8006ef8 <_malloc_r+0xb0>
 8006f3e:	605b      	str	r3, [r3, #4]
 8006f40:	deff      	udf	#255	; 0xff
 8006f42:	bf00      	nop
 8006f44:	20004394 	.word	0x20004394

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	; (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f7ff bf01 	b.w	8006d50 <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20004390 	.word	0x20004390

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f7ff befc 	b.w	8006d52 <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20004390 	.word	0x20004390

08006f60 <__ssputs_r>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	688e      	ldr	r6, [r1, #8]
 8006f66:	461f      	mov	r7, r3
 8006f68:	42be      	cmp	r6, r7
 8006f6a:	680b      	ldr	r3, [r1, #0]
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	4690      	mov	r8, r2
 8006f72:	d82c      	bhi.n	8006fce <__ssputs_r+0x6e>
 8006f74:	898a      	ldrh	r2, [r1, #12]
 8006f76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f7a:	d026      	beq.n	8006fca <__ssputs_r+0x6a>
 8006f7c:	6965      	ldr	r5, [r4, #20]
 8006f7e:	6909      	ldr	r1, [r1, #16]
 8006f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f84:	eba3 0901 	sub.w	r9, r3, r1
 8006f88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f8c:	1c7b      	adds	r3, r7, #1
 8006f8e:	444b      	add	r3, r9
 8006f90:	106d      	asrs	r5, r5, #1
 8006f92:	429d      	cmp	r5, r3
 8006f94:	bf38      	it	cc
 8006f96:	461d      	movcc	r5, r3
 8006f98:	0553      	lsls	r3, r2, #21
 8006f9a:	d527      	bpl.n	8006fec <__ssputs_r+0x8c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7ff ff53 	bl	8006e48 <_malloc_r>
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	b360      	cbz	r0, 8007000 <__ssputs_r+0xa0>
 8006fa6:	6921      	ldr	r1, [r4, #16]
 8006fa8:	464a      	mov	r2, r9
 8006faa:	f7ff fed3 	bl	8006d54 <memcpy>
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	6126      	str	r6, [r4, #16]
 8006fbc:	6165      	str	r5, [r4, #20]
 8006fbe:	444e      	add	r6, r9
 8006fc0:	eba5 0509 	sub.w	r5, r5, r9
 8006fc4:	6026      	str	r6, [r4, #0]
 8006fc6:	60a5      	str	r5, [r4, #8]
 8006fc8:	463e      	mov	r6, r7
 8006fca:	42be      	cmp	r6, r7
 8006fcc:	d900      	bls.n	8006fd0 <__ssputs_r+0x70>
 8006fce:	463e      	mov	r6, r7
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	4632      	mov	r2, r6
 8006fd4:	4641      	mov	r1, r8
 8006fd6:	f000 faab 	bl	8007530 <memmove>
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	4433      	add	r3, r6
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fec:	462a      	mov	r2, r5
 8006fee:	f000 fac9 	bl	8007584 <_realloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d1e0      	bne.n	8006fba <__ssputs_r+0x5a>
 8006ff8:	6921      	ldr	r1, [r4, #16]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7ff feb8 	bl	8006d70 <_free_r>
 8007000:	230c      	movs	r3, #12
 8007002:	f8ca 3000 	str.w	r3, [sl]
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	e7e9      	b.n	8006fe8 <__ssputs_r+0x88>

08007014 <_svfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	4698      	mov	r8, r3
 800701a:	898b      	ldrh	r3, [r1, #12]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	b09d      	sub	sp, #116	; 0x74
 8007020:	4607      	mov	r7, r0
 8007022:	460d      	mov	r5, r1
 8007024:	4614      	mov	r4, r2
 8007026:	d50e      	bpl.n	8007046 <_svfiprintf_r+0x32>
 8007028:	690b      	ldr	r3, [r1, #16]
 800702a:	b963      	cbnz	r3, 8007046 <_svfiprintf_r+0x32>
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	f7ff ff0b 	bl	8006e48 <_malloc_r>
 8007032:	6028      	str	r0, [r5, #0]
 8007034:	6128      	str	r0, [r5, #16]
 8007036:	b920      	cbnz	r0, 8007042 <_svfiprintf_r+0x2e>
 8007038:	230c      	movs	r3, #12
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	e0d0      	b.n	80071e4 <_svfiprintf_r+0x1d0>
 8007042:	2340      	movs	r3, #64	; 0x40
 8007044:	616b      	str	r3, [r5, #20]
 8007046:	2300      	movs	r3, #0
 8007048:	9309      	str	r3, [sp, #36]	; 0x24
 800704a:	2320      	movs	r3, #32
 800704c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007050:	f8cd 800c 	str.w	r8, [sp, #12]
 8007054:	2330      	movs	r3, #48	; 0x30
 8007056:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071fc <_svfiprintf_r+0x1e8>
 800705a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800705e:	f04f 0901 	mov.w	r9, #1
 8007062:	4623      	mov	r3, r4
 8007064:	469a      	mov	sl, r3
 8007066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800706a:	b10a      	cbz	r2, 8007070 <_svfiprintf_r+0x5c>
 800706c:	2a25      	cmp	r2, #37	; 0x25
 800706e:	d1f9      	bne.n	8007064 <_svfiprintf_r+0x50>
 8007070:	ebba 0b04 	subs.w	fp, sl, r4
 8007074:	d00b      	beq.n	800708e <_svfiprintf_r+0x7a>
 8007076:	465b      	mov	r3, fp
 8007078:	4622      	mov	r2, r4
 800707a:	4629      	mov	r1, r5
 800707c:	4638      	mov	r0, r7
 800707e:	f7ff ff6f 	bl	8006f60 <__ssputs_r>
 8007082:	3001      	adds	r0, #1
 8007084:	f000 80a9 	beq.w	80071da <_svfiprintf_r+0x1c6>
 8007088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800708a:	445a      	add	r2, fp
 800708c:	9209      	str	r2, [sp, #36]	; 0x24
 800708e:	f89a 3000 	ldrb.w	r3, [sl]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80a1 	beq.w	80071da <_svfiprintf_r+0x1c6>
 8007098:	2300      	movs	r3, #0
 800709a:	f04f 32ff 	mov.w	r2, #4294967295
 800709e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a2:	f10a 0a01 	add.w	sl, sl, #1
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ae:	931a      	str	r3, [sp, #104]	; 0x68
 80070b0:	4654      	mov	r4, sl
 80070b2:	2205      	movs	r2, #5
 80070b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b8:	4850      	ldr	r0, [pc, #320]	; (80071fc <_svfiprintf_r+0x1e8>)
 80070ba:	f7f9 f899 	bl	80001f0 <memchr>
 80070be:	9a04      	ldr	r2, [sp, #16]
 80070c0:	b9d8      	cbnz	r0, 80070fa <_svfiprintf_r+0xe6>
 80070c2:	06d0      	lsls	r0, r2, #27
 80070c4:	bf44      	itt	mi
 80070c6:	2320      	movmi	r3, #32
 80070c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070cc:	0711      	lsls	r1, r2, #28
 80070ce:	bf44      	itt	mi
 80070d0:	232b      	movmi	r3, #43	; 0x2b
 80070d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d6:	f89a 3000 	ldrb.w	r3, [sl]
 80070da:	2b2a      	cmp	r3, #42	; 0x2a
 80070dc:	d015      	beq.n	800710a <_svfiprintf_r+0xf6>
 80070de:	9a07      	ldr	r2, [sp, #28]
 80070e0:	4654      	mov	r4, sl
 80070e2:	2000      	movs	r0, #0
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	4621      	mov	r1, r4
 80070ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ee:	3b30      	subs	r3, #48	; 0x30
 80070f0:	2b09      	cmp	r3, #9
 80070f2:	d94d      	bls.n	8007190 <_svfiprintf_r+0x17c>
 80070f4:	b1b0      	cbz	r0, 8007124 <_svfiprintf_r+0x110>
 80070f6:	9207      	str	r2, [sp, #28]
 80070f8:	e014      	b.n	8007124 <_svfiprintf_r+0x110>
 80070fa:	eba0 0308 	sub.w	r3, r0, r8
 80070fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007102:	4313      	orrs	r3, r2
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	46a2      	mov	sl, r4
 8007108:	e7d2      	b.n	80070b0 <_svfiprintf_r+0x9c>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	1d19      	adds	r1, r3, #4
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	9103      	str	r1, [sp, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfbb      	ittet	lt
 8007116:	425b      	neglt	r3, r3
 8007118:	f042 0202 	orrlt.w	r2, r2, #2
 800711c:	9307      	strge	r3, [sp, #28]
 800711e:	9307      	strlt	r3, [sp, #28]
 8007120:	bfb8      	it	lt
 8007122:	9204      	strlt	r2, [sp, #16]
 8007124:	7823      	ldrb	r3, [r4, #0]
 8007126:	2b2e      	cmp	r3, #46	; 0x2e
 8007128:	d10c      	bne.n	8007144 <_svfiprintf_r+0x130>
 800712a:	7863      	ldrb	r3, [r4, #1]
 800712c:	2b2a      	cmp	r3, #42	; 0x2a
 800712e:	d134      	bne.n	800719a <_svfiprintf_r+0x186>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	1d1a      	adds	r2, r3, #4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	9203      	str	r2, [sp, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	bfb8      	it	lt
 800713c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007140:	3402      	adds	r4, #2
 8007142:	9305      	str	r3, [sp, #20]
 8007144:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800720c <_svfiprintf_r+0x1f8>
 8007148:	7821      	ldrb	r1, [r4, #0]
 800714a:	2203      	movs	r2, #3
 800714c:	4650      	mov	r0, sl
 800714e:	f7f9 f84f 	bl	80001f0 <memchr>
 8007152:	b138      	cbz	r0, 8007164 <_svfiprintf_r+0x150>
 8007154:	9b04      	ldr	r3, [sp, #16]
 8007156:	eba0 000a 	sub.w	r0, r0, sl
 800715a:	2240      	movs	r2, #64	; 0x40
 800715c:	4082      	lsls	r2, r0
 800715e:	4313      	orrs	r3, r2
 8007160:	3401      	adds	r4, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	4825      	ldr	r0, [pc, #148]	; (8007200 <_svfiprintf_r+0x1ec>)
 800716a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800716e:	2206      	movs	r2, #6
 8007170:	f7f9 f83e 	bl	80001f0 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d038      	beq.n	80071ea <_svfiprintf_r+0x1d6>
 8007178:	4b22      	ldr	r3, [pc, #136]	; (8007204 <_svfiprintf_r+0x1f0>)
 800717a:	bb1b      	cbnz	r3, 80071c4 <_svfiprintf_r+0x1b0>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	3307      	adds	r3, #7
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	3308      	adds	r3, #8
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	4433      	add	r3, r6
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	e768      	b.n	8007062 <_svfiprintf_r+0x4e>
 8007190:	fb0c 3202 	mla	r2, ip, r2, r3
 8007194:	460c      	mov	r4, r1
 8007196:	2001      	movs	r0, #1
 8007198:	e7a6      	b.n	80070e8 <_svfiprintf_r+0xd4>
 800719a:	2300      	movs	r3, #0
 800719c:	3401      	adds	r4, #1
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	4620      	mov	r0, r4
 80071a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	2a09      	cmp	r2, #9
 80071b0:	d903      	bls.n	80071ba <_svfiprintf_r+0x1a6>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c6      	beq.n	8007144 <_svfiprintf_r+0x130>
 80071b6:	9105      	str	r1, [sp, #20]
 80071b8:	e7c4      	b.n	8007144 <_svfiprintf_r+0x130>
 80071ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80071be:	4604      	mov	r4, r0
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7f0      	b.n	80071a6 <_svfiprintf_r+0x192>
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <_svfiprintf_r+0x1f4>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4638      	mov	r0, r7
 80071d0:	f3af 8000 	nop.w
 80071d4:	1c42      	adds	r2, r0, #1
 80071d6:	4606      	mov	r6, r0
 80071d8:	d1d6      	bne.n	8007188 <_svfiprintf_r+0x174>
 80071da:	89ab      	ldrh	r3, [r5, #12]
 80071dc:	065b      	lsls	r3, r3, #25
 80071de:	f53f af2d 	bmi.w	800703c <_svfiprintf_r+0x28>
 80071e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071e4:	b01d      	add	sp, #116	; 0x74
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	ab03      	add	r3, sp, #12
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	462a      	mov	r2, r5
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <_svfiprintf_r+0x1f4>)
 80071f2:	a904      	add	r1, sp, #16
 80071f4:	4638      	mov	r0, r7
 80071f6:	f000 f879 	bl	80072ec <_printf_i>
 80071fa:	e7eb      	b.n	80071d4 <_svfiprintf_r+0x1c0>
 80071fc:	080077ec 	.word	0x080077ec
 8007200:	080077f6 	.word	0x080077f6
 8007204:	00000000 	.word	0x00000000
 8007208:	08006f61 	.word	0x08006f61
 800720c:	080077f2 	.word	0x080077f2

08007210 <_printf_common>:
 8007210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007214:	4616      	mov	r6, r2
 8007216:	4699      	mov	r9, r3
 8007218:	688a      	ldr	r2, [r1, #8]
 800721a:	690b      	ldr	r3, [r1, #16]
 800721c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007220:	4293      	cmp	r3, r2
 8007222:	bfb8      	it	lt
 8007224:	4613      	movlt	r3, r2
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800722c:	4607      	mov	r7, r0
 800722e:	460c      	mov	r4, r1
 8007230:	b10a      	cbz	r2, 8007236 <_printf_common+0x26>
 8007232:	3301      	adds	r3, #1
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	0699      	lsls	r1, r3, #26
 800723a:	bf42      	ittt	mi
 800723c:	6833      	ldrmi	r3, [r6, #0]
 800723e:	3302      	addmi	r3, #2
 8007240:	6033      	strmi	r3, [r6, #0]
 8007242:	6825      	ldr	r5, [r4, #0]
 8007244:	f015 0506 	ands.w	r5, r5, #6
 8007248:	d106      	bne.n	8007258 <_printf_common+0x48>
 800724a:	f104 0a19 	add.w	sl, r4, #25
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	6832      	ldr	r2, [r6, #0]
 8007252:	1a9b      	subs	r3, r3, r2
 8007254:	42ab      	cmp	r3, r5
 8007256:	dc26      	bgt.n	80072a6 <_printf_common+0x96>
 8007258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800725c:	1e13      	subs	r3, r2, #0
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	bf18      	it	ne
 8007262:	2301      	movne	r3, #1
 8007264:	0692      	lsls	r2, r2, #26
 8007266:	d42b      	bmi.n	80072c0 <_printf_common+0xb0>
 8007268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800726c:	4649      	mov	r1, r9
 800726e:	4638      	mov	r0, r7
 8007270:	47c0      	blx	r8
 8007272:	3001      	adds	r0, #1
 8007274:	d01e      	beq.n	80072b4 <_printf_common+0xa4>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	6922      	ldr	r2, [r4, #16]
 800727a:	f003 0306 	and.w	r3, r3, #6
 800727e:	2b04      	cmp	r3, #4
 8007280:	bf02      	ittt	eq
 8007282:	68e5      	ldreq	r5, [r4, #12]
 8007284:	6833      	ldreq	r3, [r6, #0]
 8007286:	1aed      	subeq	r5, r5, r3
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	bf0c      	ite	eq
 800728c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007290:	2500      	movne	r5, #0
 8007292:	4293      	cmp	r3, r2
 8007294:	bfc4      	itt	gt
 8007296:	1a9b      	subgt	r3, r3, r2
 8007298:	18ed      	addgt	r5, r5, r3
 800729a:	2600      	movs	r6, #0
 800729c:	341a      	adds	r4, #26
 800729e:	42b5      	cmp	r5, r6
 80072a0:	d11a      	bne.n	80072d8 <_printf_common+0xc8>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e008      	b.n	80072b8 <_printf_common+0xa8>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4652      	mov	r2, sl
 80072aa:	4649      	mov	r1, r9
 80072ac:	4638      	mov	r0, r7
 80072ae:	47c0      	blx	r8
 80072b0:	3001      	adds	r0, #1
 80072b2:	d103      	bne.n	80072bc <_printf_common+0xac>
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	3501      	adds	r5, #1
 80072be:	e7c6      	b.n	800724e <_printf_common+0x3e>
 80072c0:	18e1      	adds	r1, r4, r3
 80072c2:	1c5a      	adds	r2, r3, #1
 80072c4:	2030      	movs	r0, #48	; 0x30
 80072c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ca:	4422      	add	r2, r4
 80072cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072d4:	3302      	adds	r3, #2
 80072d6:	e7c7      	b.n	8007268 <_printf_common+0x58>
 80072d8:	2301      	movs	r3, #1
 80072da:	4622      	mov	r2, r4
 80072dc:	4649      	mov	r1, r9
 80072de:	4638      	mov	r0, r7
 80072e0:	47c0      	blx	r8
 80072e2:	3001      	adds	r0, #1
 80072e4:	d0e6      	beq.n	80072b4 <_printf_common+0xa4>
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7d9      	b.n	800729e <_printf_common+0x8e>
	...

080072ec <_printf_i>:
 80072ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	7e0f      	ldrb	r7, [r1, #24]
 80072f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f4:	2f78      	cmp	r7, #120	; 0x78
 80072f6:	4691      	mov	r9, r2
 80072f8:	4680      	mov	r8, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	469a      	mov	sl, r3
 80072fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007302:	d807      	bhi.n	8007314 <_printf_i+0x28>
 8007304:	2f62      	cmp	r7, #98	; 0x62
 8007306:	d80a      	bhi.n	800731e <_printf_i+0x32>
 8007308:	2f00      	cmp	r7, #0
 800730a:	f000 80d4 	beq.w	80074b6 <_printf_i+0x1ca>
 800730e:	2f58      	cmp	r7, #88	; 0x58
 8007310:	f000 80c0 	beq.w	8007494 <_printf_i+0x1a8>
 8007314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800731c:	e03a      	b.n	8007394 <_printf_i+0xa8>
 800731e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007322:	2b15      	cmp	r3, #21
 8007324:	d8f6      	bhi.n	8007314 <_printf_i+0x28>
 8007326:	a101      	add	r1, pc, #4	; (adr r1, 800732c <_printf_i+0x40>)
 8007328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800732c:	08007385 	.word	0x08007385
 8007330:	08007399 	.word	0x08007399
 8007334:	08007315 	.word	0x08007315
 8007338:	08007315 	.word	0x08007315
 800733c:	08007315 	.word	0x08007315
 8007340:	08007315 	.word	0x08007315
 8007344:	08007399 	.word	0x08007399
 8007348:	08007315 	.word	0x08007315
 800734c:	08007315 	.word	0x08007315
 8007350:	08007315 	.word	0x08007315
 8007354:	08007315 	.word	0x08007315
 8007358:	0800749d 	.word	0x0800749d
 800735c:	080073c5 	.word	0x080073c5
 8007360:	08007457 	.word	0x08007457
 8007364:	08007315 	.word	0x08007315
 8007368:	08007315 	.word	0x08007315
 800736c:	080074bf 	.word	0x080074bf
 8007370:	08007315 	.word	0x08007315
 8007374:	080073c5 	.word	0x080073c5
 8007378:	08007315 	.word	0x08007315
 800737c:	08007315 	.word	0x08007315
 8007380:	0800745f 	.word	0x0800745f
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	1d1a      	adds	r2, r3, #4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	602a      	str	r2, [r5, #0]
 800738c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007394:	2301      	movs	r3, #1
 8007396:	e09f      	b.n	80074d8 <_printf_i+0x1ec>
 8007398:	6820      	ldr	r0, [r4, #0]
 800739a:	682b      	ldr	r3, [r5, #0]
 800739c:	0607      	lsls	r7, r0, #24
 800739e:	f103 0104 	add.w	r1, r3, #4
 80073a2:	6029      	str	r1, [r5, #0]
 80073a4:	d501      	bpl.n	80073aa <_printf_i+0xbe>
 80073a6:	681e      	ldr	r6, [r3, #0]
 80073a8:	e003      	b.n	80073b2 <_printf_i+0xc6>
 80073aa:	0646      	lsls	r6, r0, #25
 80073ac:	d5fb      	bpl.n	80073a6 <_printf_i+0xba>
 80073ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	da03      	bge.n	80073be <_printf_i+0xd2>
 80073b6:	232d      	movs	r3, #45	; 0x2d
 80073b8:	4276      	negs	r6, r6
 80073ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073be:	485a      	ldr	r0, [pc, #360]	; (8007528 <_printf_i+0x23c>)
 80073c0:	230a      	movs	r3, #10
 80073c2:	e012      	b.n	80073ea <_printf_i+0xfe>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	1d19      	adds	r1, r3, #4
 80073ca:	6029      	str	r1, [r5, #0]
 80073cc:	0605      	lsls	r5, r0, #24
 80073ce:	d501      	bpl.n	80073d4 <_printf_i+0xe8>
 80073d0:	681e      	ldr	r6, [r3, #0]
 80073d2:	e002      	b.n	80073da <_printf_i+0xee>
 80073d4:	0641      	lsls	r1, r0, #25
 80073d6:	d5fb      	bpl.n	80073d0 <_printf_i+0xe4>
 80073d8:	881e      	ldrh	r6, [r3, #0]
 80073da:	4853      	ldr	r0, [pc, #332]	; (8007528 <_printf_i+0x23c>)
 80073dc:	2f6f      	cmp	r7, #111	; 0x6f
 80073de:	bf0c      	ite	eq
 80073e0:	2308      	moveq	r3, #8
 80073e2:	230a      	movne	r3, #10
 80073e4:	2100      	movs	r1, #0
 80073e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ea:	6865      	ldr	r5, [r4, #4]
 80073ec:	60a5      	str	r5, [r4, #8]
 80073ee:	2d00      	cmp	r5, #0
 80073f0:	bfa2      	ittt	ge
 80073f2:	6821      	ldrge	r1, [r4, #0]
 80073f4:	f021 0104 	bicge.w	r1, r1, #4
 80073f8:	6021      	strge	r1, [r4, #0]
 80073fa:	b90e      	cbnz	r6, 8007400 <_printf_i+0x114>
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	d04b      	beq.n	8007498 <_printf_i+0x1ac>
 8007400:	4615      	mov	r5, r2
 8007402:	fbb6 f1f3 	udiv	r1, r6, r3
 8007406:	fb03 6711 	mls	r7, r3, r1, r6
 800740a:	5dc7      	ldrb	r7, [r0, r7]
 800740c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007410:	4637      	mov	r7, r6
 8007412:	42bb      	cmp	r3, r7
 8007414:	460e      	mov	r6, r1
 8007416:	d9f4      	bls.n	8007402 <_printf_i+0x116>
 8007418:	2b08      	cmp	r3, #8
 800741a:	d10b      	bne.n	8007434 <_printf_i+0x148>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	07de      	lsls	r6, r3, #31
 8007420:	d508      	bpl.n	8007434 <_printf_i+0x148>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6861      	ldr	r1, [r4, #4]
 8007426:	4299      	cmp	r1, r3
 8007428:	bfde      	ittt	le
 800742a:	2330      	movle	r3, #48	; 0x30
 800742c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007434:	1b52      	subs	r2, r2, r5
 8007436:	6122      	str	r2, [r4, #16]
 8007438:	f8cd a000 	str.w	sl, [sp]
 800743c:	464b      	mov	r3, r9
 800743e:	aa03      	add	r2, sp, #12
 8007440:	4621      	mov	r1, r4
 8007442:	4640      	mov	r0, r8
 8007444:	f7ff fee4 	bl	8007210 <_printf_common>
 8007448:	3001      	adds	r0, #1
 800744a:	d14a      	bne.n	80074e2 <_printf_i+0x1f6>
 800744c:	f04f 30ff 	mov.w	r0, #4294967295
 8007450:	b004      	add	sp, #16
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	f043 0320 	orr.w	r3, r3, #32
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	4833      	ldr	r0, [pc, #204]	; (800752c <_printf_i+0x240>)
 8007460:	2778      	movs	r7, #120	; 0x78
 8007462:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	6829      	ldr	r1, [r5, #0]
 800746a:	061f      	lsls	r7, r3, #24
 800746c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007470:	d402      	bmi.n	8007478 <_printf_i+0x18c>
 8007472:	065f      	lsls	r7, r3, #25
 8007474:	bf48      	it	mi
 8007476:	b2b6      	uxthmi	r6, r6
 8007478:	07df      	lsls	r7, r3, #31
 800747a:	bf48      	it	mi
 800747c:	f043 0320 	orrmi.w	r3, r3, #32
 8007480:	6029      	str	r1, [r5, #0]
 8007482:	bf48      	it	mi
 8007484:	6023      	strmi	r3, [r4, #0]
 8007486:	b91e      	cbnz	r6, 8007490 <_printf_i+0x1a4>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	f023 0320 	bic.w	r3, r3, #32
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	2310      	movs	r3, #16
 8007492:	e7a7      	b.n	80073e4 <_printf_i+0xf8>
 8007494:	4824      	ldr	r0, [pc, #144]	; (8007528 <_printf_i+0x23c>)
 8007496:	e7e4      	b.n	8007462 <_printf_i+0x176>
 8007498:	4615      	mov	r5, r2
 800749a:	e7bd      	b.n	8007418 <_printf_i+0x12c>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	6826      	ldr	r6, [r4, #0]
 80074a0:	6961      	ldr	r1, [r4, #20]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6028      	str	r0, [r5, #0]
 80074a6:	0635      	lsls	r5, r6, #24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0x1c4>
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0x1ca>
 80074b0:	0670      	lsls	r0, r6, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0x1c0>
 80074b4:	8019      	strh	r1, [r3, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	4615      	mov	r5, r2
 80074bc:	e7bc      	b.n	8007438 <_printf_i+0x14c>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7f8 fe90 	bl	80001f0 <memchr>
 80074d0:	b108      	cbz	r0, 80074d6 <_printf_i+0x1ea>
 80074d2:	1b40      	subs	r0, r0, r5
 80074d4:	6060      	str	r0, [r4, #4]
 80074d6:	6863      	ldr	r3, [r4, #4]
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	2300      	movs	r3, #0
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	e7aa      	b.n	8007438 <_printf_i+0x14c>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	462a      	mov	r2, r5
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d0ad      	beq.n	800744c <_printf_i+0x160>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	079b      	lsls	r3, r3, #30
 80074f4:	d413      	bmi.n	800751e <_printf_i+0x232>
 80074f6:	68e0      	ldr	r0, [r4, #12]
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	4298      	cmp	r0, r3
 80074fc:	bfb8      	it	lt
 80074fe:	4618      	movlt	r0, r3
 8007500:	e7a6      	b.n	8007450 <_printf_i+0x164>
 8007502:	2301      	movs	r3, #1
 8007504:	4632      	mov	r2, r6
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d09d      	beq.n	800744c <_printf_i+0x160>
 8007510:	3501      	adds	r5, #1
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	42ab      	cmp	r3, r5
 800751a:	dcf2      	bgt.n	8007502 <_printf_i+0x216>
 800751c:	e7eb      	b.n	80074f6 <_printf_i+0x20a>
 800751e:	2500      	movs	r5, #0
 8007520:	f104 0619 	add.w	r6, r4, #25
 8007524:	e7f5      	b.n	8007512 <_printf_i+0x226>
 8007526:	bf00      	nop
 8007528:	080077fd 	.word	0x080077fd
 800752c:	0800780e 	.word	0x0800780e

08007530 <memmove>:
 8007530:	4288      	cmp	r0, r1
 8007532:	b510      	push	{r4, lr}
 8007534:	eb01 0402 	add.w	r4, r1, r2
 8007538:	d902      	bls.n	8007540 <memmove+0x10>
 800753a:	4284      	cmp	r4, r0
 800753c:	4623      	mov	r3, r4
 800753e:	d807      	bhi.n	8007550 <memmove+0x20>
 8007540:	1e43      	subs	r3, r0, #1
 8007542:	42a1      	cmp	r1, r4
 8007544:	d008      	beq.n	8007558 <memmove+0x28>
 8007546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754e:	e7f8      	b.n	8007542 <memmove+0x12>
 8007550:	4402      	add	r2, r0
 8007552:	4601      	mov	r1, r0
 8007554:	428a      	cmp	r2, r1
 8007556:	d100      	bne.n	800755a <memmove+0x2a>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007562:	e7f7      	b.n	8007554 <memmove+0x24>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4d06      	ldr	r5, [pc, #24]	; (8007580 <_sbrk_r+0x1c>)
 8007568:	2300      	movs	r3, #0
 800756a:	4604      	mov	r4, r0
 800756c:	4608      	mov	r0, r1
 800756e:	602b      	str	r3, [r5, #0]
 8007570:	f7fa f80c 	bl	800158c <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	2000438c 	.word	0x2000438c

08007584 <_realloc_r>:
 8007584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007588:	4680      	mov	r8, r0
 800758a:	4614      	mov	r4, r2
 800758c:	460e      	mov	r6, r1
 800758e:	b921      	cbnz	r1, 800759a <_realloc_r+0x16>
 8007590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007594:	4611      	mov	r1, r2
 8007596:	f7ff bc57 	b.w	8006e48 <_malloc_r>
 800759a:	b92a      	cbnz	r2, 80075a8 <_realloc_r+0x24>
 800759c:	f7ff fbe8 	bl	8006d70 <_free_r>
 80075a0:	4625      	mov	r5, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075a8:	f000 f81b 	bl	80075e2 <_malloc_usable_size_r>
 80075ac:	4284      	cmp	r4, r0
 80075ae:	4607      	mov	r7, r0
 80075b0:	d802      	bhi.n	80075b8 <_realloc_r+0x34>
 80075b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075b6:	d812      	bhi.n	80075de <_realloc_r+0x5a>
 80075b8:	4621      	mov	r1, r4
 80075ba:	4640      	mov	r0, r8
 80075bc:	f7ff fc44 	bl	8006e48 <_malloc_r>
 80075c0:	4605      	mov	r5, r0
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0ed      	beq.n	80075a2 <_realloc_r+0x1e>
 80075c6:	42bc      	cmp	r4, r7
 80075c8:	4622      	mov	r2, r4
 80075ca:	4631      	mov	r1, r6
 80075cc:	bf28      	it	cs
 80075ce:	463a      	movcs	r2, r7
 80075d0:	f7ff fbc0 	bl	8006d54 <memcpy>
 80075d4:	4631      	mov	r1, r6
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fbca 	bl	8006d70 <_free_r>
 80075dc:	e7e1      	b.n	80075a2 <_realloc_r+0x1e>
 80075de:	4635      	mov	r5, r6
 80075e0:	e7df      	b.n	80075a2 <_realloc_r+0x1e>

080075e2 <_malloc_usable_size_r>:
 80075e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e6:	1f18      	subs	r0, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bfbc      	itt	lt
 80075ec:	580b      	ldrlt	r3, [r1, r0]
 80075ee:	18c0      	addlt	r0, r0, r3
 80075f0:	4770      	bx	lr
	...

080075f4 <_init>:
 80075f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f6:	bf00      	nop
 80075f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fa:	bc08      	pop	{r3}
 80075fc:	469e      	mov	lr, r3
 80075fe:	4770      	bx	lr

08007600 <_fini>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr
