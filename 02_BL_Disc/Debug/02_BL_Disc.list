
02_BL_Disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800569c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000033c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ac  200003ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000cc48  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bc9  00000000  00000000  0002cd2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bb0  00000000  00000000  0002f8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008c4  00000000  00000000  000304a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a91  00000000  00000000  00030d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f201  00000000  00000000  000557fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d51bd  00000000  00000000  000649fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035f8  00000000  00000000  00139bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000045  00000000  00000000  0013d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080054a8 	.word	0x080054a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080054a8 	.word	0x080054a8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <BL_Print_Message>:
	CBL_GO_TO_USER_APP,
 };

/* API Definitions -----------------------------------------------------------*/
void BL_Print_Message(char *format, ...)
{
 800058c:	b40f      	push	{r0, r1, r2, r3}
 800058e:	b580      	push	{r7, lr}
 8000590:	b09a      	sub	sp, #104	; 0x68
 8000592:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2260      	movs	r2, #96	; 0x60
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 ffa9 	bl	80044f8 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 80005a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005aa:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 ff96 	bl	80044e4 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART_PC, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2264      	movs	r2, #100	; 0x64
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <BL_Print_Message+0x48>)
 80005c2:	f002 fe19 	bl	80031f8 <HAL_UART_Transmit>
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80005c6:	bf00      	nop
 80005c8:	3768      	adds	r7, #104	; 0x68
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	20000164 	.word	0x20000164

080005d8 <BL_UART_Fetch_Host_Command>:

BL_Status BL_UART_Fetch_Host_Command (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	/* Local Definations Scope */
	BL_Status Status = BL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71bb      	strb	r3, [r7, #6]
	uint16_t Data_length = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	80bb      	strh	r3, [r7, #4]

	/* Clear BL_Host_Buffer */
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 80005ea:	22c8      	movs	r2, #200	; 0xc8
 80005ec:	2100      	movs	r1, #0
 80005ee:	484d      	ldr	r0, [pc, #308]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005f0:	f003 ff82 	bl	80044f8 <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	494a      	ldr	r1, [pc, #296]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005fc:	484a      	ldr	r0, [pc, #296]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 80005fe:	f002 fe86 	bl	800330e <HAL_UART_Receive>
 8000602:	4603      	mov	r3, r0
 8000604:	71bb      	strb	r3, [r7, #6]


	if (HAL_Status != HAL_OK)
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <BL_UART_Fetch_Host_Command+0x3a>
	{
		Status = BL_NOT_OK;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e083      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}

	else
	{
		Data_length = BL_Host_Buffer[0];
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	80bb      	strh	r3, [r7, #4]

		/* recieve the cmd  */
		HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, &BL_Host_Buffer[1], Data_length, HAL_MAX_DELAY);
 8000618:	88ba      	ldrh	r2, [r7, #4]
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4943      	ldr	r1, [pc, #268]	; (800072c <BL_UART_Fetch_Host_Command+0x154>)
 8000620:	4841      	ldr	r0, [pc, #260]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 8000622:	f002 fe74 	bl	800330e <HAL_UART_Receive>
 8000626:	4603      	mov	r3, r0
 8000628:	71bb      	strb	r3, [r7, #6]

	if (HAL_Status != HAL_OK)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <BL_UART_Fetch_Host_Command+0x5e>
	{
		Status = BL_NOT_OK;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e071      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}
	else{
		switch (BL_Host_Buffer[1])
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	3b10      	subs	r3, #16
 800063c:	2b12      	cmp	r3, #18
 800063e:	d868      	bhi.n	8000712 <BL_UART_Fetch_Host_Command+0x13a>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <BL_UART_Fetch_Host_Command+0x70>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000695 	.word	0x08000695
 800064c:	080006a7 	.word	0x080006a7
 8000650:	080006b9 	.word	0x080006b9
 8000654:	08000713 	.word	0x08000713
 8000658:	080006cb 	.word	0x080006cb
 800065c:	080006dd 	.word	0x080006dd
 8000660:	080006ef 	.word	0x080006ef
 8000664:	08000713 	.word	0x08000713
 8000668:	08000713 	.word	0x08000713
 800066c:	08000713 	.word	0x08000713
 8000670:	08000713 	.word	0x08000713
 8000674:	08000713 	.word	0x08000713
 8000678:	08000713 	.word	0x08000713
 800067c:	08000713 	.word	0x08000713
 8000680:	08000713 	.word	0x08000713
 8000684:	08000713 	.word	0x08000713
 8000688:	08000713 	.word	0x08000713
 800068c:	08000713 	.word	0x08000713
 8000690:	08000701 	.word	0x08000701
		{
		case CBL_GET_VER_CMD:
		            BL_Print_Message("Gets the protocol version \r\n");
 8000694:	4826      	ldr	r0, [pc, #152]	; (8000730 <BL_UART_Fetch_Host_Command+0x158>)
 8000696:	f7ff ff79 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Version(BL_Host_Buffer);
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 800069c:	f000 f918 	bl	80008d0 <Bootloader_Get_Version>
		            Status = BL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
		            break;
 80006a4:	e039      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_HELP_CMD:
		            BL_Print_Message("Gets help with Commands ID \r\n");
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <BL_UART_Fetch_Host_Command+0x15c>)
 80006a8:	f7ff ff70 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Help(BL_Host_Buffer);
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006ae:	f000 f941 	bl	8000934 <Bootloader_Get_Help>
		            Status = BL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
		            break;
 80006b6:	e030      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_CID_CMD:
		            BL_Print_Message("Gets the chip ID \r\n");
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <BL_UART_Fetch_Host_Command+0x160>)
 80006ba:	f7ff ff67 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006c0:	f000 f966 	bl	8000990 <Bootloader_Get_Chip_Identification_Number>
		            Status = BL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
		            break;
 80006c8:	e027      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_ADDR_CMD:
					BL_Print_Message("Jumps to specific address located in the flash memory \r\n");
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <BL_UART_Fetch_Host_Command+0x164>)
 80006cc:	f7ff ff5e 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006d2:	f000 fa19 	bl	8000b08 <Bootloader_Jump_To_Address>
					Status = BL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
					break;
 80006da:	e01e      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_FLASH_ERASE_CMD:
					BL_Print_Message("Erases some pages in flash memory \r\n");
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <BL_UART_Fetch_Host_Command+0x168>)
 80006de:	f7ff ff55 	bl	800058c <BL_Print_Message>
					Bootloader_Erase_Flash(BL_Host_Buffer);
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006e4:	f000 fa97 	bl	8000c16 <Bootloader_Erase_Flash>
					Status = BL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	71fb      	strb	r3, [r7, #7]
					break;
 80006ec:	e015      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_MEM_WRITE_CMD:
					BL_Print_Message("Write bytes in Flash Memory from address specified by the application \r\n");
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <BL_UART_Fetch_Host_Command+0x16c>)
 80006f0:	f7ff ff4c 	bl	800058c <BL_Print_Message>
					Bootloader_Memory_Write(BL_Host_Buffer);
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006f6:	f000 fb22 	bl	8000d3e <Bootloader_Memory_Write>
					Status = BL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
					break;
 80006fe:	e00c      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_USER_APP:
					BL_Print_Message("Jumps to user application code located in the flash memory \r\n");
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <BL_UART_Fetch_Host_Command+0x170>)
 8000702:	f7ff ff43 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_UserApp(BL_Host_Buffer);
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000708:	f000 f97a 	bl	8000a00 <Bootloader_Jump_To_UserApp>
					Status = BL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
					break;
 8000710:	e003      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>


		default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <BL_UART_Fetch_Host_Command+0x174>)
 8000714:	f7ff ff3a 	bl	800058c <BL_Print_Message>
					break;
 8000718:	bf00      	nop
			}
		}
	}
  return Status;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000008c 	.word	0x2000008c
 8000728:	200001f4 	.word	0x200001f4
 800072c:	2000008d 	.word	0x2000008d
 8000730:	080054c0 	.word	0x080054c0
 8000734:	080054e0 	.word	0x080054e0
 8000738:	08005500 	.word	0x08005500
 800073c:	08005514 	.word	0x08005514
 8000740:	08005550 	.word	0x08005550
 8000744:	08005578 	.word	0x08005578
 8000748:	080055c4 	.word	0x080055c4
 800074c:	08005604 	.word	0x08005604

08000750 <Bootloader_Send_Data_To_Host>:
  * @param  Data_Len    : Data Length.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_Data_To_Host (uint8_t *Host_Buffer, uint32_t Data_Len)
 {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_DEBUG_UART_HOST, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <Bootloader_Send_Data_To_Host+0x24>)
 8000766:	f002 fd47 	bl	80031f8 <HAL_UART_Transmit>
 }
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200001f4 	.word	0x200001f4

08000778 <Bootloader_Send_ACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_ACK (uint8_t Replay_Len)
 {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Info[2] = {0, 0};
 8000782:	2300      	movs	r3, #0
 8000784:	81bb      	strh	r3, [r7, #12]
	Ack_Info[0] = CBL_SEND_ACK;
 8000786:	23cd      	movs	r3, #205	; 0xcd
 8000788:	733b      	strb	r3, [r7, #12]
	Ack_Info[1] = Replay_Len; /* Length of the following packet (Response) from STM32 to the Host*/
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host(Ack_Info, 2);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffdb 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Bootloader_Send_NACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_NACK	(void)
 {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
	uint8_t Ack_Info = CBL_SEND_NACK;
 80007a8:	23ab      	movs	r3, #171	; 0xab
 80007aa:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&Ack_Info, 1);
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffcd 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Bootloader_CRC_Verify>:
  * @param  Data_Len : Data Length.
  * @param  Host_CRC : CRC Delivered by Host.
  * @retval CRC_Status.
**************************************************************************************/
 static uint8_t Bootloader_CRC_Verify (uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
 {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007dc:	2300      	movs	r3, #0
 80007de:	75fb      	strb	r3, [r7, #23]
 80007e0:	e00f      	b.n	8000802 <Bootloader_CRC_Verify+0x42>
	{
		Data_Buffer = (uint32_t)(pData[Data_Counter]);
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 80007f6:	f001 f906 	bl	8001a06 <HAL_CRC_Accumulate>
 80007fa:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	3301      	adds	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	429a      	cmp	r2, r3
 8000808:	d8eb      	bhi.n	80007e2 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
    __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0201 	orr.w	r2, r2, #1
 8000818:	609a      	str	r2, [r3, #8]

	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC)
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d102      	bne.n	8000828 <Bootloader_CRC_Verify+0x68>
	{
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000822:	2301      	movs	r3, #1
 8000824:	77fb      	strb	r3, [r7, #31]
 8000826:	e001      	b.n	800082c <Bootloader_CRC_Verify+0x6c>
	}
	else
	{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 800082c:	7ffb      	ldrb	r3, [r7, #31]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000154 	.word	0x20000154

0800083c <Calculate_CRC32>:

/* Custom CRC Verification with different Polynomial (0x08C71CC1) */
static uint8_t Calculate_CRC32 (uint8_t* Buffer, uint32_t Buffer_Length, uint32_t Host_CRC)
{
 800083c:	b480      	push	{r7}
 800083e:	b08b      	sub	sp, #44	; 0x2c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t MCU_CRC_Calculated = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
    uint32_t CRC_Value = 0xFFFFFFFF;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	e01f      	b.n	800089e <Calculate_CRC32+0x62>
	{
      CRC_Value = CRC_Value ^ Buffer[i];
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	4053      	eors	r3, r2
 800086c:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e00e      	b.n	8000892 <Calculate_CRC32+0x56>
	{
      if(CRC_Value & 0x80000000)
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	da05      	bge.n	8000886 <Calculate_CRC32+0x4a>
	  {
            CRC_Value = (CRC_Value << 1) ^ 0x08C71CC1;
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <Calculate_CRC32+0x90>)
 8000880:	4053      	eors	r3, r2
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	e002      	b.n	800088c <Calculate_CRC32+0x50>
      }
	  else
	  {
            CRC_Value = (CRC_Value << 1);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	3301      	adds	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	d9ed      	bls.n	8000874 <Calculate_CRC32+0x38>
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	3301      	adds	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3db      	bcc.n	800085e <Calculate_CRC32+0x22>
      }
      }
  }
	/* Compare the Host CRC and Calculated CRC */
	if(CRC_Value == Host_CRC)
 80008a6:	6a3a      	ldr	r2, [r7, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d103      	bne.n	80008b6 <Calculate_CRC32+0x7a>
	{
		   CRC_Status = CRC_VERIFICATION_PASSED;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008b4:	e002      	b.n	80008bc <Calculate_CRC32+0x80>
	}
	else
	{
		   CRC_Status = CRC_VERIFICATION_FAILED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	       return CRC_Status;
 80008bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	372c      	adds	r7, #44	; 0x2c
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	08c71cc1 	.word	0x08c71cc1

080008d0 <Bootloader_Get_Version>:
  * @brief  Get Bootloader Version.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Version	(uint8_t *Host_Buffer){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	/* Local Definations Scope */
	uint8_t BL_Version [4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <Bootloader_Get_Version+0x60>)
 80008da:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80008fa:	8afb      	ldrh	r3, [r7, #22]
 80008fc:	3b04      	subs	r3, #4
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <Calculate_CRC32>
 8000908:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800090a:	2b01      	cmp	r3, #1
 800090c:	d109      	bne.n	8000922 <Bootloader_Get_Version+0x52>

		Bootloader_Send_ACK(4);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff ff32 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(BL_Version, 4);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff18 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	  Bootloader_Send_NACK();
	}	
}
 8000920:	e001      	b.n	8000926 <Bootloader_Get_Version+0x56>
	  Bootloader_Send_NACK();
 8000922:	f7ff ff3e 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	01000164 	.word	0x01000164

08000934 <Bootloader_Get_Help>:
  * @brief  Get Commands Help.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Help	(uint8_t *Host_Buffer){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	81fb      	strh	r3, [r7, #14]
  uint32_t Host_CRC32 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3301      	adds	r3, #1
 800094c:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	3b04      	subs	r3, #4
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60bb      	str	r3, [r7, #8]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	3b04      	subs	r3, #4
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff6a 	bl	800083c <Calculate_CRC32>
 8000968:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <Bootloader_Get_Help+0x4a>

		Bootloader_Send_ACK(12);
 800096e:	200c      	movs	r0, #12
 8000970:	f7ff ff02 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs, 12);
 8000974:	210c      	movs	r1, #12
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <Bootloader_Get_Help+0x58>)
 8000978:	f7ff feea 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 800097c:	e001      	b.n	8000982 <Bootloader_Get_Help+0x4e>
	Bootloader_Send_NACK();
 800097e:	f7ff ff10 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000

08000990 <Bootloader_Get_Chip_Identification_Number>:
  * @brief  Get Chip Identification Number.
  * @param  *pData   : Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Chip_Identification_Number	(uint8_t *Host_Buffer){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3301      	adds	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	3b04      	subs	r3, #4
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	3b04      	subs	r3, #4
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff3a 	bl	800083c <Calculate_CRC32>
 80009c8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d110      	bne.n	80009f0 <Bootloader_Get_Chip_Identification_Number+0x60>

		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Bootloader_Get_Chip_Identification_Number+0x6c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d8:	b29b      	uxth	r3, r3
 80009da:	81fb      	strh	r3, [r7, #14]
		Bootloader_Send_ACK(2);
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff fecb 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t* )&MCU_Identification_Number, 2);
 80009e2:	f107 030e 	add.w	r3, r7, #14
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff feb1 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 80009ee:	e001      	b.n	80009f4 <Bootloader_Get_Chip_Identification_Number+0x64>
	Bootloader_Send_NACK();
 80009f0:	f7ff fed7 	bl	80007a2 <Bootloader_Send_NACK>
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e0042000 	.word	0xe0042000

08000a00 <Bootloader_Jump_To_UserApp>:
  * @brief  Jump To User Application.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_UserApp (uint8_t *Host_Buffer){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a1a:	8bfb      	ldrh	r3, [r7, #30]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED ==
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000a26:	8bfb      	ldrh	r3, [r7, #30]
 8000a28:	3b04      	subs	r3, #4
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff04 	bl	800083c <Calculate_CRC32>
 8000a34:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED ==
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11b      	bne.n	8000a72 <Bootloader_Jump_To_UserApp+0x72>


		Bootloader_Send_ACK(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fe9c 	bl	8000778 <Bootloader_Send_ACK>

		Bootloader_Send_Data_To_Host((uint8_t*)CRC_VERIFICATION_PASSED, 1);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe84 	bl	8000750 <Bootloader_Send_Data_To_Host>
		/* ------> Jump to user Application <------ */
    // Read the MSP (Main Stack Pointer) value from the user application's vector table
		Bootloader_Jump_To_Application();
 8000a48:	f000 f81e 	bl	8000a88 <Bootloader_Jump_To_Application>
    uint32_t MSP_value   = *((volatile uint32_t* )0x08008000U);
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <Bootloader_Jump_To_UserApp+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	617b      	str	r3, [r7, #20]
	  // Read the reset handler address from the user application's vector table
	  uint32_t MainAppAdd  = *((volatile uint32_t* )(0x08008000U + 4));
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <Bootloader_Jump_To_UserApp+0x84>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
	  // Define a function pointer to the reset handler address
	  pMainApp ResetHandler_Address = (pMainApp)MainAppAdd;
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f383 8808 	msr	MSP, r3
}
 8000a66:	bf00      	nop
	  // Set the MSP to the value obtained from the user application's vector table
	  __set_MSP(MSP_value);
	  // Deinitialize the RCC (Reset and Clock Control) peripheral (Block any External Interrupts)
	  HAL_RCC_DeInit();
 8000a68:	f002 fa7e 	bl	8002f68 <HAL_RCC_DeInit>
	  // Jump to the reset handler address in the user application
	  ResetHandler_Address();
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4798      	blx	r3

	  Bootloader_Send_NACK();
	}


}
 8000a70:	e001      	b.n	8000a76 <Bootloader_Jump_To_UserApp+0x76>
	  Bootloader_Send_NACK();
 8000a72:	f7ff fe96 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08008000 	.word	0x08008000
 8000a84:	08008004 	.word	0x08008004

08000a88 <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application()
  {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
	    void(*App_Reset_Handler)(void);

	  	uint32_t ResetHandlerAddress ;

	  	/*configure MSP of user APP by reading value form base address of sector2*/
	  	uint32_t Local_u32MSPval =*((volatile uint32_t * )(0x08008000));
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <Bootloader_Jump_To_Application+0x28>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]

	  	/*write the user MSP value inside into msp register*/
	  	__asm volatile("msr MSP,%0"::"r"(Local_u32MSPval));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f383 8808 	msr	MSP, r3

	  	/*Get reset Handler Address of user app*/
	  	ResetHandlerAddress = *((volatile uint32_t * ) (0x08008000 + 4)) ;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <Bootloader_Jump_To_Application+0x2c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60bb      	str	r3, [r7, #8]

	  	App_Reset_Handler=(void*)ResetHandlerAddress;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	607b      	str	r3, [r7, #4]

	  	/*jump to the user app handler */
	  	App_Reset_Handler();
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4798      	blx	r3



  }
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08008000 	.word	0x08008000
 8000ab4:	08008004 	.word	0x08008004

08000ab8 <Host_Address_Verification>:
  * @param  Jump_Address.
  * @retval Address_Verification.
**************************************************************************************/

static uint8_t Host_Address_Verification (uint32_t Jump_Address)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aca:	d306      	bcc.n	8000ada <Host_Address_Verification+0x22>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <Host_Address_Verification+0x4c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d802      	bhi.n	8000ada <Host_Address_Verification+0x22>
	{
		  Address_Verification = ADDRESS_IS_VALID;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e00c      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END)){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ae0:	d306      	bcc.n	8000af0 <Host_Address_Verification+0x38>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000ae8:	d802      	bhi.n	8000af0 <Host_Address_Verification+0x38>
		  Address_Verification = ADDRESS_IS_VALID;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e001      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else{
		  Address_Verification = ADDRESS_IS_INVALID;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20040000 	.word	0x20040000

08000b08 <Bootloader_Jump_To_Address>:
  * @brief  Jump To Specific Address.
  * @param  *Host_Buffer: Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3301      	adds	r3, #1
 8000b28:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000b2a:	8bfb      	ldrh	r3, [r7, #30]
 8000b2c:	3b04      	subs	r3, #4
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED == 
		                     Bootloader_CRC_Verify(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000b36:	8bfb      	ldrh	r3, [r7, #30]
 8000b38:	3b04      	subs	r3, #4
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fe3e 	bl	80007c0 <Bootloader_CRC_Verify>
 8000b44:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d121      	bne.n	8000b8e <Bootloader_Jump_To_Address+0x86>

		Bootloader_Send_ACK(1);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fe14 	bl	8000778 <Bootloader_Send_ACK>
		HOST_Jump_Address = *((uint32_t* )&Host_Buffer[2]);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000b56:	617b      	str	r3, [r7, #20]
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);				
 8000b58:	6978      	ldr	r0, [r7, #20]
 8000b5a:	f7ff ffad 	bl	8000ab8 <Host_Address_Verification>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	73fb      	strb	r3, [r7, #15]
    if( ADDRESS_IS_VALID == Address_Verification ){
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d10b      	bne.n	8000b80 <Bootloader_Jump_To_Address+0x78>

			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000b68:	f107 030f 	add.w	r3, r7, #15
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fdee 	bl	8000750 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump (1 --> state for thumb architecture) */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
			Jump_Address();
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4798      	blx	r3
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 8000b7e:	e008      	b.n	8000b92 <Bootloader_Jump_To_Address+0x8a>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000b80:	f107 030f 	add.w	r3, r7, #15
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fde2 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000b8c:	e001      	b.n	8000b92 <Bootloader_Jump_To_Address+0x8a>
	Bootloader_Send_NACK();
 8000b8e:	f7ff fe08 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <Perform_Flash_Erase>:



#define INVALID_SECTOR            0x12
  uint8_t Perform_Flash_Erase(uint8_t initial_sector_number, uint8_t number_of_sector)
  {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b08a      	sub	sp, #40	; 0x28
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	460a      	mov	r2, r1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	71bb      	strb	r3, [r7, #6]
  	//we have totally 12 sectors in one bank .. sector[0 to 11]
  	//number_of_sector has to be in the range of 0 to 11
  	// if sector_number = 0xff , that means mass erase !

  	FLASH_EraseInitTypeDef flashErase_handle;
  	uint32_t sectorError = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  	uint8_t erase_status = 0x01;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  	if (number_of_sector > 23)
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	2b17      	cmp	r3, #23
 8000bb8:	d901      	bls.n	8000bbe <Perform_Flash_Erase+0x24>
  		return (uint8_t) INVALID_SECTOR;
 8000bba:	2312      	movs	r3, #18
 8000bbc:	e027      	b.n	8000c0e <Perform_Flash_Erase+0x74>

  	if ((initial_sector_number == 0xFFFFFFFF) || (number_of_sector <= 23)) {
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	2b17      	cmp	r3, #23
 8000bc2:	d823      	bhi.n	8000c0c <Perform_Flash_Erase+0x72>
  		if (number_of_sector == (uint32_t) 0xFFFFFFFF) {
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
  			flashErase_handle.Banks = FLASH_BANK_1;
  		} else {
  			/*Here we are just calculating how many sectors needs to erased */
  			uint32_t remanining_sector = 24 - number_of_sector;
 8000bc4:	79bb      	ldrb	r3, [r7, #6]
 8000bc6:	f1c3 0318 	rsb	r3, r3, #24
 8000bca:	623b      	str	r3, [r7, #32]
  			if (number_of_sector > remanining_sector) {
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	6a3a      	ldr	r2, [r7, #32]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d201      	bcs.n	8000bd8 <Perform_Flash_Erase+0x3e>
  				number_of_sector = remanining_sector;
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	71bb      	strb	r3, [r7, #6]
  			}
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  			flashErase_handle.Sector = initial_sector_number; // this is the initial sector
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	617b      	str	r3, [r7, #20]
  			flashErase_handle.NbSectors = number_of_sector;
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	61bb      	str	r3, [r7, #24]
  		}

  		/*Get access to touch the flash registers */
  		HAL_FLASH_Unlock();
 8000be4:	f001 f8d6 	bl	8001d94 <HAL_FLASH_Unlock>
  		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our MCU will work on this voltage range
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  		erase_status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle,
 8000bec:	f107 0208 	add.w	r2, r7, #8
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fa3e 	bl	8002078 <HAL_FLASHEx_Erase>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  				&sectorError);
  		HAL_FLASH_Lock();
 8000c02:	f001 f8e9 	bl	8001dd8 <HAL_FLASH_Lock>

  		return (uint8_t) erase_status;
 8000c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0a:	e000      	b.n	8000c0e <Perform_Flash_Erase+0x74>
  	}

  	return (uint8_t) INVALID_SECTOR;
 8000c0c:	2312      	movs	r3, #18
  }
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <Bootloader_Erase_Flash>:





static void Bootloader_Erase_Flash	(uint8_t *Host_Buffer){
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3301      	adds	r3, #1
 8000c32:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000c34:	8afb      	ldrh	r3, [r7, #22]
 8000c36:	3b04      	subs	r3, #4
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000c40:	8afb      	ldrh	r3, [r7, #22]
 8000c42:	3b04      	subs	r3, #4
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4619      	mov	r1, r3
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff fdf7 	bl	800083c <Calculate_CRC32>
 8000c4e:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d115      	bne.n	8000c80 <Bootloader_Erase_Flash+0x6a>

		Bootloader_Send_ACK(1);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff fd8f 	bl	8000778 <Bootloader_Send_ACK>
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3303      	adds	r3, #3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4619      	mov	r1, r3
 8000c68:	4610      	mov	r0, r2
 8000c6a:	f7ff ff96 	bl	8000b9a <Perform_Flash_Erase>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000c72:	f107 030f 	add.w	r3, r7, #15
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fd69 	bl	8000750 <Bootloader_Send_Data_To_Host>
  }
	else{

	Bootloader_Send_NACK();
	}	
}
 8000c7e:	e001      	b.n	8000c84 <Bootloader_Erase_Flash+0x6e>
	Bootloader_Send_NACK();
 8000c80:	f7ff fd8f 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Flash_Memory_Write_Payload>:
  * @param  *Payload_Len           :Data Length.
  * @param  Number_Of_Sectors.
  * @retval Flash_Payload_Write_Status.
**************************************************************************************/

uint8_t Flash_Memory_Write_Payload (uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	4613      	mov	r3, r2
 8000c98:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_Counter = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	837b      	strh	r3, [r7, #26]
	uint32_t Address = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000caa:	f001 f873 	bl	8001d94 <HAL_FLASH_Unlock>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK){
 8000cb2:	7ffb      	ldrb	r3, [r7, #31]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <Flash_Memory_Write_Payload+0x32>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	77bb      	strb	r3, [r7, #30]
 8000cbc:	e025      	b.n	8000d0a <Flash_Memory_Write_Payload+0x7e>
	}
	else{
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	83bb      	strh	r3, [r7, #28]
 8000cc2:	e01e      	b.n	8000d02 <Flash_Memory_Write_Payload+0x76>
            /* Use uint16_t pointer to properly handle 16-bit data */
            uint16_t* dataToWrite = (uint16_t*)&Host_Payload[Payload_Counter];
 8000cc4:	8bbb      	ldrh	r3, [r7, #28]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000ccc:	8bba      	ldrh	r2, [r7, #28]
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	18d1      	adds	r1, r2, r3
                                           Payload_Start_Address + Payload_Counter,
                                           *dataToWrite);
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	461c      	mov	r4, r3
 8000cdc:	4615      	mov	r5, r2
 8000cde:	4622      	mov	r2, r4
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f000 ff4c 	bl	8001b80 <HAL_FLASH_Program>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	77fb      	strb	r3, [r7, #31]
            if (HAL_Status != HAL_OK){
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <Flash_Memory_Write_Payload+0x6c>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	77bb      	strb	r3, [r7, #30]
                break;
 8000cf6:	e008      	b.n	8000d0a <Flash_Memory_Write_Payload+0x7e>
            }
            else {
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	77bb      	strb	r3, [r7, #30]
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000cfc:	8bbb      	ldrh	r3, [r7, #28]
 8000cfe:	3302      	adds	r3, #2
 8000d00:	83bb      	strh	r3, [r7, #28]
 8000d02:	8bba      	ldrh	r2, [r7, #28]
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3dc      	bcc.n	8000cc4 <Flash_Memory_Write_Payload+0x38>
            }
        }
  }
	
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000d0a:	7fbb      	ldrb	r3, [r7, #30]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d10f      	bne.n	8000d30 <Flash_Memory_Write_Payload+0xa4>
 8000d10:	7ffb      	ldrb	r3, [r7, #31]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10c      	bne.n	8000d30 <Flash_Memory_Write_Payload+0xa4>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000d16:	f001 f85f 	bl	8001dd8 <HAL_FLASH_Lock>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK){
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <Flash_Memory_Write_Payload+0x9e>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d24:	2300      	movs	r3, #0
 8000d26:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000d28:	e004      	b.n	8000d34 <Flash_Memory_Write_Payload+0xa8>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000d2e:	e001      	b.n	8000d34 <Flash_Memory_Write_Payload+0xa8>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d30:	2300      	movs	r3, #0
 8000d32:	77bb      	strb	r3, [r7, #30]
	}
	
	return Flash_Payload_Write_Status;
 8000d34:	7fbb      	ldrb	r3, [r7, #30]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3720      	adds	r7, #32
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}

08000d3e <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write	(uint8_t *Host_Buffer)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
    uint32_t HOST_Address = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000d52:	2300      	movs	r3, #0
 8000d54:	72bb      	strb	r3, [r7, #10]
	uint8_t Payload_Len = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	72fb      	strb	r3, [r7, #11]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	727b      	strb	r3, [r7, #9]
	

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1; //calculate the length
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	3301      	adds	r3, #1
 8000d66:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000d68:	8afb      	ldrh	r3, [r7, #22]
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32))
 8000d74:	8afb      	ldrh	r3, [r7, #22]
 8000d76:	3b04      	subs	r3, #4
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fd5d 	bl	800083c <Calculate_CRC32>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d139      	bne.n	8000dfc <Bootloader_Memory_Write+0xbe>
	{

		Bootloader_Send_ACK(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fcf5 	bl	8000778 <Bootloader_Send_ACK>
	 /* Extract the payload length from the Host packet */
	    Payload_Len  = Host_Buffer[6];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	799b      	ldrb	r3, [r3, #6]
 8000d92:	72fb      	strb	r3, [r7, #11]
	 /* Extract the start address from the Host packet */
        HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000d9a:	60fb      	str	r3, [r7, #12]
     /* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fe8b 	bl	8000ab8 <Host_Address_Verification>
 8000da2:	4603      	mov	r3, r0
 8000da4:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000da6:	7abb      	ldrb	r3, [r7, #10]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11e      	bne.n	8000dea <Bootloader_Memory_Write+0xac>
		{
        Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3307      	adds	r3, #7
 8000db0:	7afa      	ldrb	r2, [r7, #11]
 8000db2:	b292      	uxth	r2, r2
 8000db4:	68f9      	ldr	r1, [r7, #12]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff ff68 	bl	8000c8c <Flash_Memory_Write_Payload>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	727b      	strb	r3, [r7, #9]

        if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 8000dc0:	7a7b      	ldrb	r3, [r7, #9]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10a      	bne.n	8000ddc <Bootloader_Memory_Write+0x9e>
        {
				 /* Report payload write passed */
		Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000dc6:	f107 0309 	add.w	r3, r7, #9
 8000dca:	2101      	movs	r1, #1
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fcbf 	bl	8000750 <Bootloader_Send_Data_To_Host>
				 /* ------> Send Acknowledge <------ */
        Bootloader_Send_Data_To_Host((uint8_t* )CBL_SEND_ACK, 1);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	20cd      	movs	r0, #205	; 0xcd
 8000dd6:	f7ff fcbb 	bl	8000750 <Bootloader_Send_Data_To_Host>
	else
	{

	Bootloader_Send_NACK();
	}	
}
 8000dda:	e011      	b.n	8000e00 <Bootloader_Memory_Write+0xc2>
			Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000ddc:	f107 0309 	add.w	r3, r7, #9
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fcb4 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000de8:	e00a      	b.n	8000e00 <Bootloader_Memory_Write+0xc2>
			Address_Verification = ADDRESS_IS_INVALID;
 8000dea:	2300      	movs	r3, #0
 8000dec:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000dee:	f107 030a 	add.w	r3, r7, #10
 8000df2:	2101      	movs	r1, #1
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fcab 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000dfa:	e001      	b.n	8000e00 <Bootloader_Memory_Write+0xc2>
	Bootloader_Send_NACK();
 8000dfc:	f7ff fcd1 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_CRC_Init+0x20>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <MX_CRC_Init+0x24>)
 8000e10:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_CRC_Init+0x20>)
 8000e14:	f000 fddb 	bl	80019ce <HAL_CRC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e1e:	f000 f991 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000154 	.word	0x20000154
 8000e2c:	40023000 	.word	0x40023000

08000e30 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_CRC_MspInit+0x3c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10d      	bne.n	8000e5e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_CRC_MspInit+0x40>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <HAL_CRC_MspInit+0x40>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_CRC_MspInit+0x40>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023000 	.word	0x40023000
 8000e70:	40023800 	.word	0x40023800

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	4b3f      	ldr	r3, [pc, #252]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a3e      	ldr	r2, [pc, #248]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b3c      	ldr	r3, [pc, #240]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0304 	and.w	r3, r3, #4
 8000ea2:	61bb      	str	r3, [r7, #24]
 8000ea4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	4b38      	ldr	r3, [pc, #224]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a37      	ldr	r2, [pc, #220]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b31      	ldr	r3, [pc, #196]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a30      	ldr	r2, [pc, #192]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b27      	ldr	r3, [pc, #156]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a22      	ldr	r2, [pc, #136]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f04:	f043 0308 	orr.w	r3, r3, #8
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0308 	and.w	r3, r3, #8
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_GPIO_Init+0x118>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2120      	movs	r1, #32
 8000f36:	4816      	ldr	r0, [pc, #88]	; (8000f90 <MX_GPIO_Init+0x11c>)
 8000f38:	f001 fb8a 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f42:	4814      	ldr	r0, [pc, #80]	; (8000f94 <MX_GPIO_Init+0x120>)
 8000f44:	f001 fb84 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f48:	2320      	movs	r3, #32
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_GPIO_Init+0x11c>)
 8000f60:	f001 f9ca 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_GPIO_Init+0x120>)
 8000f7e:	f001 f9bb 	bl	80022f8 <HAL_GPIO_Init>

}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000
 8000f94:	40021800 	.word	0x40021800

08000f98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d013      	beq.n	8000fd8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00b      	beq.n	8000fd8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc0:	e000      	b.n	8000fc4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fc2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_write>:
	HAL_NVIC_SystemReset();

}

int _write(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffc7 	bl	8000f98 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x16>
  return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <main>:
	return checkBank;
}


int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
printf("starting\n\r");
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <main+0x50>)
 800102a:	f003 f9ef 	bl	800440c <iprintf>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fb4b 	bl	80016c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f827 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f7ff ff1d 	bl	8000e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800103a:	f000 f9f9 	bl	8001430 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800103e:	f000 f9cd 	bl	80013dc <MX_USART1_UART_Init>
  MX_CRC_Init();
 8001042:	f7ff fee1 	bl	8000e08 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8001046:	f000 fa1d 	bl	8001484 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14,1);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <main+0x54>)
 8001052:	f001 fafd 	bl	8002650 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	2201      	movs	r2, #1
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <main+0x58>)
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <main+0x5c>)
 8001060:	f002 f955 	bl	800330e <HAL_UART_Receive>
	    				if (0x7F == indecator_Var)
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <main+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b7f      	cmp	r3, #127	; 0x7f
 800106c:	d1f3      	bne.n	8001056 <main+0x32>
	    				    BL_UART_Fetch_Host_Command();
 800106e:	f7ff fab3 	bl	80005d8 <BL_UART_Fetch_Host_Command>
	  HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 8001072:	e7f0      	b.n	8001056 <main+0x32>
 8001074:	08005634 	.word	0x08005634
 8001078:	40021800 	.word	0x40021800
 800107c:	2000015c 	.word	0x2000015c
 8001080:	200001f4 	.word	0x200001f4

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fa30 	bl	80044f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <SystemClock_Config+0xb8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SystemClock_Config+0xb8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemClock_Config+0xb8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <SystemClock_Config+0xbc>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <SystemClock_Config+0xbc>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <SystemClock_Config+0xbc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ec:	2310      	movs	r3, #16
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 fadd 	bl	80026b8 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001104:	f000 f81e 	bl	8001144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f001 fd40 	bl	8002ba8 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800112e:	f000 f809 	bl	8001144 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001148:	b672      	cpsid	i
}
 800114a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114c:	e7fe      	b.n	800114c <Error_Handler+0x8>
	...

08001150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_MspInit+0x88>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a1e      	ldr	r2, [pc, #120]	; (80011d8 <HAL_MspInit+0x88>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <HAL_MspInit+0x88>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_MspInit+0x88>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_MspInit+0x88>)
 800117c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_MspInit+0x88>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f000 fbe5 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001198:	2001      	movs	r0, #1
 800119a:	f000 fbfe 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2004      	movs	r0, #4
 80011a4:	f000 fbdd 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80011a8:	2004      	movs	r0, #4
 80011aa:	f000 fbf6 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 fbd5 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011b8:	2005      	movs	r0, #5
 80011ba:	f000 fbee 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2051      	movs	r0, #81	; 0x51
 80011c4:	f000 fbcd 	bl	8001962 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80011c8:	2051      	movs	r0, #81	; 0x51
 80011ca:	f000 fbe6 	bl	800199a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 faa0 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001234:	f001 fa26 	bl	8002684 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001240:	f000 fcf2 	bl	8001c28 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <USART1_IRQHandler+0x10>)
 800125e:	f002 f8ed 	bl	800343c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000164 	.word	0x20000164

0800126c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <USART2_IRQHandler+0x10>)
 8001272:	f002 f8e3 	bl	800343c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200001ac 	.word	0x200001ac

08001280 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <USART3_IRQHandler+0x10>)
 8001286:	f002 f8d9 	bl	800343c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001f4 	.word	0x200001f4

08001294 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	60f8      	str	r0, [r7, #12]
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	e00a      	b.n	80012ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012b4:	f3af 8000 	nop.w
 80012b8:	4601      	mov	r1, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	60ba      	str	r2, [r7, #8]
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	dbf0      	blt.n	80012b4 <_read+0x12>
  }

  return len;
 80012d2:	687b      	ldr	r3, [r7, #4]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_close>:
  }
  return len;
}

int _close(int file)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001304:	605a      	str	r2, [r3, #4]
  return 0;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_isatty>:

int _isatty(int file)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132a:	b480      	push	{r7}
 800132c:	b085      	sub	sp, #20
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f003 f90e 	bl	8004594 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20030000 	.word	0x20030000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	20000160 	.word	0x20000160
 80013ac:	200003b0 	.word	0x200003b0

080013b0 <SystemInit>:
  * @param  None
  * @retval None
  */
#define USER_VECT_TAB_ADDRESS
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <SystemInit+0x28>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <SystemInit+0x28>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = 0x08000000;
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SystemInit+0x28>)
 80013c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ca:	609a      	str	r2, [r3, #8]
		  /*VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <MX_USART1_UART_Init+0x50>)
 80013e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_USART1_UART_Init+0x4c>)
 8001414:	f001 fea0 	bl	8003158 <HAL_UART_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800141e:	f7ff fe91 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000164 	.word	0x20000164
 800142c:	40011000 	.word	0x40011000

08001430 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART2_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART2_UART_Init+0x4c>)
 8001468:	f001 fe76 	bl	8003158 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f7ff fe67 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001ac 	.word	0x200001ac
 8001480:	40004400 	.word	0x40004400

08001484 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_USART3_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 8001490:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART3_UART_Init+0x4c>)
 80014bc:	f001 fe4c 	bl	8003158 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f7ff fe3d 	bl	8001144 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	40004800 	.word	0x40004800

080014d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_UART_MspInit+0x180>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d135      	bne.n	8001566 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_UART_MspInit+0x184>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_UART_MspInit+0x184>)
 8001504:	f043 0310 	orr.w	r3, r3, #16
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b54      	ldr	r3, [pc, #336]	; (800165c <HAL_UART_MspInit+0x184>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f003 0310 	and.w	r3, r3, #16
 8001512:	623b      	str	r3, [r7, #32]
 8001514:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <HAL_UART_MspInit+0x184>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a4f      	ldr	r2, [pc, #316]	; (800165c <HAL_UART_MspInit+0x184>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_UART_MspInit+0x184>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001532:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	2303      	movs	r3, #3
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001544:	2307      	movs	r3, #7
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4844      	ldr	r0, [pc, #272]	; (8001660 <HAL_UART_MspInit+0x188>)
 8001550:	f000 fed2 	bl	80022f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2025      	movs	r0, #37	; 0x25
 800155a:	f000 fa02 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800155e:	2025      	movs	r0, #37	; 0x25
 8001560:	f000 fa1b 	bl	800199a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001564:	e073      	b.n	800164e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a3e      	ldr	r2, [pc, #248]	; (8001664 <HAL_UART_MspInit+0x18c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d134      	bne.n	80015da <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	61bb      	str	r3, [r7, #24]
 8001574:	4b39      	ldr	r3, [pc, #228]	; (800165c <HAL_UART_MspInit+0x184>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a38      	ldr	r2, [pc, #224]	; (800165c <HAL_UART_MspInit+0x184>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <HAL_UART_MspInit+0x184>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <HAL_UART_MspInit+0x184>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4a31      	ldr	r2, [pc, #196]	; (800165c <HAL_UART_MspInit+0x184>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <HAL_UART_MspInit+0x184>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015a8:	2360      	movs	r3, #96	; 0x60
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b8:	2307      	movs	r3, #7
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4829      	ldr	r0, [pc, #164]	; (8001668 <HAL_UART_MspInit+0x190>)
 80015c4:	f000 fe98 	bl	80022f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	2026      	movs	r0, #38	; 0x26
 80015ce:	f000 f9c8 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d2:	2026      	movs	r0, #38	; 0x26
 80015d4:	f000 f9e1 	bl	800199a <HAL_NVIC_EnableIRQ>
}
 80015d8:	e039      	b.n	800164e <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_UART_MspInit+0x194>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d134      	bne.n	800164e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x184>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_UART_MspInit+0x184>)
 80015ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x184>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x184>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x184>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0x184>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800161c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800162e:	2307      	movs	r3, #7
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	480d      	ldr	r0, [pc, #52]	; (8001670 <HAL_UART_MspInit+0x198>)
 800163a:	f000 fe5d 	bl	80022f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2027      	movs	r0, #39	; 0x27
 8001644:	f000 f98d 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001648:	2027      	movs	r0, #39	; 0x27
 800164a:	f000 f9a6 	bl	800199a <HAL_NVIC_EnableIRQ>
}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40011000 	.word	0x40011000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40004400 	.word	0x40004400
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40004800 	.word	0x40004800
 8001670:	40020400 	.word	0x40020400

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001678:	f7ff fe9a 	bl	80013b0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	; (80016b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	; (80016c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016a2:	f002 ff7d 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7ff fcbd 	bl	8001024 <main>
  bx  lr    
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016b8:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 80016bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016c0:	200003ac 	.word	0x200003ac

080016c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC_IRQHandler>
	...

080016c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0d      	ldr	r2, [pc, #52]	; (8001708 <HAL_Init+0x40>)
 80016d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_Init+0x40>)
 80016de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x40>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f92b 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fd28 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f943 	bl	80019b6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f000 f90b 	bl	8001962 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000008 	.word	0x20000008
 8001764:	20000010 	.word	0x20000010
 8001768:	2000000c 	.word	0x2000000c

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000010 	.word	0x20000010
 8001790:	2000023c 	.word	0x2000023c

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000023c 	.word	0x2000023c

080017ac <__NVIC_SetPriorityGrouping>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e00e      	b.n	80019fe <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	795b      	ldrb	r3, [r3, #5]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fa1d 	bl	8000e30 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b087      	sub	sp, #28
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2202      	movs	r2, #2
 8001a1a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	441a      	add	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d3f0      	bcc.n	8001a22 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001a4e:	693b      	ldr	r3, [r7, #16]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a6a:	f7ff fe93 	bl	8001794 <HAL_GetTick>
 8001a6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e052      	b.n	8001b34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0216 	bic.w	r2, r2, #22
 8001a9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_DMA_Abort+0x62>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0208 	bic.w	r2, r2, #8
 8001acc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ade:	e013      	b.n	8001b08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ae0:	f7ff fe58 	bl	8001794 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d90c      	bls.n	8001b08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2203      	movs	r2, #3
 8001af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e015      	b.n	8001b34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1e4      	bne.n	8001ae0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	223f      	movs	r2, #63	; 0x3f
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d004      	beq.n	8001b5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00c      	b.n	8001b74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_FLASH_Program+0xa0>)
 8001b94:	7e1b      	ldrb	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_FLASH_Program+0x1e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e03b      	b.n	8001c16 <HAL_FLASH_Program+0x96>
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_FLASH_Program+0xa0>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ba4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ba8:	f000 f926 	bl	8001df8 <FLASH_WaitForLastOperation>
 8001bac:	4603      	mov	r3, r0
 8001bae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d12b      	bne.n	8001c0e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d105      	bne.n	8001bc8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001bbc:	783b      	ldrb	r3, [r7, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	68b8      	ldr	r0, [r7, #8]
 8001bc2:	f000 f9d1 	bl	8001f68 <FLASH_Program_Byte>
 8001bc6:	e016      	b.n	8001bf6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d105      	bne.n	8001bda <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001bce:	883b      	ldrh	r3, [r7, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68b8      	ldr	r0, [r7, #8]
 8001bd4:	f000 f9a4 	bl	8001f20 <FLASH_Program_HalfWord>
 8001bd8:	e00d      	b.n	8001bf6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d105      	bne.n	8001bec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	68b8      	ldr	r0, [r7, #8]
 8001be6:	f000 f979 	bl	8001edc <FLASH_Program_Word>
 8001bea:	e004      	b.n	8001bf6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bf0:	68b8      	ldr	r0, [r7, #8]
 8001bf2:	f000 f941 	bl	8001e78 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bf6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bfa:	f000 f8fd 	bl	8001df8 <FLASH_WaitForLastOperation>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_FLASH_Program+0xa4>)
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_FLASH_Program+0xa4>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_FLASH_Program+0xa0>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000240 	.word	0x20000240
 8001c24:	40023c00 	.word	0x40023c00

08001c28 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c32:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001c48:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001c4e:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e00b      	b.n	8001c70 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d103      	bne.n	8001c6a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e002      	b.n	8001c70 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001c70:	f000 f99c 	bl	8001fac <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f883 	bl	8001d80 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c7a:	4b3b      	ldr	r3, [pc, #236]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c80:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d04a      	beq.n	8001d22 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d12d      	bne.n	8001cf8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001ca4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d015      	beq.n	8001cda <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001cae:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f859 	bl	8001d6c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001cc2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001ccc:	7a1b      	ldrb	r3, [r3, #8]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa7c 	bl	80021d0 <FLASH_Erase_Sector>
 8001cd8:	e023      	b.n	8001d22 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001cec:	f000 fabe 	bl	800226c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f83b 	bl	8001d6c <HAL_FLASH_EndOfOperationCallback>
 8001cf6:	e014      	b.n	8001d22 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d107      	bne.n	8001d12 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001d02:	f000 fab3 	bl	800226c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001d06:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f82e 	bl	8001d6c <HAL_FLASH_EndOfOperationCallback>
 8001d10:	e004      	b.n	8001d1c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f828 	bl	8001d6c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d116      	bne.n	8001d5a <HAL_FLASH_IRQHandler+0x132>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a0c      	ldr	r2, [pc, #48]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d3a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_FLASH_IRQHandler+0x13c>)
 8001d4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001d52:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_FLASH_IRQHandler+0x140>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	761a      	strb	r2, [r3, #24]
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00
 8001d68:	20000240 	.word	0x20000240

08001d6c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_FLASH_Unlock+0x38>)
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da0b      	bge.n	8001dbe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_FLASH_Unlock+0x38>)
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_FLASH_Unlock+0x3c>)
 8001daa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_FLASH_Unlock+0x38>)
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_FLASH_Unlock+0x40>)
 8001db0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_FLASH_Unlock+0x38>)
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	da01      	bge.n	8001dbe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40023c00 	.word	0x40023c00
 8001dd0:	45670123 	.word	0x45670123
 8001dd4:	cdef89ab 	.word	0xcdef89ab

08001dd8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_FLASH_Lock+0x1c>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_FLASH_Lock+0x1c>)
 8001de2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001de6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <FLASH_WaitForLastOperation+0x78>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e0a:	f7ff fcc3 	bl	8001794 <HAL_GetTick>
 8001e0e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e10:	e010      	b.n	8001e34 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d00c      	beq.n	8001e34 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <FLASH_WaitForLastOperation+0x38>
 8001e20:	f7ff fcb8 	bl	8001794 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d201      	bcs.n	8001e34 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e019      	b.n	8001e68 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <FLASH_WaitForLastOperation+0x7c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e8      	bne.n	8001e12 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <FLASH_WaitForLastOperation+0x7c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e4c:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <FLASH_WaitForLastOperation+0x7c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <FLASH_WaitForLastOperation+0x7c>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e5e:	f000 f8a5 	bl	8001fac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
  
}  
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000240 	.word	0x20000240
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001e96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <FLASH_Program_DoubleWord+0x60>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001eae:	f3bf 8f6f 	isb	sy
}
 8001eb2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	68f9      	ldr	r1, [r7, #12]
 8001ec6:	3104      	adds	r1, #4
 8001ec8:	4613      	mov	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40023c00 	.word	0x40023c00

08001edc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ef0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001efe:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <FLASH_Program_Word+0x40>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f38:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <FLASH_Program_HalfWord+0x44>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	887a      	ldrh	r2, [r7, #2]
 8001f54:	801a      	strh	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <FLASH_Program_Byte+0x40>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	701a      	strb	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00

08001fac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	4a2b      	ldr	r2, [pc, #172]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8001fc6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8001fca:	2210      	movs	r2, #16
 8001fcc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f043 0308 	orr.w	r3, r3, #8
 8001fe2:	4a24      	ldr	r2, [pc, #144]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8001fe4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8001fe8:	2220      	movs	r2, #32
 8001fea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8002002:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8002006:	2240      	movs	r2, #64	; 0x40
 8002008:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8002020:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 800203e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8002042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002046:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	f043 0320 	orr.w	r3, r3, #32
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <FLASH_SetErrorCode+0xc8>)
 800205e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <FLASH_SetErrorCode+0xc4>)
 8002062:	2202      	movs	r2, #2
 8002064:	60da      	str	r2, [r3, #12]
  }
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40023c00 	.word	0x40023c00
 8002074:	20000240 	.word	0x20000240

08002078 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800208a:	4b32      	ldr	r3, [pc, #200]	; (8002154 <HAL_FLASHEx_Erase+0xdc>)
 800208c:	7e1b      	ldrb	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_FLASHEx_Erase+0x1e>
 8002092:	2302      	movs	r3, #2
 8002094:	e05a      	b.n	800214c <HAL_FLASHEx_Erase+0xd4>
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_FLASHEx_Erase+0xdc>)
 8002098:	2201      	movs	r2, #1
 800209a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800209c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020a0:	f7ff feaa 	bl	8001df8 <FLASH_WaitForLastOperation>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d14a      	bne.n	8002144 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d117      	bne.n	80020ee <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4619      	mov	r1, r3
 80020ca:	4610      	mov	r0, r2
 80020cc:	f000 f846 	bl	800215c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020d4:	f7ff fe90 	bl	8001df8 <FLASH_WaitForLastOperation>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80020dc:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_FLASHEx_Erase+0xe0>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4a1d      	ldr	r2, [pc, #116]	; (8002158 <HAL_FLASHEx_Erase+0xe0>)
 80020e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6113      	str	r3, [r2, #16]
 80020ec:	e028      	b.n	8002140 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	e01c      	b.n	8002130 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4619      	mov	r1, r3
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f000 f866 	bl	80021d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002104:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002108:	f7ff fe76 	bl	8001df8 <FLASH_WaitForLastOperation>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_FLASHEx_Erase+0xe0>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	4a10      	ldr	r2, [pc, #64]	; (8002158 <HAL_FLASHEx_Erase+0xe0>)
 8002116:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800211a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	601a      	str	r2, [r3, #0]
          break;
 8002128:	e00a      	b.n	8002140 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4413      	add	r3, r2
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3da      	bcc.n	80020f6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002140:	f000 f894 	bl	800226c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_FLASHEx_Erase+0xdc>)
 8002146:	2200      	movs	r2, #0
 8002148:	761a      	strb	r2, [r3, #24]

  return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000240 	.word	0x20000240
 8002158:	40023c00 	.word	0x40023c00

0800215c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <FLASH_MassErase+0x70>)
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <FLASH_MassErase+0x70>)
 800216e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002172:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d108      	bne.n	800218c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800217a:	4b14      	ldr	r3, [pc, #80]	; (80021cc <FLASH_MassErase+0x70>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4a13      	ldr	r2, [pc, #76]	; (80021cc <FLASH_MassErase+0x70>)
 8002180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6113      	str	r3, [r2, #16]
 800218a:	e00f      	b.n	80021ac <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d106      	bne.n	80021a0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <FLASH_MassErase+0x70>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <FLASH_MassErase+0x70>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6113      	str	r3, [r2, #16]
 800219e:	e005      	b.n	80021ac <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <FLASH_MassErase+0x70>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <FLASH_MassErase+0x70>)
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <FLASH_MassErase+0x70>)
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	4313      	orrs	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <FLASH_MassErase+0x70>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6113      	str	r3, [r2, #16]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	e010      	b.n	800220e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d103      	bne.n	80021fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80021f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e009      	b.n	800220e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d103      	bne.n	8002208 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	e002      	b.n	800220e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0b      	cmp	r3, #11
 8002212:	d902      	bls.n	800221a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <FLASH_Erase_Sector+0x98>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002224:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	490f      	ldr	r1, [pc, #60]	; (8002268 <FLASH_Erase_Sector+0x98>)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002232:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	4a0c      	ldr	r2, [pc, #48]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002238:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800223c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4313      	orrs	r3, r2
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <FLASH_Erase_Sector+0x98>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <FLASH_Erase_Sector+0x98>)
 8002256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225a:	6113      	str	r3, [r2, #16]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40023c00 	.word	0x40023c00

0800226c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <FLASH_FlushCaches+0x88>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002278:	2b00      	cmp	r3, #0
 800227a:	d017      	beq.n	80022ac <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <FLASH_FlushCaches+0x88>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <FLASH_FlushCaches+0x88>)
 8002282:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002286:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <FLASH_FlushCaches+0x88>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <FLASH_FlushCaches+0x88>)
 800228e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <FLASH_FlushCaches+0x88>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a16      	ldr	r2, [pc, #88]	; (80022f4 <FLASH_FlushCaches+0x88>)
 800229a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800229e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a13      	ldr	r2, [pc, #76]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d017      	beq.n	80022e8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022c2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022da:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <FLASH_FlushCaches+0x88>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
  }
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e177      	b.n	8002604 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8166 	bne.w	80025fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80c0 	beq.w	80025fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b66      	ldr	r3, [pc, #408]	; (800261c <HAL_GPIO_Init+0x324>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a65      	ldr	r2, [pc, #404]	; (800261c <HAL_GPIO_Init+0x324>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_GPIO_Init+0x324>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a61      	ldr	r2, [pc, #388]	; (8002620 <HAL_GPIO_Init+0x328>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_GPIO_Init+0x32c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d037      	beq.n	8002536 <HAL_GPIO_Init+0x23e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_GPIO_Init+0x330>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_GPIO_Init+0x23a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_GPIO_Init+0x334>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0x236>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a55      	ldr	r2, [pc, #340]	; (8002630 <HAL_GPIO_Init+0x338>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x232>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a54      	ldr	r2, [pc, #336]	; (8002634 <HAL_GPIO_Init+0x33c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x22e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a53      	ldr	r2, [pc, #332]	; (8002638 <HAL_GPIO_Init+0x340>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x22a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_GPIO_Init+0x344>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_GPIO_Init+0x348>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_GPIO_Init+0x34c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_GPIO_Init+0x350>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x21a>
 800250e:	2309      	movs	r3, #9
 8002510:	e012      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002512:	230a      	movs	r3, #10
 8002514:	e010      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002516:	2308      	movs	r3, #8
 8002518:	e00e      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251a:	2307      	movs	r3, #7
 800251c:	e00c      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800251e:	2306      	movs	r3, #6
 8002520:	e00a      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002522:	2305      	movs	r3, #5
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002526:	2304      	movs	r3, #4
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x240>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x240>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4935      	ldr	r1, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x328>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_GPIO_Init+0x354>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a34      	ldr	r2, [pc, #208]	; (800264c <HAL_GPIO_Init+0x354>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_GPIO_Init+0x354>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a29      	ldr	r2, [pc, #164]	; (800264c <HAL_GPIO_Init+0x354>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <HAL_GPIO_Init+0x354>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_GPIO_Init+0x354>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_GPIO_Init+0x354>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_GPIO_Init+0x354>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f ae84 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40013800 	.word	0x40013800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40021400 	.word	0x40021400
 800263c:	40021800 	.word	0x40021800
 8002640:	40021c00 	.word	0x40021c00
 8002644:	40022000 	.word	0x40022000
 8002648:	40022400 	.word	0x40022400
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002694:	f000 f808 	bl	80026a8 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002698:	4b02      	ldr	r3, [pc, #8]	; (80026a4 <HAL_PWR_PVD_IRQHandler+0x20>)
 800269a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800269e:	615a      	str	r2, [r3, #20]
  }
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e267      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d075      	beq.n	80027c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d6:	4b88      	ldr	r3, [pc, #544]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d00c      	beq.n	80026fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e2:	4b85      	ldr	r3, [pc, #532]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d112      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b82      	ldr	r3, [pc, #520]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d10b      	bne.n	8002714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	4b7e      	ldr	r3, [pc, #504]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05b      	beq.n	80027c0 <HAL_RCC_OscConfig+0x108>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d157      	bne.n	80027c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e242      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800271c:	d106      	bne.n	800272c <HAL_RCC_OscConfig+0x74>
 800271e:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a75      	ldr	r2, [pc, #468]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e01d      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002734:	d10c      	bne.n	8002750 <HAL_RCC_OscConfig+0x98>
 8002736:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00b      	b.n	8002768 <HAL_RCC_OscConfig+0xb0>
 8002750:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a68      	ldr	r2, [pc, #416]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a65      	ldr	r2, [pc, #404]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d013      	beq.n	8002798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002770:	f7ff f810 	bl	8001794 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002778:	f7ff f80c 	bl	8001794 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b64      	cmp	r3, #100	; 0x64
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e207      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	4b5b      	ldr	r3, [pc, #364]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0xc0>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe fffc 	bl	8001794 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a0:	f7fe fff8 	bl	8001794 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b64      	cmp	r3, #100	; 0x64
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1f3      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0xe8>
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027da:	4b47      	ldr	r3, [pc, #284]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d11c      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b44      	ldr	r3, [pc, #272]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d116      	bne.n	8002820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e1c7      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4937      	ldr	r1, [pc, #220]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	e03a      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002828:	4b34      	ldr	r3, [pc, #208]	; (80028fc <HAL_RCC_OscConfig+0x244>)
 800282a:	2201      	movs	r2, #1
 800282c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe ffb1 	bl	8001794 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe ffad 	bl	8001794 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1a8      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4925      	ldr	r1, [pc, #148]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]
 8002868:	e015      	b.n	8002896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCC_OscConfig+0x244>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe ff90 	bl	8001794 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002878:	f7fe ff8c 	bl	8001794 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e187      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d036      	beq.n	8002910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d016      	beq.n	80028d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_OscConfig+0x248>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe ff70 	bl	8001794 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe ff6c 	bl	8001794 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e167      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_OscConfig+0x240>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x200>
 80028d6:	e01b      	b.n	8002910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_OscConfig+0x248>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028de:	f7fe ff59 	bl	8001794 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e4:	e00e      	b.n	8002904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e6:	f7fe ff55 	bl	8001794 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d907      	bls.n	8002904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e150      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	42470000 	.word	0x42470000
 8002900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002904:	4b88      	ldr	r3, [pc, #544]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ea      	bne.n	80028e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8097 	beq.w	8002a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291e:	2300      	movs	r3, #0
 8002920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002922:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b7d      	ldr	r3, [pc, #500]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a7c      	ldr	r2, [pc, #496]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b7a      	ldr	r3, [pc, #488]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294a:	2301      	movs	r3, #1
 800294c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b77      	ldr	r3, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800295a:	4b74      	ldr	r3, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a73      	ldr	r2, [pc, #460]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002966:	f7fe ff15 	bl	8001794 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296e:	f7fe ff11 	bl	8001794 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e10c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4b6a      	ldr	r3, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x474>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d106      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2ea>
 8002994:	4b64      	ldr	r3, [pc, #400]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x30c>
 80029aa:	4b5f      	ldr	r3, [pc, #380]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a5e      	ldr	r2, [pc, #376]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a5b      	ldr	r2, [pc, #364]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x324>
 80029c4:	4b58      	ldr	r3, [pc, #352]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a57      	ldr	r2, [pc, #348]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 0301 	bic.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	4b55      	ldr	r3, [pc, #340]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a54      	ldr	r2, [pc, #336]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fed6 	bl	8001794 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fed2 	bl	8001794 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0cb      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b49      	ldr	r3, [pc, #292]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0ee      	beq.n	80029ec <HAL_RCC_OscConfig+0x334>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a10:	f7fe fec0 	bl	8001794 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe febc 	bl	8001794 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0b5      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1ee      	bne.n	8002a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 80a1 	beq.w	8002b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a56:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d05c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d141      	bne.n	8002aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7fe fe90 	bl	8001794 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fe8c 	bl	8001794 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e087      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69da      	ldr	r2, [r3, #28]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	019b      	lsls	r3, r3, #6
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	491b      	ldr	r1, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fe65 	bl	8001794 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ace:	f7fe fe61 	bl	8001794 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e05c      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x416>
 8002aec:	e054      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <HAL_RCC_OscConfig+0x478>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af4:	f7fe fe4e 	bl	8001794 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe fe4a 	bl	8001794 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e045      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_OscConfig+0x470>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f0      	bne.n	8002afc <HAL_RCC_OscConfig+0x444>
 8002b1a:	e03d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e038      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCC_OscConfig+0x4ec>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d028      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d121      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d11a      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b64:	4013      	ands	r3, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d107      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0cc      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b68      	ldr	r3, [pc, #416]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d90c      	bls.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b65      	ldr	r3, [pc, #404]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b63      	ldr	r3, [pc, #396]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0b8      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d020      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bfc:	4b59      	ldr	r3, [pc, #356]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	4a58      	ldr	r2, [pc, #352]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c14:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a52      	ldr	r2, [pc, #328]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c20:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	494d      	ldr	r1, [pc, #308]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d044      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e07f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c66:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e06f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e067      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c86:	4b37      	ldr	r3, [pc, #220]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4934      	ldr	r1, [pc, #208]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c98:	f7fe fd7c 	bl	8001794 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe fd78 	bl	8001794 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e04f      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 020c 	and.w	r2, r3, #12
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d1eb      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d20c      	bcs.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e032      	b.n	8002d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	4916      	ldr	r1, [pc, #88]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1a:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2e:	f000 f821 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d32:	4602      	mov	r2, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	490a      	ldr	r1, [pc, #40]	; (8002d68 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	5ccb      	ldrb	r3, [r1, r3]
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c4>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4a:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fcdc 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08005640 	.word	0x08005640
 8002d6c:	20000008 	.word	0x20000008
 8002d70:	2000000c 	.word	0x2000000c

08002d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d78:	b090      	sub	sp, #64	; 0x40
 8002d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d80:	2300      	movs	r3, #0
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d84:	2300      	movs	r3, #0
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	f200 80a1 	bhi.w	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d003      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002da6:	e09b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b53      	ldr	r3, [pc, #332]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dac:	e09b      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002db0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002db2:	e098      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db4:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	623b      	str	r3, [r7, #32]
 8002dd4:	627a      	str	r2, [r7, #36]	; 0x24
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a43      	ldr	r2, [pc, #268]	; (8002efc <HAL_RCC_GetSysClockFreq+0x188>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002df4:	460a      	mov	r2, r1
 8002df6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfa:	4413      	add	r3, r2
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	2200      	movs	r2, #0
 8002e02:	61bb      	str	r3, [r7, #24]
 8002e04:	61fa      	str	r2, [r7, #28]
 8002e06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e0e:	f7fd fa3f 	bl	8000290 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4613      	mov	r3, r2
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1a:	e053      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e2e:	f04f 0b00 	mov.w	fp, #0
 8002e32:	4652      	mov	r2, sl
 8002e34:	465b      	mov	r3, fp
 8002e36:	f04f 0000 	mov.w	r0, #0
 8002e3a:	f04f 0100 	mov.w	r1, #0
 8002e3e:	0159      	lsls	r1, r3, #5
 8002e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e44:	0150      	lsls	r0, r2, #5
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	ebb2 080a 	subs.w	r8, r2, sl
 8002e4e:	eb63 090b 	sbc.w	r9, r3, fp
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e66:	ebb2 0408 	subs.w	r4, r2, r8
 8002e6a:	eb63 0509 	sbc.w	r5, r3, r9
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	00eb      	lsls	r3, r5, #3
 8002e78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7c:	00e2      	lsls	r2, r4, #3
 8002e7e:	4614      	mov	r4, r2
 8002e80:	461d      	mov	r5, r3
 8002e82:	eb14 030a 	adds.w	r3, r4, sl
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	eb45 030b 	adc.w	r3, r5, fp
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	028b      	lsls	r3, r1, #10
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	028a      	lsls	r2, r1, #10
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb8:	f7fd f9ea 	bl	8000290 <__aeabi_uldivmod>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	3301      	adds	r3, #1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ee2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3740      	adds	r7, #64	; 0x40
 8002eec:	46bd      	mov	sp, r7
 8002eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	017d7840 	.word	0x017d7840

08002f00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20000008 	.word	0x20000008

08002f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f1c:	f7ff fff0 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	0a9b      	lsrs	r3, r3, #10
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08005650 	.word	0x08005650

08002f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f44:	f7ff ffdc 	bl	8002f00 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4903      	ldr	r1, [pc, #12]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	08005650 	.word	0x08005650

08002f68 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f6e:	f7fe fc11 	bl	8001794 <HAL_GetTick>
 8002f72:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f74:	4b72      	ldr	r3, [pc, #456]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a71      	ldr	r2, [pc, #452]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fe fc07 	bl	8001794 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0d0      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002fa0:	4b67      	ldr	r3, [pc, #412]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002faa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fac:	f7fe fbf2 	bl	8001794 <HAL_GetTick>
 8002fb0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fba:	f7fe fbeb 	bl	8001794 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0b2      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ee      	bne.n	8002fba <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002fdc:	f7fe fbda 	bl	8001794 <HAL_GetTick>
 8002fe0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8002fe8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002fec:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fbd0 	bl	8001794 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e099      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003002:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800300e:	f7fe fbc1 	bl	8001794 <HAL_GetTick>
 8003012:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003014:	4b4a      	ldr	r3, [pc, #296]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 800301a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003020:	e008      	b.n	8003034 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe fbb7 	bl	8001794 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e080      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003040:	f7fe fba8 	bl	8001794 <HAL_GetTick>
 8003044:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003046:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 800304c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003050:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003054:	f7fe fb9e 	bl	8001794 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e067      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003072:	f7fe fb8f 	bl	8001794 <HAL_GetTick>
 8003076:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003078:	4b31      	ldr	r3, [pc, #196]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a30      	ldr	r2, [pc, #192]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003086:	f7fe fb85 	bl	8001794 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e04e      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f0      	bne.n	8003086 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030a6:	4a27      	ldr	r2, [pc, #156]	; (8003144 <HAL_RCC_DeInit+0x1dc>)
 80030a8:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_RCC_DeInit+0x1e0>)
 80030ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_RCC_DeInit+0x1e0>)
 80030b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80030ba:	4b21      	ldr	r3, [pc, #132]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030c0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80030c4:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030e4:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80030e8:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4a14      	ldr	r2, [pc, #80]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4a11      	ldr	r2, [pc, #68]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 80030fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003100:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	4a0e      	ldr	r2, [pc, #56]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	4a0b      	ldr	r2, [pc, #44]	; (8003140 <HAL_RCC_DeInit+0x1d8>)
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003118:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_RCC_DeInit+0x1e4>)
 800311c:	4a0c      	ldr	r2, [pc, #48]	; (8003150 <HAL_RCC_DeInit+0x1e8>)
 800311e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <HAL_RCC_DeInit+0x1ec>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe faf1 	bl	800170c <HAL_InitTick>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003134:	2300      	movs	r3, #0
  }
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	04003010 	.word	0x04003010
 8003148:	24003000 	.word	0x24003000
 800314c:	20000008 	.word	0x20000008
 8003150:	00f42400 	.word	0x00f42400
 8003154:	2000000c 	.word	0x2000000c

08003158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e042      	b.n	80031f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe f9aa 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2224      	movs	r2, #36	; 0x24
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800319a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fdff 	bl	8003da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695a      	ldr	r2, [r3, #20]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b20      	cmp	r3, #32
 8003216:	d175      	bne.n	8003304 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_Transmit+0x2c>
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e06e      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2221      	movs	r2, #33	; 0x21
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003236:	f7fe faad 	bl	8001794 <HAL_GetTick>
 800323a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d108      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d104      	bne.n	8003264 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e003      	b.n	800326c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800326c:	e02e      	b.n	80032cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fb9b 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e03a      	b.n	8003306 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	3302      	adds	r3, #2
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e007      	b.n	80032be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	781a      	ldrb	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3301      	adds	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cb      	bne.n	800326e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fb67 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e006      	b.n	8003306 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b08a      	sub	sp, #40	; 0x28
 8003312:	af02      	add	r7, sp, #8
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	603b      	str	r3, [r7, #0]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	f040 8081 	bne.w	8003432 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_UART_Receive+0x2e>
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e079      	b.n	8003434 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2222      	movs	r2, #34	; 0x22
 800334a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003354:	f7fe fa1e 	bl	8001794 <HAL_GetTick>
 8003358:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d108      	bne.n	8003382 <HAL_UART_Receive+0x74>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e003      	b.n	800338a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800338a:	e047      	b.n	800341c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2200      	movs	r2, #0
 8003394:	2120      	movs	r1, #32
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 fb0c 	bl	80039b4 <UART_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e042      	b.n	8003434 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10c      	bne.n	80033ce <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	3302      	adds	r3, #2
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e01f      	b.n	800340e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	d007      	beq.n	80033e8 <HAL_UART_Receive+0xda>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_UART_Receive+0xe8>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	701a      	strb	r2, [r3, #0]
 80033f4:	e008      	b.n	8003408 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003402:	b2da      	uxtb	r2, r3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1b2      	bne.n	800338c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e000      	b.n	8003434 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003432:	2302      	movs	r3, #2
  }
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b0ba      	sub	sp, #232	; 0xe8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003462:	2300      	movs	r3, #0
 8003464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800347a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10f      	bne.n	80034a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <HAL_UART_IRQHandler+0x66>
 800348e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fbc2 	bl	8003c24 <UART_Receive_IT>
      return;
 80034a0:	e25b      	b.n	800395a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80de 	beq.w	8003668 <HAL_UART_IRQHandler+0x22c>
 80034ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80d1 	beq.w	8003668 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <HAL_UART_IRQHandler+0xae>
 80034d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0201 	orr.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_UART_IRQHandler+0xd2>
 80034f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xf6>
 800351a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0204 	orr.w	r2, r3, #4
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_UART_IRQHandler+0x126>
 800353e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d005      	beq.n	8003562 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f043 0208 	orr.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 81f2 	beq.w	8003950 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_UART_IRQHandler+0x14e>
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb4d 	bl	8003c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003594:	2b40      	cmp	r3, #64	; 0x40
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d103      	bne.n	80035b6 <HAL_UART_IRQHandler+0x17a>
 80035ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04f      	beq.n	8003656 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa55 	bl	8003a66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d141      	bne.n	800364e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3314      	adds	r3, #20
 80035f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003602:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800360e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1d9      	bne.n	80035ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	4a7e      	ldr	r2, [pc, #504]	; (800381c <HAL_UART_IRQHandler+0x3e0>)
 8003624:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fa86 	bl	8001b3c <HAL_DMA_Abort_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d016      	beq.n	8003664 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003640:	4610      	mov	r0, r2
 8003642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003644:	e00e      	b.n	8003664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f99e 	bl	8003988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800364c:	e00a      	b.n	8003664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f99a 	bl	8003988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	e006      	b.n	8003664 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f996 	bl	8003988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003662:	e175      	b.n	8003950 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	bf00      	nop
    return;
 8003666:	e173      	b.n	8003950 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	2b01      	cmp	r3, #1
 800366e:	f040 814f 	bne.w	8003910 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8148 	beq.w	8003910 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 8141 	beq.w	8003910 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	60bb      	str	r3, [r7, #8]
 80036a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	f040 80b6 	bne.w	8003820 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8145 	beq.w	8003954 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f080 813e 	bcs.w	8003954 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	f000 8088 	beq.w	80037fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	330c      	adds	r3, #12
 80036f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800371a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800371e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003726:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1d9      	bne.n	80036ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3314      	adds	r3, #20
 8003740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800374a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800375e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003762:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003766:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e1      	bne.n	800373a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003786:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800379a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800379c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80037e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f92f 	bl	8001a5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800380c:	b29b      	uxth	r3, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	b29b      	uxth	r3, r3
 8003812:	4619      	mov	r1, r3
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f8c1 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800381a:	e09b      	b.n	8003954 <HAL_UART_IRQHandler+0x518>
 800381c:	08003b2d 	.word	0x08003b2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003828:	b29b      	uxth	r3, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 808e 	beq.w	8003958 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800383c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8089 	beq.w	8003958 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	330c      	adds	r3, #12
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003850:	e853 3f00 	ldrex	r3, [r3]
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800385c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800386a:	647a      	str	r2, [r7, #68]	; 0x44
 800386c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e3      	bne.n	8003846 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3314      	adds	r3, #20
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	623b      	str	r3, [r7, #32]
   return(result);
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3314      	adds	r3, #20
 800389e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038a2:	633a      	str	r2, [r7, #48]	; 0x30
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	e841 2300 	strex	r3, r2, [r1]
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e3      	bne.n	800387e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0310 	bic.w	r3, r3, #16
 80038da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	330c      	adds	r3, #12
 80038e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038e8:	61fa      	str	r2, [r7, #28]
 80038ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	617b      	str	r3, [r7, #20]
   return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e3      	bne.n	80038c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f847 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800390e:	e023      	b.n	8003958 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_UART_IRQHandler+0x4f4>
 800391c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f913 	bl	8003b54 <UART_Transmit_IT>
    return;
 800392e:	e014      	b.n	800395a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <HAL_UART_IRQHandler+0x51e>
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f953 	bl	8003bf4 <UART_EndTransmit_IT>
    return;
 800394e:	e004      	b.n	800395a <HAL_UART_IRQHandler+0x51e>
    return;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_UART_IRQHandler+0x51e>
      return;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_UART_IRQHandler+0x51e>
      return;
 8003958:	bf00      	nop
  }
}
 800395a:	37e8      	adds	r7, #232	; 0xe8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c4:	e03b      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d037      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fd fee1 	bl	8001794 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e03a      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d023      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b80      	cmp	r3, #128	; 0x80
 80039fa:	d020      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b40      	cmp	r3, #64	; 0x40
 8003a00:	d01d      	beq.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0308 	and.w	r3, r3, #8
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d116      	bne.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f81d 	bl	8003a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d0b4      	beq.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b095      	sub	sp, #84	; 0x54
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	330c      	adds	r3, #12
 8003a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a8e:	643a      	str	r2, [r7, #64]	; 0x40
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d119      	bne.n	8003b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003afe:	61ba      	str	r2, [r7, #24]
 8003b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6979      	ldr	r1, [r7, #20]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b20:	bf00      	nop
 8003b22:	3754      	adds	r7, #84	; 0x54
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff1e 	bl	8003988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b21      	cmp	r3, #33	; 0x21
 8003b66:	d13e      	bne.n	8003be6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b70:	d114      	bne.n	8003b9c <UART_Transmit_IT+0x48>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d110      	bne.n	8003b9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	621a      	str	r2, [r3, #32]
 8003b9a:	e008      	b.n	8003bae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	1c59      	adds	r1, r3, #1
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6211      	str	r1, [r2, #32]
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e000      	b.n	8003be8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003be6:	2302      	movs	r3, #2
  }
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fea3 	bl	8003960 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08c      	sub	sp, #48	; 0x30
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b22      	cmp	r3, #34	; 0x22
 8003c36:	f040 80ae 	bne.w	8003d96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d117      	bne.n	8003c74 <UART_Receive_IT+0x50>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	629a      	str	r2, [r3, #40]	; 0x28
 8003c72:	e026      	b.n	8003cc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d007      	beq.n	8003c98 <UART_Receive_IT+0x74>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <UART_Receive_IT+0x82>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e008      	b.n	8003cb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d15d      	bne.n	8003d92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0220 	bic.w	r2, r2, #32
 8003ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d135      	bne.n	8003d88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	623a      	str	r2, [r7, #32]
 8003d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d10a      	bne.n	8003d7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fe0b 	bl	800399c <HAL_UARTEx_RxEventCallback>
 8003d86:	e002      	b.n	8003d8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fdf3 	bl	8003974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e002      	b.n	8003d98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b0c0      	sub	sp, #256	; 0x100
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	ea40 0301 	orr.w	r3, r0, r1
 8003dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003df8:	f021 010c 	bic.w	r1, r1, #12
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e06:	430b      	orrs	r3, r1
 8003e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	6999      	ldr	r1, [r3, #24]
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	ea40 0301 	orr.w	r3, r0, r1
 8003e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b8f      	ldr	r3, [pc, #572]	; (800406c <UART_SetConfig+0x2cc>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d005      	beq.n	8003e40 <UART_SetConfig+0xa0>
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <UART_SetConfig+0x2d0>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d104      	bne.n	8003e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e40:	f7ff f87e 	bl	8002f40 <HAL_RCC_GetPCLK2Freq>
 8003e44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e48:	e003      	b.n	8003e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7ff f865 	bl	8002f18 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	f040 810c 	bne.w	8004078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	1891      	adds	r1, r2, r2
 8003e78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e7a:	415b      	adcs	r3, r3
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e82:	4621      	mov	r1, r4
 8003e84:	eb12 0801 	adds.w	r8, r2, r1
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb43 0901 	adc.w	r9, r3, r1
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea2:	4690      	mov	r8, r2
 8003ea4:	4699      	mov	r9, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	eb18 0303 	adds.w	r3, r8, r3
 8003eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	eb49 0303 	adc.w	r3, r9, r3
 8003eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ece:	460b      	mov	r3, r1
 8003ed0:	18db      	adds	r3, r3, r3
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	eb42 0303 	adc.w	r3, r2, r3
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
 8003edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ee4:	f7fc f9d4 	bl	8000290 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b61      	ldr	r3, [pc, #388]	; (8004074 <UART_SetConfig+0x2d4>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	011c      	lsls	r4, r3, #4
 8003ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f08:	4642      	mov	r2, r8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	1891      	adds	r1, r2, r2
 8003f0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f10:	415b      	adcs	r3, r3
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f18:	4641      	mov	r1, r8
 8003f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb43 0b01 	adc.w	fp, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f38:	4692      	mov	sl, r2
 8003f3a:	469b      	mov	fp, r3
 8003f3c:	4643      	mov	r3, r8
 8003f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f46:	464b      	mov	r3, r9
 8003f48:	eb4b 0303 	adc.w	r3, fp, r3
 8003f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f64:	460b      	mov	r3, r1
 8003f66:	18db      	adds	r3, r3, r3
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
 8003f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f7a:	f7fc f989 	bl	8000290 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <UART_SetConfig+0x2d4>)
 8003f86:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2264      	movs	r2, #100	; 0x64
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	1acb      	subs	r3, r1, r3
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <UART_SetConfig+0x2d4>)
 8003f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fa8:	441c      	add	r4, r3
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fcc:	4641      	mov	r1, r8
 8003fce:	1851      	adds	r1, r2, r1
 8003fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	414b      	adcs	r3, r1
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	00cb      	lsls	r3, r1, #3
 8003fe8:	4651      	mov	r1, sl
 8003fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fee:	4651      	mov	r1, sl
 8003ff0:	00ca      	lsls	r2, r1, #3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004000:	464b      	mov	r3, r9
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004018:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800401c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	4613      	mov	r3, r2
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004036:	f7fc f92b 	bl	8000290 <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <UART_SetConfig+0x2d4>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	3332      	adds	r3, #50	; 0x32
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <UART_SetConfig+0x2d4>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	f003 0207 	and.w	r2, r3, #7
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4422      	add	r2, r4
 8004066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004068:	e106      	b.n	8004278 <UART_SetConfig+0x4d8>
 800406a:	bf00      	nop
 800406c:	40011000 	.word	0x40011000
 8004070:	40011400 	.word	0x40011400
 8004074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800408a:	4642      	mov	r2, r8
 800408c:	464b      	mov	r3, r9
 800408e:	1891      	adds	r1, r2, r2
 8004090:	6239      	str	r1, [r7, #32]
 8004092:	415b      	adcs	r3, r3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800409a:	4641      	mov	r1, r8
 800409c:	1854      	adds	r4, r2, r1
 800409e:	4649      	mov	r1, r9
 80040a0:	eb43 0501 	adc.w	r5, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	00eb      	lsls	r3, r5, #3
 80040ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	18e3      	adds	r3, r4, r3
 80040bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c0:	464b      	mov	r3, r9
 80040c2:	eb45 0303 	adc.w	r3, r5, r3
 80040c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040e6:	4629      	mov	r1, r5
 80040e8:	008b      	lsls	r3, r1, #2
 80040ea:	4621      	mov	r1, r4
 80040ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f0:	4621      	mov	r1, r4
 80040f2:	008a      	lsls	r2, r1, #2
 80040f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040f8:	f7fc f8ca 	bl	8000290 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <UART_SetConfig+0x4e4>)
 8004102:	fba3 2302 	umull	r2, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	011c      	lsls	r4, r3, #4
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004114:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	61b9      	str	r1, [r7, #24]
 8004124:	415b      	adcs	r3, r3
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800412c:	4641      	mov	r1, r8
 800412e:	1851      	adds	r1, r2, r1
 8004130:	6139      	str	r1, [r7, #16]
 8004132:	4649      	mov	r1, r9
 8004134:	414b      	adcs	r3, r1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004144:	4659      	mov	r1, fp
 8004146:	00cb      	lsls	r3, r1, #3
 8004148:	4651      	mov	r1, sl
 800414a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414e:	4651      	mov	r1, sl
 8004150:	00ca      	lsls	r2, r1, #3
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	4603      	mov	r3, r0
 8004158:	4642      	mov	r2, r8
 800415a:	189b      	adds	r3, r3, r2
 800415c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004160:	464b      	mov	r3, r9
 8004162:	460a      	mov	r2, r1
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	67bb      	str	r3, [r7, #120]	; 0x78
 8004176:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004184:	4649      	mov	r1, r9
 8004186:	008b      	lsls	r3, r1, #2
 8004188:	4641      	mov	r1, r8
 800418a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418e:	4641      	mov	r1, r8
 8004190:	008a      	lsls	r2, r1, #2
 8004192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004196:	f7fc f87b 	bl	8000290 <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4611      	mov	r1, r2
 80041a0:	4b38      	ldr	r3, [pc, #224]	; (8004284 <UART_SetConfig+0x4e4>)
 80041a2:	fba3 2301 	umull	r2, r3, r3, r1
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2264      	movs	r2, #100	; 0x64
 80041aa:	fb02 f303 	mul.w	r3, r2, r3
 80041ae:	1acb      	subs	r3, r1, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a33      	ldr	r2, [pc, #204]	; (8004284 <UART_SetConfig+0x4e4>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c0:	441c      	add	r4, r3
 80041c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c6:	2200      	movs	r2, #0
 80041c8:	673b      	str	r3, [r7, #112]	; 0x70
 80041ca:	677a      	str	r2, [r7, #116]	; 0x74
 80041cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041d0:	4642      	mov	r2, r8
 80041d2:	464b      	mov	r3, r9
 80041d4:	1891      	adds	r1, r2, r2
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	415b      	adcs	r3, r3
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e0:	4641      	mov	r1, r8
 80041e2:	1851      	adds	r1, r2, r1
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	4649      	mov	r1, r9
 80041e8:	414b      	adcs	r3, r1
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041f8:	4659      	mov	r1, fp
 80041fa:	00cb      	lsls	r3, r1, #3
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004202:	4651      	mov	r1, sl
 8004204:	00ca      	lsls	r2, r1, #3
 8004206:	4610      	mov	r0, r2
 8004208:	4619      	mov	r1, r3
 800420a:	4603      	mov	r3, r0
 800420c:	4642      	mov	r2, r8
 800420e:	189b      	adds	r3, r3, r2
 8004210:	66bb      	str	r3, [r7, #104]	; 0x68
 8004212:	464b      	mov	r3, r9
 8004214:	460a      	mov	r2, r1
 8004216:	eb42 0303 	adc.w	r3, r2, r3
 800421a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	663b      	str	r3, [r7, #96]	; 0x60
 8004226:	667a      	str	r2, [r7, #100]	; 0x64
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004234:	4649      	mov	r1, r9
 8004236:	008b      	lsls	r3, r1, #2
 8004238:	4641      	mov	r1, r8
 800423a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423e:	4641      	mov	r1, r8
 8004240:	008a      	lsls	r2, r1, #2
 8004242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004246:	f7fc f823 	bl	8000290 <__aeabi_uldivmod>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <UART_SetConfig+0x4e4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	4a08      	ldr	r2, [pc, #32]	; (8004284 <UART_SetConfig+0x4e4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4422      	add	r2, r4
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004284:	51eb851f 	.word	0x51eb851f

08004288 <std>:
 8004288:	2300      	movs	r3, #0
 800428a:	b510      	push	{r4, lr}
 800428c:	4604      	mov	r4, r0
 800428e:	e9c0 3300 	strd	r3, r3, [r0]
 8004292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004296:	6083      	str	r3, [r0, #8]
 8004298:	8181      	strh	r1, [r0, #12]
 800429a:	6643      	str	r3, [r0, #100]	; 0x64
 800429c:	81c2      	strh	r2, [r0, #14]
 800429e:	6183      	str	r3, [r0, #24]
 80042a0:	4619      	mov	r1, r3
 80042a2:	2208      	movs	r2, #8
 80042a4:	305c      	adds	r0, #92	; 0x5c
 80042a6:	f000 f927 	bl	80044f8 <memset>
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <std+0x58>)
 80042ac:	6263      	str	r3, [r4, #36]	; 0x24
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <std+0x5c>)
 80042b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <std+0x60>)
 80042b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <std+0x64>)
 80042b8:	6323      	str	r3, [r4, #48]	; 0x30
 80042ba:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <std+0x68>)
 80042bc:	6224      	str	r4, [r4, #32]
 80042be:	429c      	cmp	r4, r3
 80042c0:	d006      	beq.n	80042d0 <std+0x48>
 80042c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80042c6:	4294      	cmp	r4, r2
 80042c8:	d002      	beq.n	80042d0 <std+0x48>
 80042ca:	33d0      	adds	r3, #208	; 0xd0
 80042cc:	429c      	cmp	r4, r3
 80042ce:	d105      	bne.n	80042dc <std+0x54>
 80042d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d8:	f000 b986 	b.w	80045e8 <__retarget_lock_init_recursive>
 80042dc:	bd10      	pop	{r4, pc}
 80042de:	bf00      	nop
 80042e0:	08004431 	.word	0x08004431
 80042e4:	08004453 	.word	0x08004453
 80042e8:	0800448b 	.word	0x0800448b
 80042ec:	080044af 	.word	0x080044af
 80042f0:	20000260 	.word	0x20000260

080042f4 <stdio_exit_handler>:
 80042f4:	4a02      	ldr	r2, [pc, #8]	; (8004300 <stdio_exit_handler+0xc>)
 80042f6:	4903      	ldr	r1, [pc, #12]	; (8004304 <stdio_exit_handler+0x10>)
 80042f8:	4803      	ldr	r0, [pc, #12]	; (8004308 <stdio_exit_handler+0x14>)
 80042fa:	f000 b869 	b.w	80043d0 <_fwalk_sglue>
 80042fe:	bf00      	nop
 8004300:	20000014 	.word	0x20000014
 8004304:	08005145 	.word	0x08005145
 8004308:	20000020 	.word	0x20000020

0800430c <cleanup_stdio>:
 800430c:	6841      	ldr	r1, [r0, #4]
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <cleanup_stdio+0x34>)
 8004310:	4299      	cmp	r1, r3
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
 8004316:	d001      	beq.n	800431c <cleanup_stdio+0x10>
 8004318:	f000 ff14 	bl	8005144 <_fflush_r>
 800431c:	68a1      	ldr	r1, [r4, #8]
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <cleanup_stdio+0x38>)
 8004320:	4299      	cmp	r1, r3
 8004322:	d002      	beq.n	800432a <cleanup_stdio+0x1e>
 8004324:	4620      	mov	r0, r4
 8004326:	f000 ff0d 	bl	8005144 <_fflush_r>
 800432a:	68e1      	ldr	r1, [r4, #12]
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <cleanup_stdio+0x3c>)
 800432e:	4299      	cmp	r1, r3
 8004330:	d004      	beq.n	800433c <cleanup_stdio+0x30>
 8004332:	4620      	mov	r0, r4
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004338:	f000 bf04 	b.w	8005144 <_fflush_r>
 800433c:	bd10      	pop	{r4, pc}
 800433e:	bf00      	nop
 8004340:	20000260 	.word	0x20000260
 8004344:	200002c8 	.word	0x200002c8
 8004348:	20000330 	.word	0x20000330

0800434c <global_stdio_init.part.0>:
 800434c:	b510      	push	{r4, lr}
 800434e:	4b0b      	ldr	r3, [pc, #44]	; (800437c <global_stdio_init.part.0+0x30>)
 8004350:	4c0b      	ldr	r4, [pc, #44]	; (8004380 <global_stdio_init.part.0+0x34>)
 8004352:	4a0c      	ldr	r2, [pc, #48]	; (8004384 <global_stdio_init.part.0+0x38>)
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	4620      	mov	r0, r4
 8004358:	2200      	movs	r2, #0
 800435a:	2104      	movs	r1, #4
 800435c:	f7ff ff94 	bl	8004288 <std>
 8004360:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004364:	2201      	movs	r2, #1
 8004366:	2109      	movs	r1, #9
 8004368:	f7ff ff8e 	bl	8004288 <std>
 800436c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004370:	2202      	movs	r2, #2
 8004372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004376:	2112      	movs	r1, #18
 8004378:	f7ff bf86 	b.w	8004288 <std>
 800437c:	20000398 	.word	0x20000398
 8004380:	20000260 	.word	0x20000260
 8004384:	080042f5 	.word	0x080042f5

08004388 <__sfp_lock_acquire>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__sfp_lock_acquire+0x8>)
 800438a:	f000 b92e 	b.w	80045ea <__retarget_lock_acquire_recursive>
 800438e:	bf00      	nop
 8004390:	200003a1 	.word	0x200003a1

08004394 <__sfp_lock_release>:
 8004394:	4801      	ldr	r0, [pc, #4]	; (800439c <__sfp_lock_release+0x8>)
 8004396:	f000 b929 	b.w	80045ec <__retarget_lock_release_recursive>
 800439a:	bf00      	nop
 800439c:	200003a1 	.word	0x200003a1

080043a0 <__sinit>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4604      	mov	r4, r0
 80043a4:	f7ff fff0 	bl	8004388 <__sfp_lock_acquire>
 80043a8:	6a23      	ldr	r3, [r4, #32]
 80043aa:	b11b      	cbz	r3, 80043b4 <__sinit+0x14>
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b0:	f7ff bff0 	b.w	8004394 <__sfp_lock_release>
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__sinit+0x28>)
 80043b6:	6223      	str	r3, [r4, #32]
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <__sinit+0x2c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1f5      	bne.n	80043ac <__sinit+0xc>
 80043c0:	f7ff ffc4 	bl	800434c <global_stdio_init.part.0>
 80043c4:	e7f2      	b.n	80043ac <__sinit+0xc>
 80043c6:	bf00      	nop
 80043c8:	0800430d 	.word	0x0800430d
 80043cc:	20000398 	.word	0x20000398

080043d0 <_fwalk_sglue>:
 80043d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043d4:	4607      	mov	r7, r0
 80043d6:	4688      	mov	r8, r1
 80043d8:	4614      	mov	r4, r2
 80043da:	2600      	movs	r6, #0
 80043dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043e0:	f1b9 0901 	subs.w	r9, r9, #1
 80043e4:	d505      	bpl.n	80043f2 <_fwalk_sglue+0x22>
 80043e6:	6824      	ldr	r4, [r4, #0]
 80043e8:	2c00      	cmp	r4, #0
 80043ea:	d1f7      	bne.n	80043dc <_fwalk_sglue+0xc>
 80043ec:	4630      	mov	r0, r6
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d907      	bls.n	8004408 <_fwalk_sglue+0x38>
 80043f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043fc:	3301      	adds	r3, #1
 80043fe:	d003      	beq.n	8004408 <_fwalk_sglue+0x38>
 8004400:	4629      	mov	r1, r5
 8004402:	4638      	mov	r0, r7
 8004404:	47c0      	blx	r8
 8004406:	4306      	orrs	r6, r0
 8004408:	3568      	adds	r5, #104	; 0x68
 800440a:	e7e9      	b.n	80043e0 <_fwalk_sglue+0x10>

0800440c <iprintf>:
 800440c:	b40f      	push	{r0, r1, r2, r3}
 800440e:	b507      	push	{r0, r1, r2, lr}
 8004410:	4906      	ldr	r1, [pc, #24]	; (800442c <iprintf+0x20>)
 8004412:	ab04      	add	r3, sp, #16
 8004414:	6808      	ldr	r0, [r1, #0]
 8004416:	f853 2b04 	ldr.w	r2, [r3], #4
 800441a:	6881      	ldr	r1, [r0, #8]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	f000 fb61 	bl	8004ae4 <_vfiprintf_r>
 8004422:	b003      	add	sp, #12
 8004424:	f85d eb04 	ldr.w	lr, [sp], #4
 8004428:	b004      	add	sp, #16
 800442a:	4770      	bx	lr
 800442c:	2000006c 	.word	0x2000006c

08004430 <__sread>:
 8004430:	b510      	push	{r4, lr}
 8004432:	460c      	mov	r4, r1
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	f000 f888 	bl	800454c <_read_r>
 800443c:	2800      	cmp	r0, #0
 800443e:	bfab      	itete	ge
 8004440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004442:	89a3      	ldrhlt	r3, [r4, #12]
 8004444:	181b      	addge	r3, r3, r0
 8004446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800444a:	bfac      	ite	ge
 800444c:	6563      	strge	r3, [r4, #84]	; 0x54
 800444e:	81a3      	strhlt	r3, [r4, #12]
 8004450:	bd10      	pop	{r4, pc}

08004452 <__swrite>:
 8004452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	461f      	mov	r7, r3
 8004458:	898b      	ldrh	r3, [r1, #12]
 800445a:	05db      	lsls	r3, r3, #23
 800445c:	4605      	mov	r5, r0
 800445e:	460c      	mov	r4, r1
 8004460:	4616      	mov	r6, r2
 8004462:	d505      	bpl.n	8004470 <__swrite+0x1e>
 8004464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004468:	2302      	movs	r3, #2
 800446a:	2200      	movs	r2, #0
 800446c:	f000 f85c 	bl	8004528 <_lseek_r>
 8004470:	89a3      	ldrh	r3, [r4, #12]
 8004472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	4632      	mov	r2, r6
 800447e:	463b      	mov	r3, r7
 8004480:	4628      	mov	r0, r5
 8004482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004486:	f000 b873 	b.w	8004570 <_write_r>

0800448a <__sseek>:
 800448a:	b510      	push	{r4, lr}
 800448c:	460c      	mov	r4, r1
 800448e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004492:	f000 f849 	bl	8004528 <_lseek_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	89a3      	ldrh	r3, [r4, #12]
 800449a:	bf15      	itete	ne
 800449c:	6560      	strne	r0, [r4, #84]	; 0x54
 800449e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044a6:	81a3      	strheq	r3, [r4, #12]
 80044a8:	bf18      	it	ne
 80044aa:	81a3      	strhne	r3, [r4, #12]
 80044ac:	bd10      	pop	{r4, pc}

080044ae <__sclose>:
 80044ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044b2:	f000 b829 	b.w	8004508 <_close_r>
	...

080044b8 <_vsiprintf_r>:
 80044b8:	b500      	push	{lr}
 80044ba:	b09b      	sub	sp, #108	; 0x6c
 80044bc:	9100      	str	r1, [sp, #0]
 80044be:	9104      	str	r1, [sp, #16]
 80044c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044c4:	9105      	str	r1, [sp, #20]
 80044c6:	9102      	str	r1, [sp, #8]
 80044c8:	4905      	ldr	r1, [pc, #20]	; (80044e0 <_vsiprintf_r+0x28>)
 80044ca:	9103      	str	r1, [sp, #12]
 80044cc:	4669      	mov	r1, sp
 80044ce:	f000 f9e1 	bl	8004894 <_svfiprintf_r>
 80044d2:	9b00      	ldr	r3, [sp, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	b01b      	add	sp, #108	; 0x6c
 80044da:	f85d fb04 	ldr.w	pc, [sp], #4
 80044de:	bf00      	nop
 80044e0:	ffff0208 	.word	0xffff0208

080044e4 <vsiprintf>:
 80044e4:	4613      	mov	r3, r2
 80044e6:	460a      	mov	r2, r1
 80044e8:	4601      	mov	r1, r0
 80044ea:	4802      	ldr	r0, [pc, #8]	; (80044f4 <vsiprintf+0x10>)
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f7ff bfe3 	b.w	80044b8 <_vsiprintf_r>
 80044f2:	bf00      	nop
 80044f4:	2000006c 	.word	0x2000006c

080044f8 <memset>:
 80044f8:	4402      	add	r2, r0
 80044fa:	4603      	mov	r3, r0
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d100      	bne.n	8004502 <memset+0xa>
 8004500:	4770      	bx	lr
 8004502:	f803 1b01 	strb.w	r1, [r3], #1
 8004506:	e7f9      	b.n	80044fc <memset+0x4>

08004508 <_close_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4d06      	ldr	r5, [pc, #24]	; (8004524 <_close_r+0x1c>)
 800450c:	2300      	movs	r3, #0
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc fee2 	bl	80012dc <_close>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_close_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_close_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	2000039c 	.word	0x2000039c

08004528 <_lseek_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4d07      	ldr	r5, [pc, #28]	; (8004548 <_lseek_r+0x20>)
 800452c:	4604      	mov	r4, r0
 800452e:	4608      	mov	r0, r1
 8004530:	4611      	mov	r1, r2
 8004532:	2200      	movs	r2, #0
 8004534:	602a      	str	r2, [r5, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fc fef7 	bl	800132a <_lseek>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_lseek_r+0x1e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_lseek_r+0x1e>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	2000039c 	.word	0x2000039c

0800454c <_read_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4d07      	ldr	r5, [pc, #28]	; (800456c <_read_r+0x20>)
 8004550:	4604      	mov	r4, r0
 8004552:	4608      	mov	r0, r1
 8004554:	4611      	mov	r1, r2
 8004556:	2200      	movs	r2, #0
 8004558:	602a      	str	r2, [r5, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fc fea1 	bl	80012a2 <_read>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_read_r+0x1e>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_read_r+0x1e>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	2000039c 	.word	0x2000039c

08004570 <_write_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d07      	ldr	r5, [pc, #28]	; (8004590 <_write_r+0x20>)
 8004574:	4604      	mov	r4, r0
 8004576:	4608      	mov	r0, r1
 8004578:	4611      	mov	r1, r2
 800457a:	2200      	movs	r2, #0
 800457c:	602a      	str	r2, [r5, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	f7fc fd31 	bl	8000fe6 <_write>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_write_r+0x1e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_write_r+0x1e>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	2000039c 	.word	0x2000039c

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	; (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000006c 	.word	0x2000006c

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4d0d      	ldr	r5, [pc, #52]	; (80045d8 <__libc_init_array+0x38>)
 80045a4:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a6:	1b64      	subs	r4, r4, r5
 80045a8:	10a4      	asrs	r4, r4, #2
 80045aa:	2600      	movs	r6, #0
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	4d0b      	ldr	r5, [pc, #44]	; (80045e0 <__libc_init_array+0x40>)
 80045b2:	4c0c      	ldr	r4, [pc, #48]	; (80045e4 <__libc_init_array+0x44>)
 80045b4:	f000 ff78 	bl	80054a8 <_init>
 80045b8:	1b64      	subs	r4, r4, r5
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	2600      	movs	r6, #0
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08005694 	.word	0x08005694
 80045dc:	08005694 	.word	0x08005694
 80045e0:	08005694 	.word	0x08005694
 80045e4:	08005698 	.word	0x08005698

080045e8 <__retarget_lock_init_recursive>:
 80045e8:	4770      	bx	lr

080045ea <__retarget_lock_acquire_recursive>:
 80045ea:	4770      	bx	lr

080045ec <__retarget_lock_release_recursive>:
 80045ec:	4770      	bx	lr
	...

080045f0 <_free_r>:
 80045f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045f2:	2900      	cmp	r1, #0
 80045f4:	d044      	beq.n	8004680 <_free_r+0x90>
 80045f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045fa:	9001      	str	r0, [sp, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004602:	bfb8      	it	lt
 8004604:	18e4      	addlt	r4, r4, r3
 8004606:	f000 f8df 	bl	80047c8 <__malloc_lock>
 800460a:	4a1e      	ldr	r2, [pc, #120]	; (8004684 <_free_r+0x94>)
 800460c:	9801      	ldr	r0, [sp, #4]
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b933      	cbnz	r3, 8004620 <_free_r+0x30>
 8004612:	6063      	str	r3, [r4, #4]
 8004614:	6014      	str	r4, [r2, #0]
 8004616:	b003      	add	sp, #12
 8004618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800461c:	f000 b8da 	b.w	80047d4 <__malloc_unlock>
 8004620:	42a3      	cmp	r3, r4
 8004622:	d908      	bls.n	8004636 <_free_r+0x46>
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	1961      	adds	r1, r4, r5
 8004628:	428b      	cmp	r3, r1
 800462a:	bf01      	itttt	eq
 800462c:	6819      	ldreq	r1, [r3, #0]
 800462e:	685b      	ldreq	r3, [r3, #4]
 8004630:	1949      	addeq	r1, r1, r5
 8004632:	6021      	streq	r1, [r4, #0]
 8004634:	e7ed      	b.n	8004612 <_free_r+0x22>
 8004636:	461a      	mov	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	b10b      	cbz	r3, 8004640 <_free_r+0x50>
 800463c:	42a3      	cmp	r3, r4
 800463e:	d9fa      	bls.n	8004636 <_free_r+0x46>
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	1855      	adds	r5, r2, r1
 8004644:	42a5      	cmp	r5, r4
 8004646:	d10b      	bne.n	8004660 <_free_r+0x70>
 8004648:	6824      	ldr	r4, [r4, #0]
 800464a:	4421      	add	r1, r4
 800464c:	1854      	adds	r4, r2, r1
 800464e:	42a3      	cmp	r3, r4
 8004650:	6011      	str	r1, [r2, #0]
 8004652:	d1e0      	bne.n	8004616 <_free_r+0x26>
 8004654:	681c      	ldr	r4, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	6053      	str	r3, [r2, #4]
 800465a:	440c      	add	r4, r1
 800465c:	6014      	str	r4, [r2, #0]
 800465e:	e7da      	b.n	8004616 <_free_r+0x26>
 8004660:	d902      	bls.n	8004668 <_free_r+0x78>
 8004662:	230c      	movs	r3, #12
 8004664:	6003      	str	r3, [r0, #0]
 8004666:	e7d6      	b.n	8004616 <_free_r+0x26>
 8004668:	6825      	ldr	r5, [r4, #0]
 800466a:	1961      	adds	r1, r4, r5
 800466c:	428b      	cmp	r3, r1
 800466e:	bf04      	itt	eq
 8004670:	6819      	ldreq	r1, [r3, #0]
 8004672:	685b      	ldreq	r3, [r3, #4]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	bf04      	itt	eq
 8004678:	1949      	addeq	r1, r1, r5
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	6054      	str	r4, [r2, #4]
 800467e:	e7ca      	b.n	8004616 <_free_r+0x26>
 8004680:	b003      	add	sp, #12
 8004682:	bd30      	pop	{r4, r5, pc}
 8004684:	200003a4 	.word	0x200003a4

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0e      	ldr	r6, [pc, #56]	; (80046c4 <sbrk_aligned+0x3c>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fe2e 	bl	80052f4 <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 fe29 	bl	80052f4 <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d00a      	beq.n	80046bc <sbrk_aligned+0x34>
 80046a6:	1cc4      	adds	r4, r0, #3
 80046a8:	f024 0403 	bic.w	r4, r4, #3
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d007      	beq.n	80046c0 <sbrk_aligned+0x38>
 80046b0:	1a21      	subs	r1, r4, r0
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 fe1e 	bl	80052f4 <_sbrk_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d101      	bne.n	80046c0 <sbrk_aligned+0x38>
 80046bc:	f04f 34ff 	mov.w	r4, #4294967295
 80046c0:	4620      	mov	r0, r4
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	200003a8 	.word	0x200003a8

080046c8 <_malloc_r>:
 80046c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046cc:	1ccd      	adds	r5, r1, #3
 80046ce:	f025 0503 	bic.w	r5, r5, #3
 80046d2:	3508      	adds	r5, #8
 80046d4:	2d0c      	cmp	r5, #12
 80046d6:	bf38      	it	cc
 80046d8:	250c      	movcc	r5, #12
 80046da:	2d00      	cmp	r5, #0
 80046dc:	4607      	mov	r7, r0
 80046de:	db01      	blt.n	80046e4 <_malloc_r+0x1c>
 80046e0:	42a9      	cmp	r1, r5
 80046e2:	d905      	bls.n	80046f0 <_malloc_r+0x28>
 80046e4:	230c      	movs	r3, #12
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	2600      	movs	r6, #0
 80046ea:	4630      	mov	r0, r6
 80046ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047c4 <_malloc_r+0xfc>
 80046f4:	f000 f868 	bl	80047c8 <__malloc_lock>
 80046f8:	f8d8 3000 	ldr.w	r3, [r8]
 80046fc:	461c      	mov	r4, r3
 80046fe:	bb5c      	cbnz	r4, 8004758 <_malloc_r+0x90>
 8004700:	4629      	mov	r1, r5
 8004702:	4638      	mov	r0, r7
 8004704:	f7ff ffc0 	bl	8004688 <sbrk_aligned>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	4604      	mov	r4, r0
 800470c:	d155      	bne.n	80047ba <_malloc_r+0xf2>
 800470e:	f8d8 4000 	ldr.w	r4, [r8]
 8004712:	4626      	mov	r6, r4
 8004714:	2e00      	cmp	r6, #0
 8004716:	d145      	bne.n	80047a4 <_malloc_r+0xdc>
 8004718:	2c00      	cmp	r4, #0
 800471a:	d048      	beq.n	80047ae <_malloc_r+0xe6>
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	4631      	mov	r1, r6
 8004720:	4638      	mov	r0, r7
 8004722:	eb04 0903 	add.w	r9, r4, r3
 8004726:	f000 fde5 	bl	80052f4 <_sbrk_r>
 800472a:	4581      	cmp	r9, r0
 800472c:	d13f      	bne.n	80047ae <_malloc_r+0xe6>
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	1a6d      	subs	r5, r5, r1
 8004732:	4629      	mov	r1, r5
 8004734:	4638      	mov	r0, r7
 8004736:	f7ff ffa7 	bl	8004688 <sbrk_aligned>
 800473a:	3001      	adds	r0, #1
 800473c:	d037      	beq.n	80047ae <_malloc_r+0xe6>
 800473e:	6823      	ldr	r3, [r4, #0]
 8004740:	442b      	add	r3, r5
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	f8d8 3000 	ldr.w	r3, [r8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d038      	beq.n	80047be <_malloc_r+0xf6>
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	42a2      	cmp	r2, r4
 8004750:	d12b      	bne.n	80047aa <_malloc_r+0xe2>
 8004752:	2200      	movs	r2, #0
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e00f      	b.n	8004778 <_malloc_r+0xb0>
 8004758:	6822      	ldr	r2, [r4, #0]
 800475a:	1b52      	subs	r2, r2, r5
 800475c:	d41f      	bmi.n	800479e <_malloc_r+0xd6>
 800475e:	2a0b      	cmp	r2, #11
 8004760:	d917      	bls.n	8004792 <_malloc_r+0xca>
 8004762:	1961      	adds	r1, r4, r5
 8004764:	42a3      	cmp	r3, r4
 8004766:	6025      	str	r5, [r4, #0]
 8004768:	bf18      	it	ne
 800476a:	6059      	strne	r1, [r3, #4]
 800476c:	6863      	ldr	r3, [r4, #4]
 800476e:	bf08      	it	eq
 8004770:	f8c8 1000 	streq.w	r1, [r8]
 8004774:	5162      	str	r2, [r4, r5]
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	4638      	mov	r0, r7
 800477a:	f104 060b 	add.w	r6, r4, #11
 800477e:	f000 f829 	bl	80047d4 <__malloc_unlock>
 8004782:	f026 0607 	bic.w	r6, r6, #7
 8004786:	1d23      	adds	r3, r4, #4
 8004788:	1af2      	subs	r2, r6, r3
 800478a:	d0ae      	beq.n	80046ea <_malloc_r+0x22>
 800478c:	1b9b      	subs	r3, r3, r6
 800478e:	50a3      	str	r3, [r4, r2]
 8004790:	e7ab      	b.n	80046ea <_malloc_r+0x22>
 8004792:	42a3      	cmp	r3, r4
 8004794:	6862      	ldr	r2, [r4, #4]
 8004796:	d1dd      	bne.n	8004754 <_malloc_r+0x8c>
 8004798:	f8c8 2000 	str.w	r2, [r8]
 800479c:	e7ec      	b.n	8004778 <_malloc_r+0xb0>
 800479e:	4623      	mov	r3, r4
 80047a0:	6864      	ldr	r4, [r4, #4]
 80047a2:	e7ac      	b.n	80046fe <_malloc_r+0x36>
 80047a4:	4634      	mov	r4, r6
 80047a6:	6876      	ldr	r6, [r6, #4]
 80047a8:	e7b4      	b.n	8004714 <_malloc_r+0x4c>
 80047aa:	4613      	mov	r3, r2
 80047ac:	e7cc      	b.n	8004748 <_malloc_r+0x80>
 80047ae:	230c      	movs	r3, #12
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4638      	mov	r0, r7
 80047b4:	f000 f80e 	bl	80047d4 <__malloc_unlock>
 80047b8:	e797      	b.n	80046ea <_malloc_r+0x22>
 80047ba:	6025      	str	r5, [r4, #0]
 80047bc:	e7dc      	b.n	8004778 <_malloc_r+0xb0>
 80047be:	605b      	str	r3, [r3, #4]
 80047c0:	deff      	udf	#255	; 0xff
 80047c2:	bf00      	nop
 80047c4:	200003a4 	.word	0x200003a4

080047c8 <__malloc_lock>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__malloc_lock+0x8>)
 80047ca:	f7ff bf0e 	b.w	80045ea <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	200003a0 	.word	0x200003a0

080047d4 <__malloc_unlock>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__malloc_unlock+0x8>)
 80047d6:	f7ff bf09 	b.w	80045ec <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	200003a0 	.word	0x200003a0

080047e0 <__ssputs_r>:
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e4:	688e      	ldr	r6, [r1, #8]
 80047e6:	461f      	mov	r7, r3
 80047e8:	42be      	cmp	r6, r7
 80047ea:	680b      	ldr	r3, [r1, #0]
 80047ec:	4682      	mov	sl, r0
 80047ee:	460c      	mov	r4, r1
 80047f0:	4690      	mov	r8, r2
 80047f2:	d82c      	bhi.n	800484e <__ssputs_r+0x6e>
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047fa:	d026      	beq.n	800484a <__ssputs_r+0x6a>
 80047fc:	6965      	ldr	r5, [r4, #20]
 80047fe:	6909      	ldr	r1, [r1, #16]
 8004800:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004804:	eba3 0901 	sub.w	r9, r3, r1
 8004808:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800480c:	1c7b      	adds	r3, r7, #1
 800480e:	444b      	add	r3, r9
 8004810:	106d      	asrs	r5, r5, #1
 8004812:	429d      	cmp	r5, r3
 8004814:	bf38      	it	cc
 8004816:	461d      	movcc	r5, r3
 8004818:	0553      	lsls	r3, r2, #21
 800481a:	d527      	bpl.n	800486c <__ssputs_r+0x8c>
 800481c:	4629      	mov	r1, r5
 800481e:	f7ff ff53 	bl	80046c8 <_malloc_r>
 8004822:	4606      	mov	r6, r0
 8004824:	b360      	cbz	r0, 8004880 <__ssputs_r+0xa0>
 8004826:	6921      	ldr	r1, [r4, #16]
 8004828:	464a      	mov	r2, r9
 800482a:	f000 fd73 	bl	8005314 <memcpy>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	6126      	str	r6, [r4, #16]
 800483c:	6165      	str	r5, [r4, #20]
 800483e:	444e      	add	r6, r9
 8004840:	eba5 0509 	sub.w	r5, r5, r9
 8004844:	6026      	str	r6, [r4, #0]
 8004846:	60a5      	str	r5, [r4, #8]
 8004848:	463e      	mov	r6, r7
 800484a:	42be      	cmp	r6, r7
 800484c:	d900      	bls.n	8004850 <__ssputs_r+0x70>
 800484e:	463e      	mov	r6, r7
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4632      	mov	r2, r6
 8004854:	4641      	mov	r1, r8
 8004856:	f000 fd33 	bl	80052c0 <memmove>
 800485a:	68a3      	ldr	r3, [r4, #8]
 800485c:	1b9b      	subs	r3, r3, r6
 800485e:	60a3      	str	r3, [r4, #8]
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	4433      	add	r3, r6
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486c:	462a      	mov	r2, r5
 800486e:	f000 fd5f 	bl	8005330 <_realloc_r>
 8004872:	4606      	mov	r6, r0
 8004874:	2800      	cmp	r0, #0
 8004876:	d1e0      	bne.n	800483a <__ssputs_r+0x5a>
 8004878:	6921      	ldr	r1, [r4, #16]
 800487a:	4650      	mov	r0, sl
 800487c:	f7ff feb8 	bl	80045f0 <_free_r>
 8004880:	230c      	movs	r3, #12
 8004882:	f8ca 3000 	str.w	r3, [sl]
 8004886:	89a3      	ldrh	r3, [r4, #12]
 8004888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	f04f 30ff 	mov.w	r0, #4294967295
 8004892:	e7e9      	b.n	8004868 <__ssputs_r+0x88>

08004894 <_svfiprintf_r>:
 8004894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004898:	4698      	mov	r8, r3
 800489a:	898b      	ldrh	r3, [r1, #12]
 800489c:	061b      	lsls	r3, r3, #24
 800489e:	b09d      	sub	sp, #116	; 0x74
 80048a0:	4607      	mov	r7, r0
 80048a2:	460d      	mov	r5, r1
 80048a4:	4614      	mov	r4, r2
 80048a6:	d50e      	bpl.n	80048c6 <_svfiprintf_r+0x32>
 80048a8:	690b      	ldr	r3, [r1, #16]
 80048aa:	b963      	cbnz	r3, 80048c6 <_svfiprintf_r+0x32>
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	f7ff ff0b 	bl	80046c8 <_malloc_r>
 80048b2:	6028      	str	r0, [r5, #0]
 80048b4:	6128      	str	r0, [r5, #16]
 80048b6:	b920      	cbnz	r0, 80048c2 <_svfiprintf_r+0x2e>
 80048b8:	230c      	movs	r3, #12
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	e0d0      	b.n	8004a64 <_svfiprintf_r+0x1d0>
 80048c2:	2340      	movs	r3, #64	; 0x40
 80048c4:	616b      	str	r3, [r5, #20]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9309      	str	r3, [sp, #36]	; 0x24
 80048ca:	2320      	movs	r3, #32
 80048cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d4:	2330      	movs	r3, #48	; 0x30
 80048d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a7c <_svfiprintf_r+0x1e8>
 80048da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048de:	f04f 0901 	mov.w	r9, #1
 80048e2:	4623      	mov	r3, r4
 80048e4:	469a      	mov	sl, r3
 80048e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ea:	b10a      	cbz	r2, 80048f0 <_svfiprintf_r+0x5c>
 80048ec:	2a25      	cmp	r2, #37	; 0x25
 80048ee:	d1f9      	bne.n	80048e4 <_svfiprintf_r+0x50>
 80048f0:	ebba 0b04 	subs.w	fp, sl, r4
 80048f4:	d00b      	beq.n	800490e <_svfiprintf_r+0x7a>
 80048f6:	465b      	mov	r3, fp
 80048f8:	4622      	mov	r2, r4
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ff6f 	bl	80047e0 <__ssputs_r>
 8004902:	3001      	adds	r0, #1
 8004904:	f000 80a9 	beq.w	8004a5a <_svfiprintf_r+0x1c6>
 8004908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800490a:	445a      	add	r2, fp
 800490c:	9209      	str	r2, [sp, #36]	; 0x24
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a1 	beq.w	8004a5a <_svfiprintf_r+0x1c6>
 8004918:	2300      	movs	r3, #0
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004922:	f10a 0a01 	add.w	sl, sl, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800492e:	931a      	str	r3, [sp, #104]	; 0x68
 8004930:	4654      	mov	r4, sl
 8004932:	2205      	movs	r2, #5
 8004934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004938:	4850      	ldr	r0, [pc, #320]	; (8004a7c <_svfiprintf_r+0x1e8>)
 800493a:	f7fb fc59 	bl	80001f0 <memchr>
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	b9d8      	cbnz	r0, 800497a <_svfiprintf_r+0xe6>
 8004942:	06d0      	lsls	r0, r2, #27
 8004944:	bf44      	itt	mi
 8004946:	2320      	movmi	r3, #32
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800494c:	0711      	lsls	r1, r2, #28
 800494e:	bf44      	itt	mi
 8004950:	232b      	movmi	r3, #43	; 0x2b
 8004952:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b2a      	cmp	r3, #42	; 0x2a
 800495c:	d015      	beq.n	800498a <_svfiprintf_r+0xf6>
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	4654      	mov	r4, sl
 8004962:	2000      	movs	r0, #0
 8004964:	f04f 0c0a 	mov.w	ip, #10
 8004968:	4621      	mov	r1, r4
 800496a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496e:	3b30      	subs	r3, #48	; 0x30
 8004970:	2b09      	cmp	r3, #9
 8004972:	d94d      	bls.n	8004a10 <_svfiprintf_r+0x17c>
 8004974:	b1b0      	cbz	r0, 80049a4 <_svfiprintf_r+0x110>
 8004976:	9207      	str	r2, [sp, #28]
 8004978:	e014      	b.n	80049a4 <_svfiprintf_r+0x110>
 800497a:	eba0 0308 	sub.w	r3, r0, r8
 800497e:	fa09 f303 	lsl.w	r3, r9, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	46a2      	mov	sl, r4
 8004988:	e7d2      	b.n	8004930 <_svfiprintf_r+0x9c>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	9103      	str	r1, [sp, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfbb      	ittet	lt
 8004996:	425b      	neglt	r3, r3
 8004998:	f042 0202 	orrlt.w	r2, r2, #2
 800499c:	9307      	strge	r3, [sp, #28]
 800499e:	9307      	strlt	r3, [sp, #28]
 80049a0:	bfb8      	it	lt
 80049a2:	9204      	strlt	r2, [sp, #16]
 80049a4:	7823      	ldrb	r3, [r4, #0]
 80049a6:	2b2e      	cmp	r3, #46	; 0x2e
 80049a8:	d10c      	bne.n	80049c4 <_svfiprintf_r+0x130>
 80049aa:	7863      	ldrb	r3, [r4, #1]
 80049ac:	2b2a      	cmp	r3, #42	; 0x2a
 80049ae:	d134      	bne.n	8004a1a <_svfiprintf_r+0x186>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9203      	str	r2, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfb8      	it	lt
 80049bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80049c0:	3402      	adds	r4, #2
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a8c <_svfiprintf_r+0x1f8>
 80049c8:	7821      	ldrb	r1, [r4, #0]
 80049ca:	2203      	movs	r2, #3
 80049cc:	4650      	mov	r0, sl
 80049ce:	f7fb fc0f 	bl	80001f0 <memchr>
 80049d2:	b138      	cbz	r0, 80049e4 <_svfiprintf_r+0x150>
 80049d4:	9b04      	ldr	r3, [sp, #16]
 80049d6:	eba0 000a 	sub.w	r0, r0, sl
 80049da:	2240      	movs	r2, #64	; 0x40
 80049dc:	4082      	lsls	r2, r0
 80049de:	4313      	orrs	r3, r2
 80049e0:	3401      	adds	r4, #1
 80049e2:	9304      	str	r3, [sp, #16]
 80049e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e8:	4825      	ldr	r0, [pc, #148]	; (8004a80 <_svfiprintf_r+0x1ec>)
 80049ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ee:	2206      	movs	r2, #6
 80049f0:	f7fb fbfe 	bl	80001f0 <memchr>
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d038      	beq.n	8004a6a <_svfiprintf_r+0x1d6>
 80049f8:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <_svfiprintf_r+0x1f0>)
 80049fa:	bb1b      	cbnz	r3, 8004a44 <_svfiprintf_r+0x1b0>
 80049fc:	9b03      	ldr	r3, [sp, #12]
 80049fe:	3307      	adds	r3, #7
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	3308      	adds	r3, #8
 8004a06:	9303      	str	r3, [sp, #12]
 8004a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0a:	4433      	add	r3, r6
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	e768      	b.n	80048e2 <_svfiprintf_r+0x4e>
 8004a10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a14:	460c      	mov	r4, r1
 8004a16:	2001      	movs	r0, #1
 8004a18:	e7a6      	b.n	8004968 <_svfiprintf_r+0xd4>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	3401      	adds	r4, #1
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	4619      	mov	r1, r3
 8004a22:	f04f 0c0a 	mov.w	ip, #10
 8004a26:	4620      	mov	r0, r4
 8004a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a2c:	3a30      	subs	r2, #48	; 0x30
 8004a2e:	2a09      	cmp	r2, #9
 8004a30:	d903      	bls.n	8004a3a <_svfiprintf_r+0x1a6>
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0c6      	beq.n	80049c4 <_svfiprintf_r+0x130>
 8004a36:	9105      	str	r1, [sp, #20]
 8004a38:	e7c4      	b.n	80049c4 <_svfiprintf_r+0x130>
 8004a3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a3e:	4604      	mov	r4, r0
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7f0      	b.n	8004a26 <_svfiprintf_r+0x192>
 8004a44:	ab03      	add	r3, sp, #12
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	462a      	mov	r2, r5
 8004a4a:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <_svfiprintf_r+0x1f4>)
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f3af 8000 	nop.w
 8004a54:	1c42      	adds	r2, r0, #1
 8004a56:	4606      	mov	r6, r0
 8004a58:	d1d6      	bne.n	8004a08 <_svfiprintf_r+0x174>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	065b      	lsls	r3, r3, #25
 8004a5e:	f53f af2d 	bmi.w	80048bc <_svfiprintf_r+0x28>
 8004a62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a64:	b01d      	add	sp, #116	; 0x74
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <_svfiprintf_r+0x1f4>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4638      	mov	r0, r7
 8004a76:	f000 f9bd 	bl	8004df4 <_printf_i>
 8004a7a:	e7eb      	b.n	8004a54 <_svfiprintf_r+0x1c0>
 8004a7c:	08005658 	.word	0x08005658
 8004a80:	08005662 	.word	0x08005662
 8004a84:	00000000 	.word	0x00000000
 8004a88:	080047e1 	.word	0x080047e1
 8004a8c:	0800565e 	.word	0x0800565e

08004a90 <__sfputc_r>:
 8004a90:	6893      	ldr	r3, [r2, #8]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	b410      	push	{r4}
 8004a98:	6093      	str	r3, [r2, #8]
 8004a9a:	da08      	bge.n	8004aae <__sfputc_r+0x1e>
 8004a9c:	6994      	ldr	r4, [r2, #24]
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	db01      	blt.n	8004aa6 <__sfputc_r+0x16>
 8004aa2:	290a      	cmp	r1, #10
 8004aa4:	d103      	bne.n	8004aae <__sfputc_r+0x1e>
 8004aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aaa:	f000 bb73 	b.w	8005194 <__swbuf_r>
 8004aae:	6813      	ldr	r3, [r2, #0]
 8004ab0:	1c58      	adds	r0, r3, #1
 8004ab2:	6010      	str	r0, [r2, #0]
 8004ab4:	7019      	strb	r1, [r3, #0]
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <__sfputs_r>:
 8004abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	460f      	mov	r7, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	18d5      	adds	r5, r2, r3
 8004ac8:	42ac      	cmp	r4, r5
 8004aca:	d101      	bne.n	8004ad0 <__sfputs_r+0x12>
 8004acc:	2000      	movs	r0, #0
 8004ace:	e007      	b.n	8004ae0 <__sfputs_r+0x22>
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	463a      	mov	r2, r7
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	f7ff ffda 	bl	8004a90 <__sfputc_r>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d1f3      	bne.n	8004ac8 <__sfputs_r+0xa>
 8004ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ae4 <_vfiprintf_r>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	460d      	mov	r5, r1
 8004aea:	b09d      	sub	sp, #116	; 0x74
 8004aec:	4614      	mov	r4, r2
 8004aee:	4698      	mov	r8, r3
 8004af0:	4606      	mov	r6, r0
 8004af2:	b118      	cbz	r0, 8004afc <_vfiprintf_r+0x18>
 8004af4:	6a03      	ldr	r3, [r0, #32]
 8004af6:	b90b      	cbnz	r3, 8004afc <_vfiprintf_r+0x18>
 8004af8:	f7ff fc52 	bl	80043a0 <__sinit>
 8004afc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004afe:	07d9      	lsls	r1, r3, #31
 8004b00:	d405      	bmi.n	8004b0e <_vfiprintf_r+0x2a>
 8004b02:	89ab      	ldrh	r3, [r5, #12]
 8004b04:	059a      	lsls	r2, r3, #22
 8004b06:	d402      	bmi.n	8004b0e <_vfiprintf_r+0x2a>
 8004b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b0a:	f7ff fd6e 	bl	80045ea <__retarget_lock_acquire_recursive>
 8004b0e:	89ab      	ldrh	r3, [r5, #12]
 8004b10:	071b      	lsls	r3, r3, #28
 8004b12:	d501      	bpl.n	8004b18 <_vfiprintf_r+0x34>
 8004b14:	692b      	ldr	r3, [r5, #16]
 8004b16:	b99b      	cbnz	r3, 8004b40 <_vfiprintf_r+0x5c>
 8004b18:	4629      	mov	r1, r5
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f000 fb78 	bl	8005210 <__swsetup_r>
 8004b20:	b170      	cbz	r0, 8004b40 <_vfiprintf_r+0x5c>
 8004b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b24:	07dc      	lsls	r4, r3, #31
 8004b26:	d504      	bpl.n	8004b32 <_vfiprintf_r+0x4e>
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	b01d      	add	sp, #116	; 0x74
 8004b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b32:	89ab      	ldrh	r3, [r5, #12]
 8004b34:	0598      	lsls	r0, r3, #22
 8004b36:	d4f7      	bmi.n	8004b28 <_vfiprintf_r+0x44>
 8004b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b3a:	f7ff fd57 	bl	80045ec <__retarget_lock_release_recursive>
 8004b3e:	e7f3      	b.n	8004b28 <_vfiprintf_r+0x44>
 8004b40:	2300      	movs	r3, #0
 8004b42:	9309      	str	r3, [sp, #36]	; 0x24
 8004b44:	2320      	movs	r3, #32
 8004b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4e:	2330      	movs	r3, #48	; 0x30
 8004b50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004d04 <_vfiprintf_r+0x220>
 8004b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b58:	f04f 0901 	mov.w	r9, #1
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	469a      	mov	sl, r3
 8004b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b64:	b10a      	cbz	r2, 8004b6a <_vfiprintf_r+0x86>
 8004b66:	2a25      	cmp	r2, #37	; 0x25
 8004b68:	d1f9      	bne.n	8004b5e <_vfiprintf_r+0x7a>
 8004b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6e:	d00b      	beq.n	8004b88 <_vfiprintf_r+0xa4>
 8004b70:	465b      	mov	r3, fp
 8004b72:	4622      	mov	r2, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	4630      	mov	r0, r6
 8004b78:	f7ff ffa1 	bl	8004abe <__sfputs_r>
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f000 80a9 	beq.w	8004cd4 <_vfiprintf_r+0x1f0>
 8004b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b84:	445a      	add	r2, fp
 8004b86:	9209      	str	r2, [sp, #36]	; 0x24
 8004b88:	f89a 3000 	ldrb.w	r3, [sl]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80a1 	beq.w	8004cd4 <_vfiprintf_r+0x1f0>
 8004b92:	2300      	movs	r3, #0
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b9c:	f10a 0a01 	add.w	sl, sl, #1
 8004ba0:	9304      	str	r3, [sp, #16]
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8004baa:	4654      	mov	r4, sl
 8004bac:	2205      	movs	r2, #5
 8004bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb2:	4854      	ldr	r0, [pc, #336]	; (8004d04 <_vfiprintf_r+0x220>)
 8004bb4:	f7fb fb1c 	bl	80001f0 <memchr>
 8004bb8:	9a04      	ldr	r2, [sp, #16]
 8004bba:	b9d8      	cbnz	r0, 8004bf4 <_vfiprintf_r+0x110>
 8004bbc:	06d1      	lsls	r1, r2, #27
 8004bbe:	bf44      	itt	mi
 8004bc0:	2320      	movmi	r3, #32
 8004bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc6:	0713      	lsls	r3, r2, #28
 8004bc8:	bf44      	itt	mi
 8004bca:	232b      	movmi	r3, #43	; 0x2b
 8004bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd6:	d015      	beq.n	8004c04 <_vfiprintf_r+0x120>
 8004bd8:	9a07      	ldr	r2, [sp, #28]
 8004bda:	4654      	mov	r4, sl
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f04f 0c0a 	mov.w	ip, #10
 8004be2:	4621      	mov	r1, r4
 8004be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be8:	3b30      	subs	r3, #48	; 0x30
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d94d      	bls.n	8004c8a <_vfiprintf_r+0x1a6>
 8004bee:	b1b0      	cbz	r0, 8004c1e <_vfiprintf_r+0x13a>
 8004bf0:	9207      	str	r2, [sp, #28]
 8004bf2:	e014      	b.n	8004c1e <_vfiprintf_r+0x13a>
 8004bf4:	eba0 0308 	sub.w	r3, r0, r8
 8004bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	9304      	str	r3, [sp, #16]
 8004c00:	46a2      	mov	sl, r4
 8004c02:	e7d2      	b.n	8004baa <_vfiprintf_r+0xc6>
 8004c04:	9b03      	ldr	r3, [sp, #12]
 8004c06:	1d19      	adds	r1, r3, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	9103      	str	r1, [sp, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bfbb      	ittet	lt
 8004c10:	425b      	neglt	r3, r3
 8004c12:	f042 0202 	orrlt.w	r2, r2, #2
 8004c16:	9307      	strge	r3, [sp, #28]
 8004c18:	9307      	strlt	r3, [sp, #28]
 8004c1a:	bfb8      	it	lt
 8004c1c:	9204      	strlt	r2, [sp, #16]
 8004c1e:	7823      	ldrb	r3, [r4, #0]
 8004c20:	2b2e      	cmp	r3, #46	; 0x2e
 8004c22:	d10c      	bne.n	8004c3e <_vfiprintf_r+0x15a>
 8004c24:	7863      	ldrb	r3, [r4, #1]
 8004c26:	2b2a      	cmp	r3, #42	; 0x2a
 8004c28:	d134      	bne.n	8004c94 <_vfiprintf_r+0x1b0>
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	1d1a      	adds	r2, r3, #4
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	9203      	str	r2, [sp, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	bfb8      	it	lt
 8004c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c3a:	3402      	adds	r4, #2
 8004c3c:	9305      	str	r3, [sp, #20]
 8004c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d14 <_vfiprintf_r+0x230>
 8004c42:	7821      	ldrb	r1, [r4, #0]
 8004c44:	2203      	movs	r2, #3
 8004c46:	4650      	mov	r0, sl
 8004c48:	f7fb fad2 	bl	80001f0 <memchr>
 8004c4c:	b138      	cbz	r0, 8004c5e <_vfiprintf_r+0x17a>
 8004c4e:	9b04      	ldr	r3, [sp, #16]
 8004c50:	eba0 000a 	sub.w	r0, r0, sl
 8004c54:	2240      	movs	r2, #64	; 0x40
 8004c56:	4082      	lsls	r2, r0
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	3401      	adds	r4, #1
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c62:	4829      	ldr	r0, [pc, #164]	; (8004d08 <_vfiprintf_r+0x224>)
 8004c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c68:	2206      	movs	r2, #6
 8004c6a:	f7fb fac1 	bl	80001f0 <memchr>
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d03f      	beq.n	8004cf2 <_vfiprintf_r+0x20e>
 8004c72:	4b26      	ldr	r3, [pc, #152]	; (8004d0c <_vfiprintf_r+0x228>)
 8004c74:	bb1b      	cbnz	r3, 8004cbe <_vfiprintf_r+0x1da>
 8004c76:	9b03      	ldr	r3, [sp, #12]
 8004c78:	3307      	adds	r3, #7
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	3308      	adds	r3, #8
 8004c80:	9303      	str	r3, [sp, #12]
 8004c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c84:	443b      	add	r3, r7
 8004c86:	9309      	str	r3, [sp, #36]	; 0x24
 8004c88:	e768      	b.n	8004b5c <_vfiprintf_r+0x78>
 8004c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8e:	460c      	mov	r4, r1
 8004c90:	2001      	movs	r0, #1
 8004c92:	e7a6      	b.n	8004be2 <_vfiprintf_r+0xfe>
 8004c94:	2300      	movs	r3, #0
 8004c96:	3401      	adds	r4, #1
 8004c98:	9305      	str	r3, [sp, #20]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	f04f 0c0a 	mov.w	ip, #10
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca6:	3a30      	subs	r2, #48	; 0x30
 8004ca8:	2a09      	cmp	r2, #9
 8004caa:	d903      	bls.n	8004cb4 <_vfiprintf_r+0x1d0>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0c6      	beq.n	8004c3e <_vfiprintf_r+0x15a>
 8004cb0:	9105      	str	r1, [sp, #20]
 8004cb2:	e7c4      	b.n	8004c3e <_vfiprintf_r+0x15a>
 8004cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb8:	4604      	mov	r4, r0
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e7f0      	b.n	8004ca0 <_vfiprintf_r+0x1bc>
 8004cbe:	ab03      	add	r3, sp, #12
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	462a      	mov	r2, r5
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <_vfiprintf_r+0x22c>)
 8004cc6:	a904      	add	r1, sp, #16
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f3af 8000 	nop.w
 8004cce:	4607      	mov	r7, r0
 8004cd0:	1c78      	adds	r0, r7, #1
 8004cd2:	d1d6      	bne.n	8004c82 <_vfiprintf_r+0x19e>
 8004cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd6:	07d9      	lsls	r1, r3, #31
 8004cd8:	d405      	bmi.n	8004ce6 <_vfiprintf_r+0x202>
 8004cda:	89ab      	ldrh	r3, [r5, #12]
 8004cdc:	059a      	lsls	r2, r3, #22
 8004cde:	d402      	bmi.n	8004ce6 <_vfiprintf_r+0x202>
 8004ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ce2:	f7ff fc83 	bl	80045ec <__retarget_lock_release_recursive>
 8004ce6:	89ab      	ldrh	r3, [r5, #12]
 8004ce8:	065b      	lsls	r3, r3, #25
 8004cea:	f53f af1d 	bmi.w	8004b28 <_vfiprintf_r+0x44>
 8004cee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf0:	e71c      	b.n	8004b2c <_vfiprintf_r+0x48>
 8004cf2:	ab03      	add	r3, sp, #12
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	462a      	mov	r2, r5
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <_vfiprintf_r+0x22c>)
 8004cfa:	a904      	add	r1, sp, #16
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 f879 	bl	8004df4 <_printf_i>
 8004d02:	e7e4      	b.n	8004cce <_vfiprintf_r+0x1ea>
 8004d04:	08005658 	.word	0x08005658
 8004d08:	08005662 	.word	0x08005662
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	08004abf 	.word	0x08004abf
 8004d14:	0800565e 	.word	0x0800565e

08004d18 <_printf_common>:
 8004d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	4699      	mov	r9, r3
 8004d20:	688a      	ldr	r2, [r1, #8]
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	bfb8      	it	lt
 8004d2c:	4613      	movlt	r3, r2
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b10a      	cbz	r2, 8004d3e <_printf_common+0x26>
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	0699      	lsls	r1, r3, #26
 8004d42:	bf42      	ittt	mi
 8004d44:	6833      	ldrmi	r3, [r6, #0]
 8004d46:	3302      	addmi	r3, #2
 8004d48:	6033      	strmi	r3, [r6, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	f015 0506 	ands.w	r5, r5, #6
 8004d50:	d106      	bne.n	8004d60 <_printf_common+0x48>
 8004d52:	f104 0a19 	add.w	sl, r4, #25
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	6832      	ldr	r2, [r6, #0]
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dc26      	bgt.n	8004dae <_printf_common+0x96>
 8004d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d64:	1e13      	subs	r3, r2, #0
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	bf18      	it	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d42b      	bmi.n	8004dc8 <_printf_common+0xb0>
 8004d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d74:	4649      	mov	r1, r9
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c0      	blx	r8
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d01e      	beq.n	8004dbc <_printf_common+0xa4>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	6922      	ldr	r2, [r4, #16]
 8004d82:	f003 0306 	and.w	r3, r3, #6
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	bf02      	ittt	eq
 8004d8a:	68e5      	ldreq	r5, [r4, #12]
 8004d8c:	6833      	ldreq	r3, [r6, #0]
 8004d8e:	1aed      	subeq	r5, r5, r3
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	bf0c      	ite	eq
 8004d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d98:	2500      	movne	r5, #0
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bfc4      	itt	gt
 8004d9e:	1a9b      	subgt	r3, r3, r2
 8004da0:	18ed      	addgt	r5, r5, r3
 8004da2:	2600      	movs	r6, #0
 8004da4:	341a      	adds	r4, #26
 8004da6:	42b5      	cmp	r5, r6
 8004da8:	d11a      	bne.n	8004de0 <_printf_common+0xc8>
 8004daa:	2000      	movs	r0, #0
 8004dac:	e008      	b.n	8004dc0 <_printf_common+0xa8>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	4649      	mov	r1, r9
 8004db4:	4638      	mov	r0, r7
 8004db6:	47c0      	blx	r8
 8004db8:	3001      	adds	r0, #1
 8004dba:	d103      	bne.n	8004dc4 <_printf_common+0xac>
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	e7c6      	b.n	8004d56 <_printf_common+0x3e>
 8004dc8:	18e1      	adds	r1, r4, r3
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	2030      	movs	r0, #48	; 0x30
 8004dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd2:	4422      	add	r2, r4
 8004dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ddc:	3302      	adds	r3, #2
 8004dde:	e7c7      	b.n	8004d70 <_printf_common+0x58>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4622      	mov	r2, r4
 8004de4:	4649      	mov	r1, r9
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d0e6      	beq.n	8004dbc <_printf_common+0xa4>
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7d9      	b.n	8004da6 <_printf_common+0x8e>
	...

08004df4 <_printf_i>:
 8004df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	7e0f      	ldrb	r7, [r1, #24]
 8004dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dfc:	2f78      	cmp	r7, #120	; 0x78
 8004dfe:	4691      	mov	r9, r2
 8004e00:	4680      	mov	r8, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	469a      	mov	sl, r3
 8004e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e0a:	d807      	bhi.n	8004e1c <_printf_i+0x28>
 8004e0c:	2f62      	cmp	r7, #98	; 0x62
 8004e0e:	d80a      	bhi.n	8004e26 <_printf_i+0x32>
 8004e10:	2f00      	cmp	r7, #0
 8004e12:	f000 80d4 	beq.w	8004fbe <_printf_i+0x1ca>
 8004e16:	2f58      	cmp	r7, #88	; 0x58
 8004e18:	f000 80c0 	beq.w	8004f9c <_printf_i+0x1a8>
 8004e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e24:	e03a      	b.n	8004e9c <_printf_i+0xa8>
 8004e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2a:	2b15      	cmp	r3, #21
 8004e2c:	d8f6      	bhi.n	8004e1c <_printf_i+0x28>
 8004e2e:	a101      	add	r1, pc, #4	; (adr r1, 8004e34 <_printf_i+0x40>)
 8004e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004e1d 	.word	0x08004e1d
 8004e40:	08004e1d 	.word	0x08004e1d
 8004e44:	08004e1d 	.word	0x08004e1d
 8004e48:	08004e1d 	.word	0x08004e1d
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004e1d 	.word	0x08004e1d
 8004e54:	08004e1d 	.word	0x08004e1d
 8004e58:	08004e1d 	.word	0x08004e1d
 8004e5c:	08004e1d 	.word	0x08004e1d
 8004e60:	08004fa5 	.word	0x08004fa5
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004f5f 	.word	0x08004f5f
 8004e6c:	08004e1d 	.word	0x08004e1d
 8004e70:	08004e1d 	.word	0x08004e1d
 8004e74:	08004fc7 	.word	0x08004fc7
 8004e78:	08004e1d 	.word	0x08004e1d
 8004e7c:	08004ecd 	.word	0x08004ecd
 8004e80:	08004e1d 	.word	0x08004e1d
 8004e84:	08004e1d 	.word	0x08004e1d
 8004e88:	08004f67 	.word	0x08004f67
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e09f      	b.n	8004fe0 <_printf_i+0x1ec>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	682b      	ldr	r3, [r5, #0]
 8004ea4:	0607      	lsls	r7, r0, #24
 8004ea6:	f103 0104 	add.w	r1, r3, #4
 8004eaa:	6029      	str	r1, [r5, #0]
 8004eac:	d501      	bpl.n	8004eb2 <_printf_i+0xbe>
 8004eae:	681e      	ldr	r6, [r3, #0]
 8004eb0:	e003      	b.n	8004eba <_printf_i+0xc6>
 8004eb2:	0646      	lsls	r6, r0, #25
 8004eb4:	d5fb      	bpl.n	8004eae <_printf_i+0xba>
 8004eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	da03      	bge.n	8004ec6 <_printf_i+0xd2>
 8004ebe:	232d      	movs	r3, #45	; 0x2d
 8004ec0:	4276      	negs	r6, r6
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	485a      	ldr	r0, [pc, #360]	; (8005030 <_printf_i+0x23c>)
 8004ec8:	230a      	movs	r3, #10
 8004eca:	e012      	b.n	8004ef2 <_printf_i+0xfe>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	1d19      	adds	r1, r3, #4
 8004ed2:	6029      	str	r1, [r5, #0]
 8004ed4:	0605      	lsls	r5, r0, #24
 8004ed6:	d501      	bpl.n	8004edc <_printf_i+0xe8>
 8004ed8:	681e      	ldr	r6, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <_printf_i+0xee>
 8004edc:	0641      	lsls	r1, r0, #25
 8004ede:	d5fb      	bpl.n	8004ed8 <_printf_i+0xe4>
 8004ee0:	881e      	ldrh	r6, [r3, #0]
 8004ee2:	4853      	ldr	r0, [pc, #332]	; (8005030 <_printf_i+0x23c>)
 8004ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ee6:	bf0c      	ite	eq
 8004ee8:	2308      	moveq	r3, #8
 8004eea:	230a      	movne	r3, #10
 8004eec:	2100      	movs	r1, #0
 8004eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ef2:	6865      	ldr	r5, [r4, #4]
 8004ef4:	60a5      	str	r5, [r4, #8]
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	bfa2      	ittt	ge
 8004efa:	6821      	ldrge	r1, [r4, #0]
 8004efc:	f021 0104 	bicge.w	r1, r1, #4
 8004f00:	6021      	strge	r1, [r4, #0]
 8004f02:	b90e      	cbnz	r6, 8004f08 <_printf_i+0x114>
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	d04b      	beq.n	8004fa0 <_printf_i+0x1ac>
 8004f08:	4615      	mov	r5, r2
 8004f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f12:	5dc7      	ldrb	r7, [r0, r7]
 8004f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f18:	4637      	mov	r7, r6
 8004f1a:	42bb      	cmp	r3, r7
 8004f1c:	460e      	mov	r6, r1
 8004f1e:	d9f4      	bls.n	8004f0a <_printf_i+0x116>
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d10b      	bne.n	8004f3c <_printf_i+0x148>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	07de      	lsls	r6, r3, #31
 8004f28:	d508      	bpl.n	8004f3c <_printf_i+0x148>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	6861      	ldr	r1, [r4, #4]
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	bfde      	ittt	le
 8004f32:	2330      	movle	r3, #48	; 0x30
 8004f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f3c:	1b52      	subs	r2, r2, r5
 8004f3e:	6122      	str	r2, [r4, #16]
 8004f40:	f8cd a000 	str.w	sl, [sp]
 8004f44:	464b      	mov	r3, r9
 8004f46:	aa03      	add	r2, sp, #12
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4640      	mov	r0, r8
 8004f4c:	f7ff fee4 	bl	8004d18 <_printf_common>
 8004f50:	3001      	adds	r0, #1
 8004f52:	d14a      	bne.n	8004fea <_printf_i+0x1f6>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295
 8004f58:	b004      	add	sp, #16
 8004f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f043 0320 	orr.w	r3, r3, #32
 8004f64:	6023      	str	r3, [r4, #0]
 8004f66:	4833      	ldr	r0, [pc, #204]	; (8005034 <_printf_i+0x240>)
 8004f68:	2778      	movs	r7, #120	; 0x78
 8004f6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	6829      	ldr	r1, [r5, #0]
 8004f72:	061f      	lsls	r7, r3, #24
 8004f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f78:	d402      	bmi.n	8004f80 <_printf_i+0x18c>
 8004f7a:	065f      	lsls	r7, r3, #25
 8004f7c:	bf48      	it	mi
 8004f7e:	b2b6      	uxthmi	r6, r6
 8004f80:	07df      	lsls	r7, r3, #31
 8004f82:	bf48      	it	mi
 8004f84:	f043 0320 	orrmi.w	r3, r3, #32
 8004f88:	6029      	str	r1, [r5, #0]
 8004f8a:	bf48      	it	mi
 8004f8c:	6023      	strmi	r3, [r4, #0]
 8004f8e:	b91e      	cbnz	r6, 8004f98 <_printf_i+0x1a4>
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f023 0320 	bic.w	r3, r3, #32
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	2310      	movs	r3, #16
 8004f9a:	e7a7      	b.n	8004eec <_printf_i+0xf8>
 8004f9c:	4824      	ldr	r0, [pc, #144]	; (8005030 <_printf_i+0x23c>)
 8004f9e:	e7e4      	b.n	8004f6a <_printf_i+0x176>
 8004fa0:	4615      	mov	r5, r2
 8004fa2:	e7bd      	b.n	8004f20 <_printf_i+0x12c>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	6826      	ldr	r6, [r4, #0]
 8004fa8:	6961      	ldr	r1, [r4, #20]
 8004faa:	1d18      	adds	r0, r3, #4
 8004fac:	6028      	str	r0, [r5, #0]
 8004fae:	0635      	lsls	r5, r6, #24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0x1c4>
 8004fb4:	6019      	str	r1, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0x1ca>
 8004fb8:	0670      	lsls	r0, r6, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0x1c0>
 8004fbc:	8019      	strh	r1, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	4615      	mov	r5, r2
 8004fc4:	e7bc      	b.n	8004f40 <_printf_i+0x14c>
 8004fc6:	682b      	ldr	r3, [r5, #0]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	602a      	str	r2, [r5, #0]
 8004fcc:	681d      	ldr	r5, [r3, #0]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f7fb f90c 	bl	80001f0 <memchr>
 8004fd8:	b108      	cbz	r0, 8004fde <_printf_i+0x1ea>
 8004fda:	1b40      	subs	r0, r0, r5
 8004fdc:	6060      	str	r0, [r4, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	e7aa      	b.n	8004f40 <_printf_i+0x14c>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	462a      	mov	r2, r5
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d0ad      	beq.n	8004f54 <_printf_i+0x160>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	d413      	bmi.n	8005026 <_printf_i+0x232>
 8004ffe:	68e0      	ldr	r0, [r4, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	4298      	cmp	r0, r3
 8005004:	bfb8      	it	lt
 8005006:	4618      	movlt	r0, r3
 8005008:	e7a6      	b.n	8004f58 <_printf_i+0x164>
 800500a:	2301      	movs	r3, #1
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	47d0      	blx	sl
 8005014:	3001      	adds	r0, #1
 8005016:	d09d      	beq.n	8004f54 <_printf_i+0x160>
 8005018:	3501      	adds	r5, #1
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	9903      	ldr	r1, [sp, #12]
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	42ab      	cmp	r3, r5
 8005022:	dcf2      	bgt.n	800500a <_printf_i+0x216>
 8005024:	e7eb      	b.n	8004ffe <_printf_i+0x20a>
 8005026:	2500      	movs	r5, #0
 8005028:	f104 0619 	add.w	r6, r4, #25
 800502c:	e7f5      	b.n	800501a <_printf_i+0x226>
 800502e:	bf00      	nop
 8005030:	08005669 	.word	0x08005669
 8005034:	0800567a 	.word	0x0800567a

08005038 <__sflush_r>:
 8005038:	898a      	ldrh	r2, [r1, #12]
 800503a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503e:	4605      	mov	r5, r0
 8005040:	0710      	lsls	r0, r2, #28
 8005042:	460c      	mov	r4, r1
 8005044:	d458      	bmi.n	80050f8 <__sflush_r+0xc0>
 8005046:	684b      	ldr	r3, [r1, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	dc05      	bgt.n	8005058 <__sflush_r+0x20>
 800504c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	dc02      	bgt.n	8005058 <__sflush_r+0x20>
 8005052:	2000      	movs	r0, #0
 8005054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800505a:	2e00      	cmp	r6, #0
 800505c:	d0f9      	beq.n	8005052 <__sflush_r+0x1a>
 800505e:	2300      	movs	r3, #0
 8005060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005064:	682f      	ldr	r7, [r5, #0]
 8005066:	6a21      	ldr	r1, [r4, #32]
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	d032      	beq.n	80050d2 <__sflush_r+0x9a>
 800506c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	075a      	lsls	r2, r3, #29
 8005072:	d505      	bpl.n	8005080 <__sflush_r+0x48>
 8005074:	6863      	ldr	r3, [r4, #4]
 8005076:	1ac0      	subs	r0, r0, r3
 8005078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800507a:	b10b      	cbz	r3, 8005080 <__sflush_r+0x48>
 800507c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800507e:	1ac0      	subs	r0, r0, r3
 8005080:	2300      	movs	r3, #0
 8005082:	4602      	mov	r2, r0
 8005084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005086:	6a21      	ldr	r1, [r4, #32]
 8005088:	4628      	mov	r0, r5
 800508a:	47b0      	blx	r6
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	d106      	bne.n	80050a0 <__sflush_r+0x68>
 8005092:	6829      	ldr	r1, [r5, #0]
 8005094:	291d      	cmp	r1, #29
 8005096:	d82b      	bhi.n	80050f0 <__sflush_r+0xb8>
 8005098:	4a29      	ldr	r2, [pc, #164]	; (8005140 <__sflush_r+0x108>)
 800509a:	410a      	asrs	r2, r1
 800509c:	07d6      	lsls	r6, r2, #31
 800509e:	d427      	bmi.n	80050f0 <__sflush_r+0xb8>
 80050a0:	2200      	movs	r2, #0
 80050a2:	6062      	str	r2, [r4, #4]
 80050a4:	04d9      	lsls	r1, r3, #19
 80050a6:	6922      	ldr	r2, [r4, #16]
 80050a8:	6022      	str	r2, [r4, #0]
 80050aa:	d504      	bpl.n	80050b6 <__sflush_r+0x7e>
 80050ac:	1c42      	adds	r2, r0, #1
 80050ae:	d101      	bne.n	80050b4 <__sflush_r+0x7c>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	b903      	cbnz	r3, 80050b6 <__sflush_r+0x7e>
 80050b4:	6560      	str	r0, [r4, #84]	; 0x54
 80050b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050b8:	602f      	str	r7, [r5, #0]
 80050ba:	2900      	cmp	r1, #0
 80050bc:	d0c9      	beq.n	8005052 <__sflush_r+0x1a>
 80050be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050c2:	4299      	cmp	r1, r3
 80050c4:	d002      	beq.n	80050cc <__sflush_r+0x94>
 80050c6:	4628      	mov	r0, r5
 80050c8:	f7ff fa92 	bl	80045f0 <_free_r>
 80050cc:	2000      	movs	r0, #0
 80050ce:	6360      	str	r0, [r4, #52]	; 0x34
 80050d0:	e7c0      	b.n	8005054 <__sflush_r+0x1c>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4628      	mov	r0, r5
 80050d6:	47b0      	blx	r6
 80050d8:	1c41      	adds	r1, r0, #1
 80050da:	d1c8      	bne.n	800506e <__sflush_r+0x36>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0c5      	beq.n	800506e <__sflush_r+0x36>
 80050e2:	2b1d      	cmp	r3, #29
 80050e4:	d001      	beq.n	80050ea <__sflush_r+0xb2>
 80050e6:	2b16      	cmp	r3, #22
 80050e8:	d101      	bne.n	80050ee <__sflush_r+0xb6>
 80050ea:	602f      	str	r7, [r5, #0]
 80050ec:	e7b1      	b.n	8005052 <__sflush_r+0x1a>
 80050ee:	89a3      	ldrh	r3, [r4, #12]
 80050f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	e7ad      	b.n	8005054 <__sflush_r+0x1c>
 80050f8:	690f      	ldr	r7, [r1, #16]
 80050fa:	2f00      	cmp	r7, #0
 80050fc:	d0a9      	beq.n	8005052 <__sflush_r+0x1a>
 80050fe:	0793      	lsls	r3, r2, #30
 8005100:	680e      	ldr	r6, [r1, #0]
 8005102:	bf08      	it	eq
 8005104:	694b      	ldreq	r3, [r1, #20]
 8005106:	600f      	str	r7, [r1, #0]
 8005108:	bf18      	it	ne
 800510a:	2300      	movne	r3, #0
 800510c:	eba6 0807 	sub.w	r8, r6, r7
 8005110:	608b      	str	r3, [r1, #8]
 8005112:	f1b8 0f00 	cmp.w	r8, #0
 8005116:	dd9c      	ble.n	8005052 <__sflush_r+0x1a>
 8005118:	6a21      	ldr	r1, [r4, #32]
 800511a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800511c:	4643      	mov	r3, r8
 800511e:	463a      	mov	r2, r7
 8005120:	4628      	mov	r0, r5
 8005122:	47b0      	blx	r6
 8005124:	2800      	cmp	r0, #0
 8005126:	dc06      	bgt.n	8005136 <__sflush_r+0xfe>
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800512e:	81a3      	strh	r3, [r4, #12]
 8005130:	f04f 30ff 	mov.w	r0, #4294967295
 8005134:	e78e      	b.n	8005054 <__sflush_r+0x1c>
 8005136:	4407      	add	r7, r0
 8005138:	eba8 0800 	sub.w	r8, r8, r0
 800513c:	e7e9      	b.n	8005112 <__sflush_r+0xda>
 800513e:	bf00      	nop
 8005140:	dfbffffe 	.word	0xdfbffffe

08005144 <_fflush_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	690b      	ldr	r3, [r1, #16]
 8005148:	4605      	mov	r5, r0
 800514a:	460c      	mov	r4, r1
 800514c:	b913      	cbnz	r3, 8005154 <_fflush_r+0x10>
 800514e:	2500      	movs	r5, #0
 8005150:	4628      	mov	r0, r5
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	b118      	cbz	r0, 800515e <_fflush_r+0x1a>
 8005156:	6a03      	ldr	r3, [r0, #32]
 8005158:	b90b      	cbnz	r3, 800515e <_fflush_r+0x1a>
 800515a:	f7ff f921 	bl	80043a0 <__sinit>
 800515e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f3      	beq.n	800514e <_fflush_r+0xa>
 8005166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005168:	07d0      	lsls	r0, r2, #31
 800516a:	d404      	bmi.n	8005176 <_fflush_r+0x32>
 800516c:	0599      	lsls	r1, r3, #22
 800516e:	d402      	bmi.n	8005176 <_fflush_r+0x32>
 8005170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005172:	f7ff fa3a 	bl	80045ea <__retarget_lock_acquire_recursive>
 8005176:	4628      	mov	r0, r5
 8005178:	4621      	mov	r1, r4
 800517a:	f7ff ff5d 	bl	8005038 <__sflush_r>
 800517e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005180:	07da      	lsls	r2, r3, #31
 8005182:	4605      	mov	r5, r0
 8005184:	d4e4      	bmi.n	8005150 <_fflush_r+0xc>
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	059b      	lsls	r3, r3, #22
 800518a:	d4e1      	bmi.n	8005150 <_fflush_r+0xc>
 800518c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800518e:	f7ff fa2d 	bl	80045ec <__retarget_lock_release_recursive>
 8005192:	e7dd      	b.n	8005150 <_fflush_r+0xc>

08005194 <__swbuf_r>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	460e      	mov	r6, r1
 8005198:	4614      	mov	r4, r2
 800519a:	4605      	mov	r5, r0
 800519c:	b118      	cbz	r0, 80051a6 <__swbuf_r+0x12>
 800519e:	6a03      	ldr	r3, [r0, #32]
 80051a0:	b90b      	cbnz	r3, 80051a6 <__swbuf_r+0x12>
 80051a2:	f7ff f8fd 	bl	80043a0 <__sinit>
 80051a6:	69a3      	ldr	r3, [r4, #24]
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	d525      	bpl.n	80051fc <__swbuf_r+0x68>
 80051b0:	6923      	ldr	r3, [r4, #16]
 80051b2:	b31b      	cbz	r3, 80051fc <__swbuf_r+0x68>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	6922      	ldr	r2, [r4, #16]
 80051b8:	1a98      	subs	r0, r3, r2
 80051ba:	6963      	ldr	r3, [r4, #20]
 80051bc:	b2f6      	uxtb	r6, r6
 80051be:	4283      	cmp	r3, r0
 80051c0:	4637      	mov	r7, r6
 80051c2:	dc04      	bgt.n	80051ce <__swbuf_r+0x3a>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4628      	mov	r0, r5
 80051c8:	f7ff ffbc 	bl	8005144 <_fflush_r>
 80051cc:	b9e0      	cbnz	r0, 8005208 <__swbuf_r+0x74>
 80051ce:	68a3      	ldr	r3, [r4, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60a3      	str	r3, [r4, #8]
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	701e      	strb	r6, [r3, #0]
 80051dc:	6962      	ldr	r2, [r4, #20]
 80051de:	1c43      	adds	r3, r0, #1
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d004      	beq.n	80051ee <__swbuf_r+0x5a>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	07db      	lsls	r3, r3, #31
 80051e8:	d506      	bpl.n	80051f8 <__swbuf_r+0x64>
 80051ea:	2e0a      	cmp	r6, #10
 80051ec:	d104      	bne.n	80051f8 <__swbuf_r+0x64>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f7ff ffa7 	bl	8005144 <_fflush_r>
 80051f6:	b938      	cbnz	r0, 8005208 <__swbuf_r+0x74>
 80051f8:	4638      	mov	r0, r7
 80051fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051fc:	4621      	mov	r1, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	f000 f806 	bl	8005210 <__swsetup_r>
 8005204:	2800      	cmp	r0, #0
 8005206:	d0d5      	beq.n	80051b4 <__swbuf_r+0x20>
 8005208:	f04f 37ff 	mov.w	r7, #4294967295
 800520c:	e7f4      	b.n	80051f8 <__swbuf_r+0x64>
	...

08005210 <__swsetup_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <__swsetup_r+0xac>)
 8005214:	4605      	mov	r5, r0
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	460c      	mov	r4, r1
 800521a:	b118      	cbz	r0, 8005224 <__swsetup_r+0x14>
 800521c:	6a03      	ldr	r3, [r0, #32]
 800521e:	b90b      	cbnz	r3, 8005224 <__swsetup_r+0x14>
 8005220:	f7ff f8be 	bl	80043a0 <__sinit>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800522a:	0718      	lsls	r0, r3, #28
 800522c:	d422      	bmi.n	8005274 <__swsetup_r+0x64>
 800522e:	06d9      	lsls	r1, r3, #27
 8005230:	d407      	bmi.n	8005242 <__swsetup_r+0x32>
 8005232:	2309      	movs	r3, #9
 8005234:	602b      	str	r3, [r5, #0]
 8005236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	f04f 30ff 	mov.w	r0, #4294967295
 8005240:	e034      	b.n	80052ac <__swsetup_r+0x9c>
 8005242:	0758      	lsls	r0, r3, #29
 8005244:	d512      	bpl.n	800526c <__swsetup_r+0x5c>
 8005246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005248:	b141      	cbz	r1, 800525c <__swsetup_r+0x4c>
 800524a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800524e:	4299      	cmp	r1, r3
 8005250:	d002      	beq.n	8005258 <__swsetup_r+0x48>
 8005252:	4628      	mov	r0, r5
 8005254:	f7ff f9cc 	bl	80045f0 <_free_r>
 8005258:	2300      	movs	r3, #0
 800525a:	6363      	str	r3, [r4, #52]	; 0x34
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005262:	81a3      	strh	r3, [r4, #12]
 8005264:	2300      	movs	r3, #0
 8005266:	6063      	str	r3, [r4, #4]
 8005268:	6923      	ldr	r3, [r4, #16]
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	f043 0308 	orr.w	r3, r3, #8
 8005272:	81a3      	strh	r3, [r4, #12]
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	b94b      	cbnz	r3, 800528c <__swsetup_r+0x7c>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800527e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005282:	d003      	beq.n	800528c <__swsetup_r+0x7c>
 8005284:	4621      	mov	r1, r4
 8005286:	4628      	mov	r0, r5
 8005288:	f000 f8a7 	bl	80053da <__smakebuf_r>
 800528c:	89a0      	ldrh	r0, [r4, #12]
 800528e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005292:	f010 0301 	ands.w	r3, r0, #1
 8005296:	d00a      	beq.n	80052ae <__swsetup_r+0x9e>
 8005298:	2300      	movs	r3, #0
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	6963      	ldr	r3, [r4, #20]
 800529e:	425b      	negs	r3, r3
 80052a0:	61a3      	str	r3, [r4, #24]
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	b943      	cbnz	r3, 80052b8 <__swsetup_r+0xa8>
 80052a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80052aa:	d1c4      	bne.n	8005236 <__swsetup_r+0x26>
 80052ac:	bd38      	pop	{r3, r4, r5, pc}
 80052ae:	0781      	lsls	r1, r0, #30
 80052b0:	bf58      	it	pl
 80052b2:	6963      	ldrpl	r3, [r4, #20]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	e7f4      	b.n	80052a2 <__swsetup_r+0x92>
 80052b8:	2000      	movs	r0, #0
 80052ba:	e7f7      	b.n	80052ac <__swsetup_r+0x9c>
 80052bc:	2000006c 	.word	0x2000006c

080052c0 <memmove>:
 80052c0:	4288      	cmp	r0, r1
 80052c2:	b510      	push	{r4, lr}
 80052c4:	eb01 0402 	add.w	r4, r1, r2
 80052c8:	d902      	bls.n	80052d0 <memmove+0x10>
 80052ca:	4284      	cmp	r4, r0
 80052cc:	4623      	mov	r3, r4
 80052ce:	d807      	bhi.n	80052e0 <memmove+0x20>
 80052d0:	1e43      	subs	r3, r0, #1
 80052d2:	42a1      	cmp	r1, r4
 80052d4:	d008      	beq.n	80052e8 <memmove+0x28>
 80052d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052de:	e7f8      	b.n	80052d2 <memmove+0x12>
 80052e0:	4402      	add	r2, r0
 80052e2:	4601      	mov	r1, r0
 80052e4:	428a      	cmp	r2, r1
 80052e6:	d100      	bne.n	80052ea <memmove+0x2a>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052f2:	e7f7      	b.n	80052e4 <memmove+0x24>

080052f4 <_sbrk_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d06      	ldr	r5, [pc, #24]	; (8005310 <_sbrk_r+0x1c>)
 80052f8:	2300      	movs	r3, #0
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fc f820 	bl	8001344 <_sbrk>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_sbrk_r+0x1a>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_sbrk_r+0x1a>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	2000039c 	.word	0x2000039c

08005314 <memcpy>:
 8005314:	440a      	add	r2, r1
 8005316:	4291      	cmp	r1, r2
 8005318:	f100 33ff 	add.w	r3, r0, #4294967295
 800531c:	d100      	bne.n	8005320 <memcpy+0xc>
 800531e:	4770      	bx	lr
 8005320:	b510      	push	{r4, lr}
 8005322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800532a:	4291      	cmp	r1, r2
 800532c:	d1f9      	bne.n	8005322 <memcpy+0xe>
 800532e:	bd10      	pop	{r4, pc}

08005330 <_realloc_r>:
 8005330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005334:	4680      	mov	r8, r0
 8005336:	4614      	mov	r4, r2
 8005338:	460e      	mov	r6, r1
 800533a:	b921      	cbnz	r1, 8005346 <_realloc_r+0x16>
 800533c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005340:	4611      	mov	r1, r2
 8005342:	f7ff b9c1 	b.w	80046c8 <_malloc_r>
 8005346:	b92a      	cbnz	r2, 8005354 <_realloc_r+0x24>
 8005348:	f7ff f952 	bl	80045f0 <_free_r>
 800534c:	4625      	mov	r5, r4
 800534e:	4628      	mov	r0, r5
 8005350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005354:	f000 f8a0 	bl	8005498 <_malloc_usable_size_r>
 8005358:	4284      	cmp	r4, r0
 800535a:	4607      	mov	r7, r0
 800535c:	d802      	bhi.n	8005364 <_realloc_r+0x34>
 800535e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005362:	d812      	bhi.n	800538a <_realloc_r+0x5a>
 8005364:	4621      	mov	r1, r4
 8005366:	4640      	mov	r0, r8
 8005368:	f7ff f9ae 	bl	80046c8 <_malloc_r>
 800536c:	4605      	mov	r5, r0
 800536e:	2800      	cmp	r0, #0
 8005370:	d0ed      	beq.n	800534e <_realloc_r+0x1e>
 8005372:	42bc      	cmp	r4, r7
 8005374:	4622      	mov	r2, r4
 8005376:	4631      	mov	r1, r6
 8005378:	bf28      	it	cs
 800537a:	463a      	movcs	r2, r7
 800537c:	f7ff ffca 	bl	8005314 <memcpy>
 8005380:	4631      	mov	r1, r6
 8005382:	4640      	mov	r0, r8
 8005384:	f7ff f934 	bl	80045f0 <_free_r>
 8005388:	e7e1      	b.n	800534e <_realloc_r+0x1e>
 800538a:	4635      	mov	r5, r6
 800538c:	e7df      	b.n	800534e <_realloc_r+0x1e>

0800538e <__swhatbuf_r>:
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005396:	2900      	cmp	r1, #0
 8005398:	b096      	sub	sp, #88	; 0x58
 800539a:	4615      	mov	r5, r2
 800539c:	461e      	mov	r6, r3
 800539e:	da0d      	bge.n	80053bc <__swhatbuf_r+0x2e>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	bf0c      	ite	eq
 80053ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80053b0:	2340      	movne	r3, #64	; 0x40
 80053b2:	2000      	movs	r0, #0
 80053b4:	6031      	str	r1, [r6, #0]
 80053b6:	602b      	str	r3, [r5, #0]
 80053b8:	b016      	add	sp, #88	; 0x58
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	466a      	mov	r2, sp
 80053be:	f000 f849 	bl	8005454 <_fstat_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	dbec      	blt.n	80053a0 <__swhatbuf_r+0x12>
 80053c6:	9901      	ldr	r1, [sp, #4]
 80053c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80053cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80053d0:	4259      	negs	r1, r3
 80053d2:	4159      	adcs	r1, r3
 80053d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d8:	e7eb      	b.n	80053b2 <__swhatbuf_r+0x24>

080053da <__smakebuf_r>:
 80053da:	898b      	ldrh	r3, [r1, #12]
 80053dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053de:	079d      	lsls	r5, r3, #30
 80053e0:	4606      	mov	r6, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	d507      	bpl.n	80053f6 <__smakebuf_r+0x1c>
 80053e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	2301      	movs	r3, #1
 80053f0:	6163      	str	r3, [r4, #20]
 80053f2:	b002      	add	sp, #8
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	ab01      	add	r3, sp, #4
 80053f8:	466a      	mov	r2, sp
 80053fa:	f7ff ffc8 	bl	800538e <__swhatbuf_r>
 80053fe:	9900      	ldr	r1, [sp, #0]
 8005400:	4605      	mov	r5, r0
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff f960 	bl	80046c8 <_malloc_r>
 8005408:	b948      	cbnz	r0, 800541e <__smakebuf_r+0x44>
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	059a      	lsls	r2, r3, #22
 8005410:	d4ef      	bmi.n	80053f2 <__smakebuf_r+0x18>
 8005412:	f023 0303 	bic.w	r3, r3, #3
 8005416:	f043 0302 	orr.w	r3, r3, #2
 800541a:	81a3      	strh	r3, [r4, #12]
 800541c:	e7e3      	b.n	80053e6 <__smakebuf_r+0xc>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	6020      	str	r0, [r4, #0]
 8005422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005426:	81a3      	strh	r3, [r4, #12]
 8005428:	9b00      	ldr	r3, [sp, #0]
 800542a:	6163      	str	r3, [r4, #20]
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	6120      	str	r0, [r4, #16]
 8005430:	b15b      	cbz	r3, 800544a <__smakebuf_r+0x70>
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	4630      	mov	r0, r6
 8005438:	f000 f81e 	bl	8005478 <_isatty_r>
 800543c:	b128      	cbz	r0, 800544a <__smakebuf_r+0x70>
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f023 0303 	bic.w	r3, r3, #3
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	431d      	orrs	r5, r3
 800544e:	81a5      	strh	r5, [r4, #12]
 8005450:	e7cf      	b.n	80053f2 <__smakebuf_r+0x18>
	...

08005454 <_fstat_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	; (8005474 <_fstat_r+0x20>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	602b      	str	r3, [r5, #0]
 8005462:	f7fb ff47 	bl	80012f4 <_fstat>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d102      	bne.n	8005470 <_fstat_r+0x1c>
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	b103      	cbz	r3, 8005470 <_fstat_r+0x1c>
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	2000039c 	.word	0x2000039c

08005478 <_isatty_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_isatty_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fb ff46 	bl	8001314 <_isatty>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_isatty_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_isatty_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	2000039c 	.word	0x2000039c

08005498 <_malloc_usable_size_r>:
 8005498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549c:	1f18      	subs	r0, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfbc      	itt	lt
 80054a2:	580b      	ldrlt	r3, [r1, r0]
 80054a4:	18c0      	addlt	r0, r0, r3
 80054a6:	4770      	bx	lr

080054a8 <_init>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr

080054b4 <_fini>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr
