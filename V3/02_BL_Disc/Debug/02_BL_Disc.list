
02_BL_Disc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .marker_data  00000004  08008000  08008000  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007764  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001ec  08007914  08007914  00017914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08007b00  08007b00  00028004  2**0
                  CONTENTS
  5 .ARM          00000008  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007b08  08007b08  00028004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  20000000  08007b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       00000000  10000000  10000000  00028004  2**0
                  CONTENTS
 11 .bss          0000433c  20000068  20000068  00030068  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200043a4  200043a4  00030068  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028004  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00028034  2**0
                  CONTENTS, READONLY
 15 .debug_info   00017f7d  00000000  00000000  00028077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000435a  00000000  00000000  0003fff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001690  00000000  00000000  00044350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000115b  00000000  00000000  000459e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026d11  00000000  00000000  00046b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001ae36  00000000  00000000  0006d84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e4f79  00000000  00000000  00088682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000610c  00000000  00000000  0016d5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000045  00000000  00000000  00173708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078fc 	.word	0x080078fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	080078fc 	.word	0x080078fc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <BL_Print_Message>:
	CBL_GO_TO_USER_APP,
 };

/* API Definitions -----------------------------------------------------------*/
void BL_Print_Message(char *format, ...)
{
 800058c:	b40f      	push	{r0, r1, r2, r3}
 800058e:	b580      	push	{r7, lr}
 8000590:	b09a      	sub	sp, #104	; 0x68
 8000592:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2260      	movs	r2, #96	; 0x60
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f006 fd27 	bl	8006ff4 <memset>
	/* holds the information needed by va_start, va_arg, va_end */
	va_list args;
	/* Enables access to the variable arguments */
	va_start(args, format);
 80005a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005aa:	603b      	str	r3, [r7, #0]
	/* Write formatted data from variable argument list to string */
	vsprintf(Messsage, format, args);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 fd14 	bl	8006fe0 <vsiprintf>
#if (BL_DEBUG_METHOD == BL_ENABLE_UART_DEBUG_MESSAGE)
	/* Trasmit the formatted data through the defined UART */
	HAL_UART_Transmit(BL_DEBUG_UART_PC, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	2264      	movs	r2, #100	; 0x64
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <BL_Print_Message+0x48>)
 80005c2:	f003 fb49 	bl	8003c58 <HAL_UART_Transmit>
#endif
	/* Performs cleanup for an ap object initialized by a call to va_start */
	va_end(args);
}
 80005c6:	bf00      	nop
 80005c8:	3768      	adds	r7, #104	; 0x68
 80005ca:	46bd      	mov	sp, r7
 80005cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d0:	b004      	add	sp, #16
 80005d2:	4770      	bx	lr
 80005d4:	20000400 	.word	0x20000400

080005d8 <BL_UART_Fetch_Host_Command>:

BL_Status BL_UART_Fetch_Host_Command (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	/* Local Definations Scope */
	BL_Status Status = BL_OK;
 80005de:	2300      	movs	r3, #0
 80005e0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71bb      	strb	r3, [r7, #6]
	uint16_t Data_length = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	80bb      	strh	r3, [r7, #4]

	/* Clear BL_Host_Buffer */
	memset(BL_Host_Buffer, 0, BL_HOST_BUFFER_RX_LENGTH);
 80005ea:	22c8      	movs	r2, #200	; 0xc8
 80005ec:	2100      	movs	r1, #0
 80005ee:	484d      	ldr	r0, [pc, #308]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005f0:	f006 fd00 	bl	8006ff4 <memset>

	/* Read the length of the command packet received from the HOST */
	HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, BL_Host_Buffer, 1, HAL_MAX_DELAY);
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2201      	movs	r2, #1
 80005fa:	494a      	ldr	r1, [pc, #296]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80005fc:	484a      	ldr	r0, [pc, #296]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 80005fe:	f003 fbb6 	bl	8003d6e <HAL_UART_Receive>
 8000602:	4603      	mov	r3, r0
 8000604:	71bb      	strb	r3, [r7, #6]


	if (HAL_Status != HAL_OK)
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <BL_UART_Fetch_Host_Command+0x3a>
	{
		Status = BL_NOT_OK;
 800060c:	2301      	movs	r3, #1
 800060e:	71fb      	strb	r3, [r7, #7]
 8000610:	e083      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}

	else
	{
		Data_length = BL_Host_Buffer[0];
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	80bb      	strh	r3, [r7, #4]

		/* recieve the cmd  */
		HAL_Status = HAL_UART_Receive(BL_DEBUG_UART_HOST, &BL_Host_Buffer[1], Data_length, HAL_MAX_DELAY);
 8000618:	88ba      	ldrh	r2, [r7, #4]
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	4943      	ldr	r1, [pc, #268]	; (800072c <BL_UART_Fetch_Host_Command+0x154>)
 8000620:	4841      	ldr	r0, [pc, #260]	; (8000728 <BL_UART_Fetch_Host_Command+0x150>)
 8000622:	f003 fba4 	bl	8003d6e <HAL_UART_Receive>
 8000626:	4603      	mov	r3, r0
 8000628:	71bb      	strb	r3, [r7, #6]

	if (HAL_Status != HAL_OK)
 800062a:	79bb      	ldrb	r3, [r7, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <BL_UART_Fetch_Host_Command+0x5e>
	{
		Status = BL_NOT_OK;
 8000630:	2301      	movs	r3, #1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	e071      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>
	}
	else{
		switch (BL_Host_Buffer[1])
 8000636:	4b3b      	ldr	r3, [pc, #236]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000638:	785b      	ldrb	r3, [r3, #1]
 800063a:	3b10      	subs	r3, #16
 800063c:	2b12      	cmp	r3, #18
 800063e:	d868      	bhi.n	8000712 <BL_UART_Fetch_Host_Command+0x13a>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <BL_UART_Fetch_Host_Command+0x70>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000695 	.word	0x08000695
 800064c:	080006a7 	.word	0x080006a7
 8000650:	080006b9 	.word	0x080006b9
 8000654:	08000713 	.word	0x08000713
 8000658:	080006cb 	.word	0x080006cb
 800065c:	080006dd 	.word	0x080006dd
 8000660:	080006ef 	.word	0x080006ef
 8000664:	08000713 	.word	0x08000713
 8000668:	08000713 	.word	0x08000713
 800066c:	08000713 	.word	0x08000713
 8000670:	08000713 	.word	0x08000713
 8000674:	08000713 	.word	0x08000713
 8000678:	08000713 	.word	0x08000713
 800067c:	08000713 	.word	0x08000713
 8000680:	08000713 	.word	0x08000713
 8000684:	08000713 	.word	0x08000713
 8000688:	08000713 	.word	0x08000713
 800068c:	08000713 	.word	0x08000713
 8000690:	08000701 	.word	0x08000701
		{
		case CBL_GET_VER_CMD:
		            BL_Print_Message("Gets the protocol version \r\n");
 8000694:	4826      	ldr	r0, [pc, #152]	; (8000730 <BL_UART_Fetch_Host_Command+0x158>)
 8000696:	f7ff ff79 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Version(BL_Host_Buffer);
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 800069c:	f000 f918 	bl	80008d0 <Bootloader_Get_Version>
		            Status = BL_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
		            break;
 80006a4:	e039      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_HELP_CMD:
		            BL_Print_Message("Gets help with Commands ID \r\n");
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <BL_UART_Fetch_Host_Command+0x15c>)
 80006a8:	f7ff ff70 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Help(BL_Host_Buffer);
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006ae:	f000 f941 	bl	8000934 <Bootloader_Get_Help>
		            Status = BL_OK;
 80006b2:	2300      	movs	r3, #0
 80006b4:	71fb      	strb	r3, [r7, #7]
		            break;
 80006b6:	e030      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GET_CID_CMD:
		            BL_Print_Message("Gets the chip ID \r\n");
 80006b8:	481f      	ldr	r0, [pc, #124]	; (8000738 <BL_UART_Fetch_Host_Command+0x160>)
 80006ba:	f7ff ff67 	bl	800058c <BL_Print_Message>
		            Bootloader_Get_Chip_Identification_Number(BL_Host_Buffer);
 80006be:	4819      	ldr	r0, [pc, #100]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006c0:	f000 f966 	bl	8000990 <Bootloader_Get_Chip_Identification_Number>
		            Status = BL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	71fb      	strb	r3, [r7, #7]
		            break;
 80006c8:	e027      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_ADDR_CMD:
					BL_Print_Message("Jumps to specific address located in the flash memory \r\n");
 80006ca:	481c      	ldr	r0, [pc, #112]	; (800073c <BL_UART_Fetch_Host_Command+0x164>)
 80006cc:	f7ff ff5e 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_Address(BL_Host_Buffer);
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006d2:	f000 fa5b 	bl	8000b8c <Bootloader_Jump_To_Address>
					Status = BL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	71fb      	strb	r3, [r7, #7]
					break;
 80006da:	e01e      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_FLASH_ERASE_CMD:
					BL_Print_Message("Erases some pages in flash memory \r\n");
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <BL_UART_Fetch_Host_Command+0x168>)
 80006de:	f7ff ff55 	bl	800058c <BL_Print_Message>
					Bootloader_Erase_Flash(BL_Host_Buffer);
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006e4:	f000 fad9 	bl	8000c9a <Bootloader_Erase_Flash>
					Status = BL_OK;
 80006e8:	2300      	movs	r3, #0
 80006ea:	71fb      	strb	r3, [r7, #7]
					break;
 80006ec:	e015      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_MEM_WRITE_CMD:
					BL_Print_Message("Write bytes in Flash Memory from address specified by the application \r\n");
 80006ee:	4815      	ldr	r0, [pc, #84]	; (8000744 <BL_UART_Fetch_Host_Command+0x16c>)
 80006f0:	f7ff ff4c 	bl	800058c <BL_Print_Message>
					Bootloader_Memory_Write(BL_Host_Buffer);
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 80006f6:	f000 fb64 	bl	8000dc2 <Bootloader_Memory_Write>
					Status = BL_OK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
					break;
 80006fe:	e00c      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>

		case CBL_GO_TO_USER_APP:
					BL_Print_Message("Jumps to user application code located in the flash memory \r\n");
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <BL_UART_Fetch_Host_Command+0x170>)
 8000702:	f7ff ff43 	bl	800058c <BL_Print_Message>
					Bootloader_Jump_To_UserApp(BL_Host_Buffer);
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <BL_UART_Fetch_Host_Command+0x14c>)
 8000708:	f000 f97a 	bl	8000a00 <Bootloader_Jump_To_UserApp>
					Status = BL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	71fb      	strb	r3, [r7, #7]
					break;
 8000710:	e003      	b.n	800071a <BL_UART_Fetch_Host_Command+0x142>


		default:
					BL_Print_Message("Invalid command code received from host !! \r\n");
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <BL_UART_Fetch_Host_Command+0x174>)
 8000714:	f7ff ff3a 	bl	800058c <BL_Print_Message>
					break;
 8000718:	bf00      	nop
			}
		}
	}
  return Status;
 800071a:	79fb      	ldrb	r3, [r7, #7]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	20000490 	.word	0x20000490
 800072c:	20000085 	.word	0x20000085
 8000730:	08007914 	.word	0x08007914
 8000734:	08007934 	.word	0x08007934
 8000738:	08007954 	.word	0x08007954
 800073c:	08007968 	.word	0x08007968
 8000740:	080079a4 	.word	0x080079a4
 8000744:	080079cc 	.word	0x080079cc
 8000748:	08007a18 	.word	0x08007a18
 800074c:	08007a58 	.word	0x08007a58

08000750 <Bootloader_Send_Data_To_Host>:
  * @param  Data_Len    : Data Length.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_Data_To_Host (uint8_t *Host_Buffer, uint32_t Data_Len)
 {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_DEBUG_UART_HOST, Host_Buffer, Data_Len, HAL_MAX_DELAY);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	b29a      	uxth	r2, r3
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4803      	ldr	r0, [pc, #12]	; (8000774 <Bootloader_Send_Data_To_Host+0x24>)
 8000766:	f003 fa77 	bl	8003c58 <HAL_UART_Transmit>
 }
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000490 	.word	0x20000490

08000778 <Bootloader_Send_ACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_ACK (uint8_t Replay_Len)
 {
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t Ack_Info[2] = {0, 0};
 8000782:	2300      	movs	r3, #0
 8000784:	81bb      	strh	r3, [r7, #12]
	Ack_Info[0] = CBL_SEND_ACK;
 8000786:	23cd      	movs	r3, #205	; 0xcd
 8000788:	733b      	strb	r3, [r7, #12]
	Ack_Info[1] = Replay_Len; /* Length of the following packet (Response) from STM32 to the Host*/
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	737b      	strb	r3, [r7, #13]
	Bootloader_Send_Data_To_Host(Ack_Info, 2);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ffdb 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Bootloader_Send_NACK>:
  * @param  no params.
  * @retval no return.
**************************************************************************************/

 static inline void Bootloader_Send_NACK	(void)
 {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
	uint8_t Ack_Info = CBL_SEND_NACK;
 80007a8:	23ab      	movs	r3, #171	; 0xab
 80007aa:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&Ack_Info, 1);
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffcd 	bl	8000750 <Bootloader_Send_Data_To_Host>
 }
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <Bootloader_CRC_Verify>:
  * @param  Data_Len : Data Length.
  * @param  Host_CRC : CRC Delivered by Host.
  * @retval CRC_Status.
**************************************************************************************/
 static uint8_t Bootloader_CRC_Verify (uint8_t *pData, uint32_t Data_Len, uint32_t Host_CRC)
 {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 80007cc:	2300      	movs	r3, #0
 80007ce:	77fb      	strb	r3, [r7, #31]
	uint32_t MCU_CRC_Calculated = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
	uint8_t Data_Counter = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	75fb      	strb	r3, [r7, #23]
	uint32_t Data_Buffer = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007dc:	2300      	movs	r3, #0
 80007de:	75fb      	strb	r3, [r7, #23]
 80007e0:	e00f      	b.n	8000802 <Bootloader_CRC_Verify+0x42>
	{
		Data_Buffer = (uint32_t)(pData[Data_Counter]);
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	613b      	str	r3, [r7, #16]
		MCU_CRC_Calculated = HAL_CRC_Accumulate(CRC_ENGINE_OBJ, &Data_Buffer, 1);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 80007f6:	f001 f9ec 	bl	8001bd2 <HAL_CRC_Accumulate>
 80007fa:	61b8      	str	r0, [r7, #24]
	for (Data_Counter = 0; Data_Counter < Data_Len; Data_Counter++)
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	3301      	adds	r3, #1
 8000800:	75fb      	strb	r3, [r7, #23]
 8000802:	7dfb      	ldrb	r3, [r7, #23]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	429a      	cmp	r2, r3
 8000808:	d8eb      	bhi.n	80007e2 <Bootloader_CRC_Verify+0x22>
	}
	/* Reset the CRC Calculation Unit */
    __HAL_CRC_DR_RESET(CRC_ENGINE_OBJ);
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <Bootloader_CRC_Verify+0x78>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0201 	orr.w	r2, r2, #1
 8000818:	609a      	str	r2, [r3, #8]

	/* Compare the Host CRC and Calculated CRC */
	if(MCU_CRC_Calculated == Host_CRC)
 800081a:	69ba      	ldr	r2, [r7, #24]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	d102      	bne.n	8000828 <Bootloader_CRC_Verify+0x68>
	{
		CRC_Status = CRC_VERIFICATION_PASSED;
 8000822:	2301      	movs	r3, #1
 8000824:	77fb      	strb	r3, [r7, #31]
 8000826:	e001      	b.n	800082c <Bootloader_CRC_Verify+0x6c>
	}
	else
	{
		CRC_Status = CRC_VERIFICATION_FAILED;
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
	}
	return CRC_Status;
 800082c:	7ffb      	ldrb	r3, [r7, #31]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000014c 	.word	0x2000014c

0800083c <Calculate_CRC32>:

/* Custom CRC Verification with different Polynomial (0x08C71CC1) */
static uint8_t Calculate_CRC32 (uint8_t* Buffer, uint32_t Buffer_Length, uint32_t Host_CRC)
{
 800083c:	b480      	push	{r7}
 800083e:	b08b      	sub	sp, #44	; 0x2c
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	uint8_t CRC_Status = CRC_VERIFICATION_FAILED;
 8000848:	2300      	movs	r3, #0
 800084a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t MCU_CRC_Calculated = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
    uint32_t CRC_Value = 0xFFFFFFFF;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295
 8000856:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
 800085c:	e01f      	b.n	800089e <Calculate_CRC32+0x62>
	{
      CRC_Value = CRC_Value ^ Buffer[i];
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	6a3b      	ldr	r3, [r7, #32]
 800086a:	4053      	eors	r3, r2
 800086c:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e00e      	b.n	8000892 <Calculate_CRC32+0x56>
	{
      if(CRC_Value & 0x80000000)
 8000874:	6a3b      	ldr	r3, [r7, #32]
 8000876:	2b00      	cmp	r3, #0
 8000878:	da05      	bge.n	8000886 <Calculate_CRC32+0x4a>
	  {
            CRC_Value = (CRC_Value << 1) ^ 0x08C71CC1;
 800087a:	6a3b      	ldr	r3, [r7, #32]
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <Calculate_CRC32+0x90>)
 8000880:	4053      	eors	r3, r2
 8000882:	623b      	str	r3, [r7, #32]
 8000884:	e002      	b.n	800088c <Calculate_CRC32+0x50>
      }
	  else
	  {
            CRC_Value = (CRC_Value << 1);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	623b      	str	r3, [r7, #32]
    for (uint32_t DataElemBitLen = 0; DataElemBitLen < 32; DataElemBitLen++)
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	3301      	adds	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2b1f      	cmp	r3, #31
 8000896:	d9ed      	bls.n	8000874 <Calculate_CRC32+0x38>
    for (uint32_t i = 0; i < Buffer_Length; i++)
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	3301      	adds	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3db      	bcc.n	800085e <Calculate_CRC32+0x22>
      }
      }
  }
	/* Compare the Host CRC and Calculated CRC */
	if(CRC_Value == Host_CRC)
 80008a6:	6a3a      	ldr	r2, [r7, #32]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d103      	bne.n	80008b6 <Calculate_CRC32+0x7a>
	{
		   CRC_Status = CRC_VERIFICATION_PASSED;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80008b4:	e002      	b.n	80008bc <Calculate_CRC32+0x80>
	}
	else
	{
		   CRC_Status = CRC_VERIFICATION_FAILED;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	       return CRC_Status;
 80008bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	372c      	adds	r7, #44	; 0x2c
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	08c71cc1 	.word	0x08c71cc1

080008d0 <Bootloader_Get_Version>:
  * @brief  Get Bootloader Version.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Version	(uint8_t *Host_Buffer){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	/* Local Definations Scope */
	uint8_t BL_Version [4] = {CBL_VENDOR_ID, CBL_SW_MAJOR_VERSION, CBL_SW_MINOR_VERSION, CBL_SW_PATCH_VERSION};
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <Bootloader_Get_Version+0x60>)
 80008da:	60fb      	str	r3, [r7, #12]
	uint16_t Host_CMD_Packet_Len = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	3301      	adds	r3, #1
 80008ec:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));	
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	3b04      	subs	r3, #4
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80008fa:	8afb      	ldrh	r3, [r7, #22]
 80008fc:	3b04      	subs	r3, #4
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4619      	mov	r1, r3
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff9a 	bl	800083c <Calculate_CRC32>
 8000908:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800090a:	2b01      	cmp	r3, #1
 800090c:	d109      	bne.n	8000922 <Bootloader_Get_Version+0x52>

		Bootloader_Send_ACK(4);
 800090e:	2004      	movs	r0, #4
 8000910:	f7ff ff32 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(BL_Version, 4);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff ff18 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	  Bootloader_Send_NACK();
	}	
}
 8000920:	e001      	b.n	8000926 <Bootloader_Get_Version+0x56>
	  Bootloader_Send_NACK();
 8000922:	f7ff ff3e 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	01000164 	.word	0x01000164

08000934 <Bootloader_Get_Help>:
  * @brief  Get Commands Help.
  * @param  Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Help	(uint8_t *Host_Buffer){
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	81fb      	strh	r3, [r7, #14]
  uint32_t Host_CRC32 = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	3301      	adds	r3, #1
 800094c:	81fb      	strh	r3, [r7, #14]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 800094e:	89fb      	ldrh	r3, [r7, #14]
 8000950:	3b04      	subs	r3, #4
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60bb      	str	r3, [r7, #8]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len - CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	3b04      	subs	r3, #4
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	4619      	mov	r1, r3
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ff6a 	bl	800083c <Calculate_CRC32>
 8000968:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 800096a:	2b01      	cmp	r3, #1
 800096c:	d107      	bne.n	800097e <Bootloader_Get_Help+0x4a>

		Bootloader_Send_ACK(12);
 800096e:	200c      	movs	r0, #12
 8000970:	f7ff ff02 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host(Bootloader_Supported_CMDs, 12);
 8000974:	210c      	movs	r1, #12
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <Bootloader_Get_Help+0x58>)
 8000978:	f7ff feea 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 800097c:	e001      	b.n	8000982 <Bootloader_Get_Help+0x4e>
	Bootloader_Send_NACK();
 800097e:	f7ff ff10 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000000 	.word	0x20000000

08000990 <Bootloader_Get_Chip_Identification_Number>:
  * @brief  Get Chip Identification Number.
  * @param  *pData   : Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Get_Chip_Identification_Number	(uint8_t *Host_Buffer){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	613b      	str	r3, [r7, #16]
	uint16_t MCU_Identification_Number = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3301      	adds	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	3b04      	subs	r3, #4
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 80009ba:	8afb      	ldrh	r3, [r7, #22]
 80009bc:	3b04      	subs	r3, #4
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff3a 	bl	800083c <Calculate_CRC32>
 80009c8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d110      	bne.n	80009f0 <Bootloader_Get_Chip_Identification_Number+0x60>

		MCU_Identification_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Bootloader_Get_Chip_Identification_Number+0x6c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80009d8:	b29b      	uxth	r3, r3
 80009da:	81fb      	strh	r3, [r7, #14]
		Bootloader_Send_ACK(2);
 80009dc:	2002      	movs	r0, #2
 80009de:	f7ff fecb 	bl	8000778 <Bootloader_Send_ACK>
		Bootloader_Send_Data_To_Host((uint8_t* )&MCU_Identification_Number, 2);
 80009e2:	f107 030e 	add.w	r3, r7, #14
 80009e6:	2102      	movs	r1, #2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff feb1 	bl	8000750 <Bootloader_Send_Data_To_Host>
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 80009ee:	e001      	b.n	80009f4 <Bootloader_Get_Chip_Identification_Number+0x64>
	Bootloader_Send_NACK();
 80009f0:	f7ff fed7 	bl	80007a2 <Bootloader_Send_NACK>
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e0042000 	.word	0xe0042000

08000a00 <Bootloader_Jump_To_UserApp>:
  * @brief  Jump To User Application.
  * @param  no params.
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_UserApp (uint8_t *Host_Buffer){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint16_t Host_CMD_Packet_Len = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61bb      	str	r3, [r7, #24]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000a1a:	8bfb      	ldrh	r3, [r7, #30]
 8000a1c:	3b04      	subs	r3, #4
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED ==
		                     Calculate_CRC32 (Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000a26:	8bfb      	ldrh	r3, [r7, #30]
 8000a28:	3b04      	subs	r3, #4
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ff04 	bl	800083c <Calculate_CRC32>
 8000a34:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED ==
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d11b      	bne.n	8000a72 <Bootloader_Jump_To_UserApp+0x72>


		Bootloader_Send_ACK(1);
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff fe9c 	bl	8000778 <Bootloader_Send_ACK>

		Bootloader_Send_Data_To_Host((uint8_t*)CRC_VERIFICATION_PASSED, 1);
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff fe84 	bl	8000750 <Bootloader_Send_Data_To_Host>
		/* ------> Jump to user Application <------ */
    // Read the MSP (Main Stack Pointer) value from the user application's vector table

		Bootloader_Jump_To_Application();
 8000a48:	f000 f81e 	bl	8000a88 <Bootloader_Jump_To_Application>
    uint32_t MSP_value   = *((volatile uint32_t* )0x08008000U);
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <Bootloader_Jump_To_UserApp+0x80>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	617b      	str	r3, [r7, #20]
	  // Read the reset handler address from the user application's vector table
	  uint32_t MainAppAdd  = *((volatile uint32_t* )(0x08008000U + 4));
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <Bootloader_Jump_To_UserApp+0x84>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	613b      	str	r3, [r7, #16]
	  // Define a function pointer to the reset handler address
	  pMainApp ResetHandler_Address = (pMainApp)MainAppAdd;
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	f383 8808 	msr	MSP, r3
}
 8000a66:	bf00      	nop
	  // Set the MSP to the value obtained from the user application's vector table
	  __set_MSP(MSP_value);
	  // Deinitialize the RCC (Reset and Clock Control) peripheral (Block any External Interrupts)
	  HAL_RCC_DeInit();
 8000a68:	f002 fd0c 	bl	8003484 <HAL_RCC_DeInit>
	  // Jump to the reset handler address in the user application
	  ResetHandler_Address();
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4798      	blx	r3

	  Bootloader_Send_NACK();
	}


}
 8000a70:	e001      	b.n	8000a76 <Bootloader_Jump_To_UserApp+0x76>
	  Bootloader_Send_NACK();
 8000a72:	f7ff fe96 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000a76:	bf00      	nop
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08008000 	.word	0x08008000
 8000a84:	08008004 	.word	0x08008004

08000a88 <Bootloader_Jump_To_Application>:

void Bootloader_Jump_To_Application()
  {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
	    void(*App_Reset_Handler)(void);

	  	uint32_t ResetHandlerAddress ;

	  	/*configure MSP of user APP by reading value form base address of sector2*/
	  	uint32_t Local_u32MSPval =*((volatile uint32_t * )(0x08008000));
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <Bootloader_Jump_To_Application+0x28>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	60fb      	str	r3, [r7, #12]

	  	/*write the user MSP value inside into msp register*/
	  	__asm volatile("msr MSP,%0"::"r"(Local_u32MSPval));
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f383 8808 	msr	MSP, r3

	  	/*Get reset Handler Address of user app*/
	  	ResetHandlerAddress = *((volatile uint32_t * ) (0x08008000 + 4)) ;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <Bootloader_Jump_To_Application+0x2c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	60bb      	str	r3, [r7, #8]

	  	App_Reset_Handler=(void*)ResetHandlerAddress;
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	607b      	str	r3, [r7, #4]

	  	/*jump to the user app handler */
	  	App_Reset_Handler();
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4798      	blx	r3



  }
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08008000 	.word	0x08008000
 8000ab4:	08008004 	.word	0x08008004

08000ab8 <Host_Address_Verification>:
  * @param  Jump_Address.
  * @retval Address_Verification.
**************************************************************************************/

static uint8_t Host_Address_Verification (uint32_t Jump_Address)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	if((Jump_Address >= SRAM_BASE) && (Jump_Address <= STM32F103_SRAM_END))
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000aca:	d306      	bcc.n	8000ada <Host_Address_Verification+0x22>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <Host_Address_Verification+0x4c>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d802      	bhi.n	8000ada <Host_Address_Verification+0x22>
	{
		  Address_Verification = ADDRESS_IS_VALID;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e00c      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else if((Jump_Address >= FLASH_BASE) && (Jump_Address <= STM32F103_FLASH_END)){
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ae0:	d306      	bcc.n	8000af0 <Host_Address_Verification+0x38>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8000ae8:	d802      	bhi.n	8000af0 <Host_Address_Verification+0x38>
		  Address_Verification = ADDRESS_IS_VALID;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e001      	b.n	8000af4 <Host_Address_Verification+0x3c>
	}
	else{
		  Address_Verification = ADDRESS_IS_INVALID;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Verification;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20040000 	.word	0x20040000

08000b08 <toggleBankAndReset>:
void toggleBankAndReset() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
	FLASH_AdvOBProgramInitTypeDef OBInit;
	HAL_FLASH_Unlock();
 8000b0e:	f001 fa27 	bl	8001f60 <HAL_FLASH_Unlock>
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
	HAL_FLASH_OB_Unlock();
 8000b12:	f001 fa57 	bl	8001fc4 <HAL_FLASH_OB_Unlock>
	HAL_FLASHEx_AdvOBGetConfig(&OBInit);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fc83 	bl	8002424 <HAL_FLASHEx_AdvOBGetConfig>
	OBInit.OptionType = OPTIONBYTE_BOOTCONFIG;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]

	if (((OBInit.BootConfig) & (OB_DUAL_BOOT_ENABLE)) == OB_DUAL_BOOT_ENABLE) {
 8000b22:	7d3b      	ldrb	r3, [r7, #20]
 8000b24:	f003 0310 	and.w	r3, r3, #16
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d002      	beq.n	8000b32 <toggleBankAndReset+0x2a>
		OBInit.BootConfig = OB_DUAL_BOOT_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	753b      	strb	r3, [r7, #20]
 8000b30:	e001      	b.n	8000b36 <toggleBankAndReset+0x2e>
	} else {
		OBInit.BootConfig = OB_DUAL_BOOT_ENABLE;
 8000b32:	2310      	movs	r3, #16
 8000b34:	753b      	strb	r3, [r7, #20]
	}
	if (HAL_FLASHEx_AdvOBProgram(&OBInit) != HAL_OK) {
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fc35 	bl	80023a8 <HAL_FLASHEx_AdvOBProgram>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d009      	beq.n	8000b58 <toggleBankAndReset+0x50>

		while (1) {
			HAL_Delay(1000);
 8000b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b48:	f000 ff06 	bl	8001958 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <toggleBankAndReset+0x80>)
 8000b52:	f001 ffd8 	bl	8002b06 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000b56:	e7f5      	b.n	8000b44 <toggleBankAndReset+0x3c>
		}
	}
	if (HAL_FLASH_OB_Launch() != HAL_OK) {
 8000b58:	f001 fa60 	bl	800201c <HAL_FLASH_OB_Launch>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <toggleBankAndReset+0x6c>

		while (1) {
			HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 fef8 	bl	8001958 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <toggleBankAndReset+0x80>)
 8000b6e:	f001 ffca 	bl	8002b06 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000b72:	e7f6      	b.n	8000b62 <toggleBankAndReset+0x5a>
		}
	}
	HAL_FLASH_OB_Lock();
 8000b74:	f001 fa42 	bl	8001ffc <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000b78:	f001 fa14 	bl	8001fa4 <HAL_FLASH_Lock>
	HAL_NVIC_SystemReset();
 8000b7c:	f001 f809 	bl	8001b92 <HAL_NVIC_SystemReset>

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021800 	.word	0x40021800

08000b8c <Bootloader_Jump_To_Address>:
  * @brief  Jump To Specific Address.
  * @param  *Host_Buffer: Pointer to Host_Buffer (Command Frame).
  * @retval no return.
**************************************************************************************/

static void Bootloader_Jump_To_Address (uint8_t *Host_Buffer){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	83fb      	strh	r3, [r7, #30]
  uint32_t Host_CRC32 = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61bb      	str	r3, [r7, #24]
	uint32_t HOST_Jump_Address = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	3301      	adds	r3, #1
 8000bac:	83fb      	strh	r3, [r7, #30]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000bae:	8bfb      	ldrh	r3, [r7, #30]
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	61bb      	str	r3, [r7, #24]
	if (CRC_VERIFICATION_PASSED == 
		                     Bootloader_CRC_Verify(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000bba:	8bfb      	ldrh	r3, [r7, #30]
 8000bbc:	3b04      	subs	r3, #4
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fdfc 	bl	80007c0 <Bootloader_CRC_Verify>
 8000bc8:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d121      	bne.n	8000c12 <Bootloader_Jump_To_Address+0x86>

		Bootloader_Send_ACK(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fdd2 	bl	8000778 <Bootloader_Send_ACK>
		HOST_Jump_Address = *((uint32_t* )&Host_Buffer[2]);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000bda:	617b      	str	r3, [r7, #20]
		Address_Verification = Host_Address_Verification(HOST_Jump_Address);				
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f7ff ff6b 	bl	8000ab8 <Host_Address_Verification>
 8000be2:	4603      	mov	r3, r0
 8000be4:	73fb      	strb	r3, [r7, #15]
    if( ADDRESS_IS_VALID == Address_Verification ){
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10b      	bne.n	8000c04 <Bootloader_Jump_To_Address+0x78>

			/* Report address verification succeeded */
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000bec:	f107 030f 	add.w	r3, r7, #15
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdac 	bl	8000750 <Bootloader_Send_Data_To_Host>
			/* Prepare the address to jump (1 --> state for thumb architecture) */
			Jump_Ptr Jump_Address = (Jump_Ptr)(HOST_Jump_Address + 1);
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
			Jump_Address();
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4798      	blx	r3
	}
	else{

	Bootloader_Send_NACK();
	}	
}
 8000c02:	e008      	b.n	8000c16 <Bootloader_Jump_To_Address+0x8a>
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000c04:	f107 030f 	add.w	r3, r7, #15
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fda0 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000c10:	e001      	b.n	8000c16 <Bootloader_Jump_To_Address+0x8a>
	Bootloader_Send_NACK();
 8000c12:	f7ff fdc6 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000c16:	bf00      	nop
 8000c18:	3720      	adds	r7, #32
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <Perform_Flash_Erase>:



#define INVALID_SECTOR            0x12
  uint8_t Perform_Flash_Erase(uint8_t initial_sector_number, uint8_t number_of_sector)
  {
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b08a      	sub	sp, #40	; 0x28
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	460a      	mov	r2, r1
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71bb      	strb	r3, [r7, #6]
  	//we have totally 12 sectors in one bank .. sector[0 to 11]
  	//number_of_sector has to be in the range of 0 to 11
  	// if sector_number = 0xff , that means mass erase !

  	FLASH_EraseInitTypeDef flashErase_handle;
  	uint32_t sectorError = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  	uint8_t erase_status = 0x01;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  	if (number_of_sector > 23)
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b17      	cmp	r3, #23
 8000c3c:	d901      	bls.n	8000c42 <Perform_Flash_Erase+0x24>
  		return (uint8_t) INVALID_SECTOR;
 8000c3e:	2312      	movs	r3, #18
 8000c40:	e027      	b.n	8000c92 <Perform_Flash_Erase+0x74>

  	if ((initial_sector_number == 0xFFFFFFFF) || (number_of_sector <= 23)) {
 8000c42:	79bb      	ldrb	r3, [r7, #6]
 8000c44:	2b17      	cmp	r3, #23
 8000c46:	d823      	bhi.n	8000c90 <Perform_Flash_Erase+0x72>
  		if (number_of_sector == (uint32_t) 0xFFFFFFFF) {
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
  			flashErase_handle.Banks = FLASH_BANK_1;
  		} else {
  			/*Here we are just calculating how many sectors needs to erased */
  			uint32_t remanining_sector = 24 - number_of_sector;
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	f1c3 0318 	rsb	r3, r3, #24
 8000c4e:	623b      	str	r3, [r7, #32]
  			if (number_of_sector > remanining_sector) {
 8000c50:	79bb      	ldrb	r3, [r7, #6]
 8000c52:	6a3a      	ldr	r2, [r7, #32]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d201      	bcs.n	8000c5c <Perform_Flash_Erase+0x3e>
  				number_of_sector = remanining_sector;
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	71bb      	strb	r3, [r7, #6]
  			}
  			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  			flashErase_handle.Sector = initial_sector_number; // this is the initial sector
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	617b      	str	r3, [r7, #20]
  			flashErase_handle.NbSectors = number_of_sector;
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	61bb      	str	r3, [r7, #24]
  		}

  		/*Get access to touch the flash registers */
  		HAL_FLASH_Unlock();
 8000c68:	f001 f97a 	bl	8001f60 <HAL_FLASH_Unlock>
  		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3; // our MCU will work on this voltage range
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
  		erase_status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle,
 8000c70:	f107 0208 	add.w	r2, r7, #8
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fb22 	bl	80022c4 <HAL_FLASHEx_Erase>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  				&sectorError);
  		HAL_FLASH_Lock();
 8000c86:	f001 f98d 	bl	8001fa4 <HAL_FLASH_Lock>

  		return (uint8_t) erase_status;
 8000c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c8e:	e000      	b.n	8000c92 <Perform_Flash_Erase+0x74>
  	}

  	return (uint8_t) INVALID_SECTOR;
 8000c90:	2312      	movs	r3, #18
  }
 8000c92:	4618      	mov	r0, r3
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <Bootloader_Erase_Flash>:





static void Bootloader_Erase_Flash	(uint8_t *Host_Buffer){
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	82fb      	strh	r3, [r7, #22]
  uint32_t Host_CRC32 = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
	uint8_t Erase_Status = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000cb8:	8afb      	ldrh	r3, [r7, #22]
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == 
		                     Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32)){
 8000cc4:	8afb      	ldrh	r3, [r7, #22]
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff fdb5 	bl	800083c <Calculate_CRC32>
 8000cd2:	4603      	mov	r3, r0
	if (CRC_VERIFICATION_PASSED == 
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d115      	bne.n	8000d04 <Bootloader_Erase_Flash+0x6a>

		Bootloader_Send_ACK(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fd4d 	bl	8000778 <Bootloader_Send_ACK>
		Erase_Status = Perform_Flash_Erase(Host_Buffer[2], Host_Buffer[3]);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4610      	mov	r0, r2
 8000cee:	f7ff ff96 	bl	8000c1e <Perform_Flash_Erase>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
		Bootloader_Send_Data_To_Host((uint8_t *)&Erase_Status, 1);
 8000cf6:	f107 030f 	add.w	r3, r7, #15
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd27 	bl	8000750 <Bootloader_Send_Data_To_Host>
  }
	else{

	Bootloader_Send_NACK();
	}	
}
 8000d02:	e001      	b.n	8000d08 <Bootloader_Erase_Flash+0x6e>
	Bootloader_Send_NACK();
 8000d04:	f7ff fd4d 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <Flash_Memory_Write_Payload>:
  * @param  *Payload_Len           :Data Length.
  * @param  Number_Of_Sectors.
  * @retval Flash_Payload_Write_Status.
**************************************************************************************/

uint8_t Flash_Memory_Write_Payload (uint8_t *Host_Payload, uint32_t Payload_Start_Address, uint16_t Payload_Len){
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d22:	2300      	movs	r3, #0
 8000d24:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_Counter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	837b      	strh	r3, [r7, #26]
	uint32_t Address = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
	/* Unlock the FLASH control register access */
  HAL_Status = HAL_FLASH_Unlock();
 8000d2e:	f001 f917 	bl	8001f60 <HAL_FLASH_Unlock>
 8000d32:	4603      	mov	r3, r0
 8000d34:	77fb      	strb	r3, [r7, #31]
	if(HAL_Status != HAL_OK){
 8000d36:	7ffb      	ldrb	r3, [r7, #31]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d002      	beq.n	8000d42 <Flash_Memory_Write_Payload+0x32>
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	77bb      	strb	r3, [r7, #30]
 8000d40:	e025      	b.n	8000d8e <Flash_Memory_Write_Payload+0x7e>
	}
	else{
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	83bb      	strh	r3, [r7, #28]
 8000d46:	e01e      	b.n	8000d86 <Flash_Memory_Write_Payload+0x76>
            /* Use uint16_t pointer to properly handle 16-bit data */
            uint16_t* dataToWrite = (uint16_t*)&Host_Payload[Payload_Counter];
 8000d48:	8bbb      	ldrh	r3, [r7, #28]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d50:	8bba      	ldrh	r2, [r7, #28]
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	18d1      	adds	r1, r2, r3
                                           Payload_Start_Address + Payload_Counter,
                                           *dataToWrite);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	881b      	ldrh	r3, [r3, #0]
            HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	461c      	mov	r4, r3
 8000d60:	4615      	mov	r5, r2
 8000d62:	4622      	mov	r2, r4
 8000d64:	462b      	mov	r3, r5
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fff0 	bl	8001d4c <HAL_FLASH_Program>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	77fb      	strb	r3, [r7, #31]
            if (HAL_Status != HAL_OK){
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <Flash_Memory_Write_Payload+0x6c>
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000d76:	2300      	movs	r3, #0
 8000d78:	77bb      	strb	r3, [r7, #30]
                break;
 8000d7a:	e008      	b.n	8000d8e <Flash_Memory_Write_Payload+0x7e>
            }
            else {
                Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	77bb      	strb	r3, [r7, #30]
	for (uint16_t Payload_Counter = 0; Payload_Counter < Payload_Len; Payload_Counter += 2) {
 8000d80:	8bbb      	ldrh	r3, [r7, #28]
 8000d82:	3302      	adds	r3, #2
 8000d84:	83bb      	strh	r3, [r7, #28]
 8000d86:	8bba      	ldrh	r2, [r7, #28]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3dc      	bcc.n	8000d48 <Flash_Memory_Write_Payload+0x38>
            }
        }
  }
	
	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status)){
 8000d8e:	7fbb      	ldrb	r3, [r7, #30]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10f      	bne.n	8000db4 <Flash_Memory_Write_Payload+0xa4>
 8000d94:	7ffb      	ldrb	r3, [r7, #31]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10c      	bne.n	8000db4 <Flash_Memory_Write_Payload+0xa4>
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 8000d9a:	f001 f903 	bl	8001fa4 <HAL_FLASH_Lock>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	77fb      	strb	r3, [r7, #31]
		if(HAL_Status != HAL_OK){
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <Flash_Memory_Write_Payload+0x9e>
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000da8:	2300      	movs	r3, #0
 8000daa:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000dac:	e004      	b.n	8000db8 <Flash_Memory_Write_Payload+0xa8>
		}
		else{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 8000dae:	2301      	movs	r3, #1
 8000db0:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK){
 8000db2:	e001      	b.n	8000db8 <Flash_Memory_Write_Payload+0xa8>
		}
	}
	else{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000db4:	2300      	movs	r3, #0
 8000db6:	77bb      	strb	r3, [r7, #30]
	}
	
	return Flash_Payload_Write_Status;
 8000db8:	7fbb      	ldrb	r3, [r7, #30]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}

08000dc2 <Bootloader_Memory_Write>:

static void Bootloader_Memory_Write	(uint8_t *Host_Buffer)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 /* Local Definations Scope */
	uint16_t Host_CMD_Packet_Len = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	82fb      	strh	r3, [r7, #22]
    uint32_t Host_CRC32 = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
    uint32_t HOST_Address = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
	uint8_t Address_Verification = ADDRESS_IS_INVALID;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72bb      	strb	r3, [r7, #10]
	uint8_t Payload_Len = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	72fb      	strb	r3, [r7, #11]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000dde:	2300      	movs	r3, #0
 8000de0:	727b      	strb	r3, [r7, #9]
	

	/* CRC Verification */
	Host_CMD_Packet_Len = Host_Buffer[0] + 1; //calculate the length
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3301      	adds	r3, #1
 8000dea:	82fb      	strh	r3, [r7, #22]
	Host_CRC32 = *((uint32_t* )((Host_Buffer + Host_CMD_Packet_Len) - CRC_TYPE_SIZE_BYTE));
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	3b04      	subs	r3, #4
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
	if (CRC_VERIFICATION_PASSED == Calculate_CRC32(Host_Buffer, Host_CMD_Packet_Len -  CRC_TYPE_SIZE_BYTE, Host_CRC32))
 8000df8:	8afb      	ldrh	r3, [r7, #22]
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fd1b 	bl	800083c <Calculate_CRC32>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d139      	bne.n	8000e80 <Bootloader_Memory_Write+0xbe>
	{

		Bootloader_Send_ACK(1);
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f7ff fcb3 	bl	8000778 <Bootloader_Send_ACK>
	 /* Extract the payload length from the Host packet */
	    Payload_Len  = Host_Buffer[6];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	799b      	ldrb	r3, [r3, #6]
 8000e16:	72fb      	strb	r3, [r7, #11]
	 /* Extract the start address from the Host packet */
        HOST_Address = *((uint32_t *)(&Host_Buffer[2]));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000e1e:	60fb      	str	r3, [r7, #12]
     /* Verify the Extracted address to be valid address */
		Address_Verification = Host_Address_Verification(HOST_Address);
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f7ff fe49 	bl	8000ab8 <Host_Address_Verification>
 8000e26:	4603      	mov	r3, r0
 8000e28:	72bb      	strb	r3, [r7, #10]
		if(ADDRESS_IS_VALID == Address_Verification)
 8000e2a:	7abb      	ldrb	r3, [r7, #10]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11e      	bne.n	8000e6e <Bootloader_Memory_Write+0xac>
		{
        Flash_Payload_Write_Status = Flash_Memory_Write_Payload((uint8_t *)&Host_Buffer[7], HOST_Address, Payload_Len);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3307      	adds	r3, #7
 8000e34:	7afa      	ldrb	r2, [r7, #11]
 8000e36:	b292      	uxth	r2, r2
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff68 	bl	8000d10 <Flash_Memory_Write_Payload>
 8000e40:	4603      	mov	r3, r0
 8000e42:	727b      	strb	r3, [r7, #9]

        if(FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status)
 8000e44:	7a7b      	ldrb	r3, [r7, #9]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d10a      	bne.n	8000e60 <Bootloader_Memory_Write+0x9e>
        {
				 /* Report payload write passed */
		Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e4a:	f107 0309 	add.w	r3, r7, #9
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fc7d 	bl	8000750 <Bootloader_Send_Data_To_Host>
				 /* ------> Send Acknowledge <------ */
        Bootloader_Send_Data_To_Host((uint8_t* )CBL_SEND_ACK, 1);
 8000e56:	2101      	movs	r1, #1
 8000e58:	20cd      	movs	r0, #205	; 0xcd
 8000e5a:	f7ff fc79 	bl	8000750 <Bootloader_Send_Data_To_Host>
	else
	{

	Bootloader_Send_NACK();
	}	
}
 8000e5e:	e011      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
			Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 8000e60:	f107 0309 	add.w	r3, r7, #9
 8000e64:	2101      	movs	r1, #1
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc72 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000e6c:	e00a      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
			Address_Verification = ADDRESS_IS_INVALID;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
			Bootloader_Send_Data_To_Host((uint8_t *)&Address_Verification, 1);
 8000e72:	f107 030a 	add.w	r3, r7, #10
 8000e76:	2101      	movs	r1, #1
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc69 	bl	8000750 <Bootloader_Send_Data_To_Host>
}
 8000e7e:	e001      	b.n	8000e84 <Bootloader_Memory_Write+0xc2>
	Bootloader_Send_NACK();
 8000e80:	f7ff fc8f 	bl	80007a2 <Bootloader_Send_NACK>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <get_Active_Bank_no>:



uint32_t get_Active_Bank_no(void) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
    // Create a pointer to the register at 0x1FFF C000
    volatile uint32_t* OptionByte = (volatile uint32_t*)0x1FFFC000;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <get_Active_Bank_no+0x24>)
 8000e94:	607b      	str	r3, [r7, #4]

    // Read the value from the register and check if bit 4 is set
    uint32_t BFB2 = (*OptionByte >> 4) & 0x01;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	091b      	lsrs	r3, r3, #4
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	603b      	str	r3, [r7, #0]



    return BFB2;
 8000ea2:	683b      	ldr	r3, [r7, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	1fffc000 	.word	0x1fffc000

08000eb4 <check_ValidityMarker>:
	


void check_ValidityMarker() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
    // Read the validity marker from the specified address
    uint32_t* validityMarkerAddress = (uint32_t*)0x08108000;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <check_ValidityMarker+0x48>)
 8000ebc:	60fb      	str	r3, [r7, #12]
    uint32_t validityMarker = *validityMarkerAddress;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	60bb      	str	r3, [r7, #8]
    uint8_t mode= 0  ;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
    // Check if the validity marker is equal to 200
    if (validityMarker ==  0xA0A0)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	f24a 02a0 	movw	r2, #41120	; 0xa0a0
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d108      	bne.n	8000ee4 <check_ValidityMarker+0x30>
    {
    	 mode = 0x01;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
    	 HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  True
 8000ed6:	1df9      	adds	r1, r7, #7
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2201      	movs	r2, #1
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <check_ValidityMarker+0x4c>)
 8000ede:	f002 febb 	bl	8003c58 <HAL_UART_Transmit>
    {
   	    mode = 0x02;
   	    HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  False
    }

}
 8000ee2:	e007      	b.n	8000ef4 <check_ValidityMarker+0x40>
   	    mode = 0x02;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	71fb      	strb	r3, [r7, #7]
   	    HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  False
 8000ee8:	1df9      	adds	r1, r7, #7
 8000eea:	230a      	movs	r3, #10
 8000eec:	2201      	movs	r2, #1
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <check_ValidityMarker+0x4c>)
 8000ef0:	f002 feb2 	bl	8003c58 <HAL_UART_Transmit>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	08108000 	.word	0x08108000
 8000f00:	20000400 	.word	0x20000400

08000f04 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_CRC_Init+0x20>)
 8000f0a:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <MX_CRC_Init+0x24>)
 8000f0c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_CRC_Init+0x20>)
 8000f10:	f000 fe43 	bl	8001b9a <HAL_CRC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f1a:	f000 f9fb 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000014c 	.word	0x2000014c
 8000f28:	40023000 	.word	0x40023000

08000f2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_CRC_MspInit+0x3c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d10d      	bne.n	8000f5a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_CRC_MspInit+0x40>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40023000 	.word	0x40023000
 8000f6c:	40023800 	.word	0x40023800

08000f70 <vApplicationIdleHook>:

volatile uint8_t indecator_Var, dummy;
volatile uint8_t RecVal;
volatile uint8_t FIRMWARE_UPDATE_TRIGGER = 0x7F;
__weak void vApplicationIdleHook( void )
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
//
	  HAL_UART_Receive_IT(&huart1, &RecVal, 1);
 8000f74:	2201      	movs	r2, #1
 8000f76:	490a      	ldr	r1, [pc, #40]	; (8000fa0 <vApplicationIdleHook+0x30>)
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <vApplicationIdleHook+0x34>)
 8000f7a:	f002 ff8f 	bl	8003e9c <HAL_UART_Receive_IT>
	   HAL_UART_Receive(&huart3, &indecator_Var, 1, HAL_MAX_DELAY);
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	2201      	movs	r2, #1
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <vApplicationIdleHook+0x38>)
 8000f86:	4809      	ldr	r0, [pc, #36]	; (8000fac <vApplicationIdleHook+0x3c>)
 8000f88:	f002 fef1 	bl	8003d6e <HAL_UART_Receive>
	  	    if (0x7F == indecator_Var)
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <vApplicationIdleHook+0x38>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b7f      	cmp	r3, #127	; 0x7f
 8000f94:	d101      	bne.n	8000f9a <vApplicationIdleHook+0x2a>
	  	     BL_UART_Fetch_Host_Command();
 8000f96:	f7ff fb1f 	bl	80005d8 <BL_UART_Fetch_Host_Command>

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000015d 	.word	0x2000015d
 8000fa4:	20000400 	.word	0x20000400
 8000fa8:	2000015c 	.word	0x2000015c
 8000fac:	20000490 	.word	0x20000490

08000fb0 <PreSleepProcessing>:
/* USER CODE END 2 */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <vApplicationGetIdleTaskMemory+0x30>)
 8000fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000160 	.word	0x20000160
 8001008:	200001b4 	.word	0x200001b4

0800100c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex1 */
  osMutexDef(Mutex1);
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  Mutex1Handle = osMutexCreate(osMutex(Mutex1));
 800101a:	f107 0320 	add.w	r3, r7, #32
 800101e:	4618      	mov	r0, r3
 8001020:	f003 ff37 	bl	8004e92 <osMutexCreate>
 8001024:	4603      	mov	r3, r0
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <MX_FREERTOS_Init+0x48>)
 8001028:	6013      	str	r3, [r2, #0]
  /* definition and creation of Task2 */
//  osThreadDef(Task2, Task2_init, 2, 0, 128);
//  Task2Handle = osThreadCreate(osThread(Task2), NULL);

  /* definition and creation of Task3 */
  osThreadDef(Task3, Task3_init, 1, 0, 128);
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_FREERTOS_Init+0x4c>)
 800102c:	1d3c      	adds	r4, r7, #4
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001038:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fec6 	bl	8004dd2 <osThreadCreate>
 8001046:	4603      	mov	r3, r0
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <MX_FREERTOS_Init+0x50>)
 800104a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	; 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bdb0      	pop	{r4, r5, r7, pc}
 8001054:	20000158 	.word	0x20000158
 8001058:	08007a90 	.word	0x08007a90
 800105c:	20000154 	.word	0x20000154

08001060 <Task3_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_init */
void Task3_init(void const * argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_init */
  /* Infinite loop */
  for(;;)
  {

	      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8001068:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <Task3_init+0x1c>)
 800106e:	f001 fd4a 	bl	8002b06 <HAL_GPIO_TogglePin>
	      osDelay(100); // Delay to ensure some runtime for DefaultTask
 8001072:	2064      	movs	r0, #100	; 0x64
 8001074:	f003 fef9 	bl	8004e6a <osDelay>
	      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8001078:	e7f6      	b.n	8001068 <Task3_init+0x8>
 800107a:	bf00      	nop
 800107c:	40021800 	.word	0x40021800

08001080 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Task3_init */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
//    UNUSED(huart);



    	HAL_UART_Receive_IT(&huart1, &RecVal, 1);
 8001088:	2201      	movs	r2, #1
 800108a:	4913      	ldr	r1, [pc, #76]	; (80010d8 <HAL_UART_RxCpltCallback+0x58>)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <HAL_UART_RxCpltCallback+0x5c>)
 800108e:	f002 ff05 	bl	8003e9c <HAL_UART_Receive_IT>
////    						  /* System reset (Jump to Bootloader) */
////    						  HAL_NVIC_SystemReset();
//    			    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
//    				 }

    			    if (RecVal == 0x66)
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_UART_RxCpltCallback+0x58>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b66      	cmp	r3, #102	; 0x66
 800109a:	d10b      	bne.n	80010b4 <HAL_UART_RxCpltCallback+0x34>
    			    { // Example command byte from ESP
    			   	            // get active bank here..

    			   	            uint8_t mode = get_Active_Bank_no();
 800109c:	f7ff fef6 	bl	8000e8c <get_Active_Bank_no>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	73fb      	strb	r3, [r7, #15]
    			   	            HAL_UART_Transmit(&huart1, &mode, 1, 10); // Send  active bank
 80010a6:	f107 010f 	add.w	r1, r7, #15
 80010aa:	230a      	movs	r3, #10
 80010ac:	2201      	movs	r2, #1
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <HAL_UART_RxCpltCallback+0x5c>)
 80010b0:	f002 fdd2 	bl	8003c58 <HAL_UART_Transmit>
    			   	 }

    			    if (RecVal == 0x8C)
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_UART_RxCpltCallback+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b8c      	cmp	r3, #140	; 0x8c
 80010bc:	d101      	bne.n	80010c2 <HAL_UART_RxCpltCallback+0x42>
    			     {
    			    	toggleBankAndReset();
 80010be:	f7ff fd23 	bl	8000b08 <toggleBankAndReset>
    			     }

    			    if (RecVal == 0x4C)
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_UART_RxCpltCallback+0x58>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b4c      	cmp	r3, #76	; 0x4c
 80010ca:	d101      	bne.n	80010d0 <HAL_UART_RxCpltCallback+0x50>
    			     {
    			    	/*  check validity marker  */
    			    	check_ValidityMarker();
 80010cc:	f7ff fef2 	bl	8000eb4 <check_ValidityMarker>
    			     }


}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	2000015d 	.word	0x2000015d
 80010dc:	20000400 	.word	0x20000400

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <MX_GPIO_Init+0x118>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a3e      	ldr	r2, [pc, #248]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a37      	ldr	r2, [pc, #220]	; (80011f8 <MX_GPIO_Init+0x118>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x118>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_GPIO_Init+0x118>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <MX_GPIO_Init+0x118>)
 800118c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_GPIO_Init+0x118>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	4816      	ldr	r0, [pc, #88]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011a4:	f001 fc96 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011ae:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_GPIO_Init+0x120>)
 80011b0:	f001 fc90 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b4:	2320      	movs	r3, #32
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_GPIO_Init+0x11c>)
 80011cc:	f001 fad6 	bl	800277c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_GPIO_Init+0x120>)
 80011ea:	f001 fac7 	bl	800277c <HAL_GPIO_Init>

}
 80011ee:	bf00      	nop
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40021800 	.word	0x40021800

08001204 <main>:

// Transmit "page 1" command


int main(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001208:	f000 fb64 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120c:	f000 f810 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001210:	f7ff ff66 	bl	80010e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001214:	f000 fa12 	bl	800163c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001218:	f000 f9e6 	bl	80015e8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800121c:	f7ff fe72 	bl	8000f04 <MX_CRC_Init>
  MX_USART3_UART_Init();
 8001220:	f000 fa36 	bl	8001690 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001224:	f7ff fef2 	bl	800100c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001228:	f003 fdcc 	bl	8004dc4 <osKernelStart>
//  HAL_UART_Transmit(&huart3, end_command, sizeof(end_command), HAL_MAX_DELAY);


 // toggleBankAndReset() ;

  while (1)
 800122c:	e7fe      	b.n	800122c <main+0x28>
	...

08001230 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	; 0x50
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 fed8 	bl	8006ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <SystemClock_Config+0xb8>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a22      	ldr	r2, [pc, #136]	; (80012e8 <SystemClock_Config+0xb8>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	; 0x40
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <SystemClock_Config+0xb8>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <SystemClock_Config+0xbc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <SystemClock_Config+0xbc>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <SystemClock_Config+0xbc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fc63 	bl	8002b70 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012b0:	f000 f830 	bl	8001314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fec6 	bl	8003060 <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80012da:	f000 f81b 	bl	8001314 <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	; 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a04      	ldr	r2, [pc, #16]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001302:	f000 fb09 	bl	8001918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40010000 	.word	0x40010000

08001314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001318:	b672      	cpsid	i
}
 800131a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800131c:	e7fe      	b.n	800131c <Error_Handler+0x8>
	...

08001320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_MspInit+0x94>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_MspInit+0x94>)
 8001330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HAL_MspInit+0x94>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_MspInit+0x94>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_MspInit+0x94>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_MspInit+0x94>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	210f      	movs	r1, #15
 8001362:	f06f 0001 	mvn.w	r0, #1
 8001366:	f000 fbea 	bl	8001b3e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2105      	movs	r1, #5
 800136e:	2001      	movs	r0, #1
 8001370:	f000 fbe5 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001374:	2001      	movs	r0, #1
 8001376:	f000 fbfe 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2105      	movs	r1, #5
 800137e:	2004      	movs	r0, #4
 8001380:	f000 fbdd 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001384:	2004      	movs	r0, #4
 8001386:	f000 fbf6 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2105      	movs	r1, #5
 800138e:	2005      	movs	r0, #5
 8001390:	f000 fbd5 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001394:	2005      	movs	r0, #5
 8001396:	f000 fbee 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2105      	movs	r1, #5
 800139e:	2051      	movs	r0, #81	; 0x51
 80013a0:	f000 fbcd 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80013a4:	2051      	movs	r0, #81	; 0x51
 80013a6:	f000 fbe6 	bl	8001b76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_InitTick+0xd0>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d0:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <HAL_InitTick+0xd0>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6453      	str	r3, [r2, #68]	; 0x44
 80013d8:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_InitTick+0xd0>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f002 f816 	bl	8003420 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013f4:	f002 f800 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 80013f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <HAL_InitTick+0xd4>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	0c9b      	lsrs	r3, r3, #18
 8001404:	3b01      	subs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001408:	4b21      	ldr	r3, [pc, #132]	; (8001490 <HAL_InitTick+0xd8>)
 800140a:	4a22      	ldr	r2, [pc, #136]	; (8001494 <HAL_InitTick+0xdc>)
 800140c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_InitTick+0xd8>)
 8001410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001414:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001416:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <HAL_InitTick+0xd8>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800141c:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_InitTick+0xd8>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_InitTick+0xd8>)
 8001424:	2200      	movs	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_InitTick+0xd8>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <HAL_InitTick+0xd8>)
 8001430:	f002 f920 	bl	8003674 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800143a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800143e:	2b00      	cmp	r3, #0
 8001440:	d11b      	bne.n	800147a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001442:	4813      	ldr	r0, [pc, #76]	; (8001490 <HAL_InitTick+0xd8>)
 8001444:	f002 f970 	bl	8003728 <HAL_TIM_Base_Start_IT>
 8001448:	4603      	mov	r3, r0
 800144a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800144e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001456:	2019      	movs	r0, #25
 8001458:	f000 fb8d 	bl	8001b76 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d808      	bhi.n	8001474 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001462:	2200      	movs	r2, #0
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	2019      	movs	r0, #25
 8001468:	f000 fb69 	bl	8001b3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_InitTick+0xe0>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e002      	b.n	800147a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800147a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800147e:	4618      	mov	r0, r3
 8001480:	3730      	adds	r7, #48	; 0x30
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	431bde83 	.word	0x431bde83
 8001490:	200003b4 	.word	0x200003b4
 8001494:	40010000 	.word	0x40010000
 8001498:	2000000c 	.word	0x2000000c

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 80014cc:	f001 fb36 	bl	8002b3c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80014d8:	f000 fc8c 	bl	8001df4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014f6:	f002 f987 	bl	8003808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200003b4 	.word	0x200003b4

08001504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART1_IRQHandler+0x10>)
 800150a:	f002 fced 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000400 	.word	0x20000400

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f002 fce3 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000448 	.word	0x20000448

0800152c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <USART3_IRQHandler+0x10>)
 8001532:	f002 fcd9 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000490 	.word	0x20000490

08001540 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f005 fd40 	bl	8007004 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20030000 	.word	0x20030000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	200003fc 	.word	0x200003fc
 80015b8:	200043a8 	.word	0x200043a8

080015bc <SystemInit>:
  * @param  None
  * @retval None
  */
#define USER_VECT_TAB_ADDRESS
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <SystemInit+0x28>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <SystemInit+0x28>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = 0x08000000;
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SystemInit+0x28>)
 80015d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015d6:	609a      	str	r2, [r3, #8]
		  /*VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_USART1_UART_Init+0x50>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 80015f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART1_UART_Init+0x4c>)
 8001620:	f002 faca 	bl	8003bb8 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162a:	f7ff fe73 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000400 	.word	0x20000400
 8001638:	40011000 	.word	0x40011000

0800163c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART2_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART2_UART_Init+0x4c>)
 8001674:	f002 faa0 	bl	8003bb8 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fe49 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000448 	.word	0x20000448
 800168c:	40004400 	.word	0x40004400

08001690 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART3_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 800169c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART3_UART_Init+0x4c>)
 80016c8:	f002 fa76 	bl	8003bb8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fe1f 	bl	8001314 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000490 	.word	0x20000490
 80016e0:	40004800 	.word	0x40004800

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08e      	sub	sp, #56	; 0x38
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_UART_MspInit+0x180>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d135      	bne.n	8001772 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
 800170a:	4b57      	ldr	r3, [pc, #348]	; (8001868 <HAL_UART_MspInit+0x184>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a56      	ldr	r2, [pc, #344]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_UART_MspInit+0x184>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800173e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001744:	2302      	movs	r3, #2
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174c:	2303      	movs	r3, #3
 800174e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001750:	2307      	movs	r3, #7
 8001752:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001758:	4619      	mov	r1, r3
 800175a:	4844      	ldr	r0, [pc, #272]	; (800186c <HAL_UART_MspInit+0x188>)
 800175c:	f001 f80e 	bl	800277c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2105      	movs	r1, #5
 8001764:	2025      	movs	r0, #37	; 0x25
 8001766:	f000 f9ea 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800176a:	2025      	movs	r0, #37	; 0x25
 800176c:	f000 fa03 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001770:	e073      	b.n	800185a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a3e      	ldr	r2, [pc, #248]	; (8001870 <HAL_UART_MspInit+0x18c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d134      	bne.n	80017e6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a38      	ldr	r2, [pc, #224]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
 800178c:	4b36      	ldr	r3, [pc, #216]	; (8001868 <HAL_UART_MspInit+0x184>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_UART_MspInit+0x184>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_UART_MspInit+0x184>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_UART_MspInit+0x184>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4829      	ldr	r0, [pc, #164]	; (8001874 <HAL_UART_MspInit+0x190>)
 80017d0:	f000 ffd4 	bl	800277c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2105      	movs	r1, #5
 80017d8:	2026      	movs	r0, #38	; 0x26
 80017da:	f000 f9b0 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017de:	2026      	movs	r0, #38	; 0x26
 80017e0:	f000 f9c9 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 80017e4:	e039      	b.n	800185a <HAL_UART_MspInit+0x176>
  else if(uartHandle->Instance==USART3)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_UART_MspInit+0x194>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d134      	bne.n	800185a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_UART_MspInit+0x184>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_UART_MspInit+0x184>)
 80017fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001808:	613b      	str	r3, [r7, #16]
 800180a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_UART_MspInit+0x184>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_UART_MspInit+0x184>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001828:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183a:	2307      	movs	r3, #7
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001842:	4619      	mov	r1, r3
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <HAL_UART_MspInit+0x198>)
 8001846:	f000 ff99 	bl	800277c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2027      	movs	r0, #39	; 0x27
 8001850:	f000 f975 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001854:	2027      	movs	r0, #39	; 0x27
 8001856:	f000 f98e 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 800185a:	bf00      	nop
 800185c:	3738      	adds	r7, #56	; 0x38
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40011000 	.word	0x40011000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40004400 	.word	0x40004400
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40004800 	.word	0x40004800
 800187c:	40020400 	.word	0x40020400

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001884:	f7ff fe9a 	bl	80015bc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480c      	ldr	r0, [pc, #48]	; (80018bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a0:	4c0a      	ldr	r4, [pc, #40]	; (80018cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f005 fbaf 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff fca7 	bl	8001204 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018c4:	08007b10 	.word	0x08007b10
  ldr r2, =_sbss
 80018c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018cc:	200043a4 	.word	0x200043a4

080018d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_Init+0x40>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_Init+0x40>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x40>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 f913 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f7ff fd58 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fd0a 	bl	8001320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000010 	.word	0x20000010
 800193c:	200004d8 	.word	0x200004d8

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200004d8 	.word	0x200004d8

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff ffee 	bl	8001940 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffde 	bl	8001940 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000010 	.word	0x20000010

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001b00:	f3bf 8f4f 	dsb	sy
}
 8001b04:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <__NVIC_SystemReset+0x24>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b0e:	4904      	ldr	r1, [pc, #16]	; (8001b20 <__NVIC_SystemReset+0x24>)
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_SystemReset+0x28>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <__NVIC_SystemReset+0x20>
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	05fa0004 	.word	0x05fa0004

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff35 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff4a 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff9a 	bl	8001a94 <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff69 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff3d 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001b96:	f7ff ffb1 	bl	8001afc <__NVIC_SystemReset>

08001b9a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e00e      	b.n	8001bca <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	795b      	ldrb	r3, [r3, #5]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff f9b5 	bl	8000f2c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b087      	sub	sp, #28
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2202      	movs	r2, #2
 8001be6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e00a      	b.n	8001c04 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	441a      	add	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3f0      	bcc.n	8001bee <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2201      	movs	r2, #1
 8001c18:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001c1a:	693b      	ldr	r3, [r7, #16]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c36:	f7ff fe83 	bl	8001940 <HAL_GetTick>
 8001c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d008      	beq.n	8001c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e052      	b.n	8001d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0216 	bic.w	r2, r2, #22
 8001c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	695a      	ldr	r2, [r3, #20]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d103      	bne.n	8001c8a <HAL_DMA_Abort+0x62>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d007      	beq.n	8001c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0208 	bic.w	r2, r2, #8
 8001c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001caa:	e013      	b.n	8001cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cac:	f7ff fe48 	bl	8001940 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d90c      	bls.n	8001cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e015      	b.n	8001d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e4      	bne.n	8001cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	223f      	movs	r2, #63	; 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d004      	beq.n	8001d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00c      	b.n	8001d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_FLASH_Program+0xa0>)
 8001d60:	7e1b      	ldrb	r3, [r3, #24]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_FLASH_Program+0x1e>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e03b      	b.n	8001de2 <HAL_FLASH_Program+0x96>
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_FLASH_Program+0xa0>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d74:	f000 f966 	bl	8002044 <FLASH_WaitForLastOperation>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d12b      	bne.n	8001dda <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d88:	783b      	ldrb	r3, [r7, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68b8      	ldr	r0, [r7, #8]
 8001d8e:	f000 fa11 	bl	80021b4 <FLASH_Program_Byte>
 8001d92:	e016      	b.n	8001dc2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d105      	bne.n	8001da6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d9a:	883b      	ldrh	r3, [r7, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	68b8      	ldr	r0, [r7, #8]
 8001da0:	f000 f9e4 	bl	800216c <FLASH_Program_HalfWord>
 8001da4:	e00d      	b.n	8001dc2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d105      	bne.n	8001db8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	68b8      	ldr	r0, [r7, #8]
 8001db2:	f000 f9b9 	bl	8002128 <FLASH_Program_Word>
 8001db6:	e004      	b.n	8001dc2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dbc:	68b8      	ldr	r0, [r7, #8]
 8001dbe:	f000 f981 	bl	80020c4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dc2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dc6:	f000 f93d 	bl	8002044 <FLASH_WaitForLastOperation>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_FLASH_Program+0xa4>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_FLASH_Program+0xa4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dda:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_FLASH_Program+0xa0>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200004dc 	.word	0x200004dc
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d020      	beq.n	8001e4c <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	e00b      	b.n	8001e3c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d103      	bne.n	8001e36 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001e2e:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	e002      	b.n	8001e3c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001e3c:	f000 f9dc 	bl	80021f8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f883 	bl	8001f4c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e4c:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d04a      	beq.n	8001eee <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e58:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d12d      	bne.n	8001ec4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e70:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8001e72:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f859 	bl	8001f38 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e8e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001e98:	7a1b      	ldrb	r3, [r3, #8]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fb1a 	bl	80024d8 <FLASH_Erase_Sector>
 8001ea4:	e023      	b.n	8001eee <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001eb8:	f000 fc1a 	bl	80026f0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f83b 	bl	8001f38 <HAL_FLASH_EndOfOperationCallback>
 8001ec2:	e014      	b.n	8001eee <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001ece:	f000 fc0f 	bl	80026f0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f82e 	bl	8001f38 <HAL_FLASH_EndOfOperationCallback>
 8001edc:	e004      	b.n	8001ee8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 f828 	bl	8001f38 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d116      	bne.n	8001f26 <HAL_FLASH_IRQHandler+0x132>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001efe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f06:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_FLASH_IRQHandler+0x13c>)
 8001f1a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <HAL_FLASH_IRQHandler+0x140>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	761a      	strb	r2, [r3, #24]
  }
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	200004dc 	.word	0x200004dc

08001f38 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da0b      	bge.n	8001f8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f74:	4a09      	ldr	r2, [pc, #36]	; (8001f9c <HAL_FLASH_Unlock+0x3c>)
 8001f76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_FLASH_Unlock+0x40>)
 8001f7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_FLASH_Unlock+0x38>)
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da01      	bge.n	8001f8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	45670123 	.word	0x45670123
 8001fa0:	cdef89ab 	.word	0xcdef89ab

08001fa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_FLASH_Lock+0x1c>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_FLASH_Lock+0x1c>)
 8001fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	40023c00 	.word	0x40023c00

08001fc4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fd6:	4a07      	ldr	r2, [pc, #28]	; (8001ff4 <HAL_FLASH_OB_Unlock+0x30>)
 8001fd8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_FLASH_OB_Unlock+0x2c>)
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_FLASH_OB_Unlock+0x34>)
 8001fde:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e000      	b.n	8001fe6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40023c00 	.word	0x40023c00
 8001ff4:	08192a3b 	.word	0x08192a3b
 8001ff8:	4c5d6e7f 	.word	0x4c5d6e7f

08001ffc <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_FLASH_OB_Lock+0x1c>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_FLASH_OB_Lock+0x1c>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40023c00 	.word	0x40023c00

0800201c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_FLASH_OB_Launch+0x24>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_FLASH_OB_Launch+0x24>)
 8002028:	f043 0302 	orr.w	r3, r3, #2
 800202c:	b2db      	uxtb	r3, r3
 800202e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8002030:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002034:	f000 f806 	bl	8002044 <FLASH_WaitForLastOperation>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c14 	.word	0x40023c14

08002044 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <FLASH_WaitForLastOperation+0x78>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002056:	f7ff fc73 	bl	8001940 <HAL_GetTick>
 800205a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800205c:	e010      	b.n	8002080 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d00c      	beq.n	8002080 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <FLASH_WaitForLastOperation+0x38>
 800206c:	f7ff fc68 	bl	8001940 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d201      	bcs.n	8002080 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e019      	b.n	80020b4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <FLASH_WaitForLastOperation+0x7c>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e8      	bne.n	800205e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <FLASH_WaitForLastOperation+0x7c>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <FLASH_WaitForLastOperation+0x7c>)
 800209a:	2201      	movs	r2, #1
 800209c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <FLASH_WaitForLastOperation+0x7c>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80020aa:	f000 f8a5 	bl	80021f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
  
}  
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	200004dc 	.word	0x200004dc
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020d0:	4b14      	ldr	r3, [pc, #80]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4a13      	ldr	r2, [pc, #76]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	4a10      	ldr	r2, [pc, #64]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <FLASH_Program_DoubleWord+0x60>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80020fa:	f3bf 8f6f 	isb	sy
}
 80020fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	000a      	movs	r2, r1
 800210e:	2300      	movs	r3, #0
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	3104      	adds	r1, #4
 8002114:	4613      	mov	r3, r2
 8002116:	600b      	str	r3, [r1, #0]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40023c00 	.word	0x40023c00

08002128 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <FLASH_Program_Word+0x40>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <FLASH_Program_Word+0x40>)
 8002138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <FLASH_Program_Word+0x40>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	4a09      	ldr	r2, [pc, #36]	; (8002168 <FLASH_Program_Word+0x40>)
 8002144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002148:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <FLASH_Program_Word+0x40>)
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <FLASH_Program_Word+0x40>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40023c00 	.word	0x40023c00

0800216c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 800217e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <FLASH_Program_HalfWord+0x44>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	801a      	strh	r2, [r3, #0]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023c00 	.word	0x40023c00

080021b4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <FLASH_Program_Byte+0x40>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	701a      	strb	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023c00 	.word	0x40023c00

080021f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021fc:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002212:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002216:	2210      	movs	r2, #16
 8002218:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002230:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002234:	2220      	movs	r2, #32
 8002236:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f043 0304 	orr.w	r3, r3, #4
 800224c:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 800224e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002256:	4b19      	ldr	r3, [pc, #100]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002262:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 800226c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002270:	2280      	movs	r2, #128	; 0x80
 8002272:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002280:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 800228a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 800228e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002292:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f043 0320 	orr.w	r3, r3, #32
 80022a8:	4a05      	ldr	r2, [pc, #20]	; (80022c0 <FLASH_SetErrorCode+0xc8>)
 80022aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <FLASH_SetErrorCode+0xc4>)
 80022ae:	2202      	movs	r2, #2
 80022b0:	60da      	str	r2, [r3, #12]
  }
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023c00 	.word	0x40023c00
 80022c0:	200004dc 	.word	0x200004dc

080022c4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_FLASHEx_Erase+0xdc>)
 80022d8:	7e1b      	ldrb	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_FLASHEx_Erase+0x1e>
 80022de:	2302      	movs	r3, #2
 80022e0:	e05a      	b.n	8002398 <HAL_FLASHEx_Erase+0xd4>
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_FLASHEx_Erase+0xdc>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022ec:	f7ff feaa 	bl	8002044 <FLASH_WaitForLastOperation>
 80022f0:	4603      	mov	r3, r0
 80022f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d14a      	bne.n	8002390 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d117      	bne.n	800233a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	b2da      	uxtb	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f000 f8a4 	bl	8002464 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800231c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002320:	f7ff fe90 	bl	8002044 <FLASH_WaitForLastOperation>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002328:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <HAL_FLASHEx_Erase+0xe0>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <HAL_FLASHEx_Erase+0xe0>)
 800232e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6113      	str	r3, [r2, #16]
 8002338:	e028      	b.n	800238c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	60bb      	str	r3, [r7, #8]
 8002340:	e01c      	b.n	800237c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	4619      	mov	r1, r3
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f000 f8c4 	bl	80024d8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002350:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002354:	f7ff fe76 	bl	8002044 <FLASH_WaitForLastOperation>
 8002358:	4603      	mov	r3, r0
 800235a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_FLASHEx_Erase+0xe0>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <HAL_FLASHEx_Erase+0xe0>)
 8002362:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002366:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	601a      	str	r2, [r3, #0]
          break;
 8002374:	e00a      	b.n	800238c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3301      	adds	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4413      	add	r3, r2
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d3da      	bcc.n	8002342 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800238c:	f000 f9b0 	bl	80026f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_FLASHEx_Erase+0xdc>)
 8002392:	2200      	movs	r2, #0
 8002394:	761a      	strb	r2, [r3, #24]

  return status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200004dc 	.word	0x200004dc
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <HAL_FLASHEx_AdvOBProgram+0x56>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d10d      	bne.n	80023e4 <HAL_FLASHEx_AdvOBProgram+0x3c>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_EnablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	899b      	ldrh	r3, [r3, #12]
 80023cc:	4618      	mov	r0, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	89db      	ldrh	r3, [r3, #14]
 80023d2:	4619      	mov	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	461a      	mov	r2, r3
 80023da:	f000 f8f3 	bl	80025c4 <FLASH_OB_EnablePCROP>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	e00c      	b.n	80023fe <HAL_FLASHEx_AdvOBProgram+0x56>
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
#else /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
      status = FLASH_OB_DisablePCROP(pAdvOBInit->SectorsBank1, pAdvOBInit->SectorsBank2, pAdvOBInit->Banks);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	899b      	ldrh	r3, [r3, #12]
 80023e8:	4618      	mov	r0, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	89db      	ldrh	r3, [r3, #14]
 80023ee:	4619      	mov	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f000 f92d 	bl	8002654 <FLASH_OB_DisablePCROP>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  /*Program BOOT config option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_BOOTCONFIG) == OPTIONBYTE_BOOTCONFIG)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <HAL_FLASHEx_AdvOBProgram+0x70>
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7c1b      	ldrb	r3, [r3, #16]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f8b0 	bl	8002574 <FLASH_OB_BootConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
#else  /* STM32F427xx || STM32F437xx || STM32F429xx|| STM32F439xx || STM32F469xx || STM32F479xx */
  /*Get Sector for Bank1*/
  pAdvOBInit->SectorsBank1 = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_FLASHEx_AdvOBGetConfig+0x34>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	819a      	strh	r2, [r3, #12]

  /*Get Sector for Bank2*/
  pAdvOBInit->SectorsBank2 = (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_FLASHEx_AdvOBGetConfig+0x38>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29a      	uxth	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	81da      	strh	r2, [r3, #14]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
 8002440:	4b07      	ldr	r3, [pc, #28]	; (8002460 <HAL_FLASHEx_AdvOBGetConfig+0x3c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	741a      	strb	r2, [r3, #16]
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023c16 	.word	0x40023c16
 800245c:	40023c1a 	.word	0x40023c1a
 8002460:	40023c14 	.word	0x40023c14

08002464 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <FLASH_MassErase+0x70>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <FLASH_MassErase+0x70>)
 8002476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d108      	bne.n	8002494 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <FLASH_MassErase+0x70>)
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <FLASH_MassErase+0x70>)
 8002488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800248c:	f043 0304 	orr.w	r3, r3, #4
 8002490:	6113      	str	r3, [r2, #16]
 8002492:	e00f      	b.n	80024b4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d106      	bne.n	80024a8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800249a:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <FLASH_MassErase+0x70>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <FLASH_MassErase+0x70>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6113      	str	r3, [r2, #16]
 80024a6:	e005      	b.n	80024b4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <FLASH_MassErase+0x70>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <FLASH_MassErase+0x70>)
 80024ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <FLASH_MassErase+0x70>)
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	4313      	orrs	r3, r2
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <FLASH_MassErase+0x70>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6113      	str	r3, [r2, #16]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023c00 	.word	0x40023c00

080024d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e010      	b.n	8002516 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d103      	bne.n	8002502 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80024fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	e009      	b.n	8002516 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d103      	bne.n	8002510 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e002      	b.n	8002516 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002510:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002514:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b0b      	cmp	r3, #11
 800251a:	d902      	bls.n	8002522 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4a12      	ldr	r2, [pc, #72]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	490f      	ldr	r1, [pc, #60]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800253a:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <FLASH_Erase_Sector+0x98>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002540:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002544:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002548:	691a      	ldr	r2, [r3, #16]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4313      	orrs	r3, r2
 8002550:	4a07      	ldr	r2, [pc, #28]	; (8002570 <FLASH_Erase_Sector+0x98>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <FLASH_Erase_Sector+0x98>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <FLASH_Erase_Sector+0x98>)
 800255e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002562:	6113      	str	r3, [r2, #16]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40023c00 	.word	0x40023c00

08002574 <FLASH_OB_BootConfig>:
  *            @arg OB_Dual_BootEnabled: Dual Bank Boot Enable
  *            @arg OB_Dual_BootDisabled: Dual Bank Boot Disabled
  * @retval None
  */
static HAL_StatusTypeDef FLASH_OB_BootConfig(uint8_t BootConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_BOOT(BootConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002582:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002586:	f7ff fd5d 	bl	8002044 <FLASH_WaitForLastOperation>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10f      	bne.n	80025b4 <FLASH_OB_BootConfig+0x40>
  {
    /* Set Dual Bank Boot */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <FLASH_OB_BootConfig+0x4c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <FLASH_OB_BootConfig+0x4c>)
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	7013      	strb	r3, [r2, #0]
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= BootConfig;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <FLASH_OB_BootConfig+0x4c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4905      	ldr	r1, [pc, #20]	; (80025c0 <FLASH_OB_BootConfig+0x4c>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	700b      	strb	r3, [r1, #0]
  }

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c14 	.word	0x40023c14

080025c4 <FLASH_OB_EnablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025d8:	f7ff fd34 	bl	8002044 <FLASH_WaitForLastOperation>
 80025dc:	4603      	mov	r3, r0
 80025de:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d12d      	bne.n	8002642 <FLASH_OB_EnablePCROP+0x7e>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d002      	beq.n	80025f2 <FLASH_OB_EnablePCROP+0x2e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d109      	bne.n	8002606 <FLASH_OB_EnablePCROP+0x42>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)SectorBank1;
 80025f2:	4b16      	ldr	r3, [pc, #88]	; (800264c <FLASH_OB_EnablePCROP+0x88>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	4913      	ldr	r1, [pc, #76]	; (800264c <FLASH_OB_EnablePCROP+0x88>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	b29b      	uxth	r3, r3
 8002602:	800b      	strh	r3, [r1, #0]
 8002604:	e008      	b.n	8002618 <FLASH_OB_EnablePCROP+0x54>
    }
    else
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /*Write protection done on sectors of BANK2*/
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <FLASH_OB_EnablePCROP+0x8c>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b29a      	uxth	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	b29b      	uxth	r3, r3
 8002610:	490f      	ldr	r1, [pc, #60]	; (8002650 <FLASH_OB_EnablePCROP+0x8c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	b29b      	uxth	r3, r3
 8002616:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b03      	cmp	r3, #3
 800261c:	d111      	bne.n	8002642 <FLASH_OB_EnablePCROP+0x7e>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800261e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002622:	f7ff fd0f 	bl	8002044 <FLASH_WaitForLastOperation>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d108      	bne.n	8002642 <FLASH_OB_EnablePCROP+0x7e>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS |= (uint16_t)SectorBank2;
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <FLASH_OB_EnablePCROP+0x8c>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29a      	uxth	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	b29b      	uxth	r3, r3
 800263a:	4905      	ldr	r1, [pc, #20]	; (8002650 <FLASH_OB_EnablePCROP+0x8c>)
 800263c:	4313      	orrs	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023c16 	.word	0x40023c16
 8002650:	40023c1a 	.word	0x40023c1a

08002654 <FLASH_OB_DisablePCROP>:
  *            @arg FLASH_BANK_BOTH: WRP on all sectors of bank1 & bank2
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t SectorBank1, uint32_t SectorBank2, uint32_t Banks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002664:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002668:	f7ff fcec 	bl	8002044 <FLASH_WaitForLastOperation>
 800266c:	4603      	mov	r3, r0
 800266e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d133      	bne.n	80026de <FLASH_OB_DisablePCROP+0x8a>
  {
    if ((Banks == FLASH_BANK_1) || (Banks == FLASH_BANK_BOTH))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d002      	beq.n	8002682 <FLASH_OB_DisablePCROP+0x2e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d10b      	bne.n	800269a <FLASH_OB_DisablePCROP+0x46>
    {
      assert_param(IS_OB_PCROP(SectorBank1));
      /*Write protection done on sectors of BANK1*/
      *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~SectorBank1);
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <FLASH_OB_DisablePCROP+0x94>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	b29b      	uxth	r3, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	b29b      	uxth	r3, r3
 8002690:	4915      	ldr	r1, [pc, #84]	; (80026e8 <FLASH_OB_DisablePCROP+0x94>)
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	800b      	strh	r3, [r1, #0]
 8002698:	e00a      	b.n	80026b0 <FLASH_OB_DisablePCROP+0x5c>
    }
    else
    {
      /*Write protection done on sectors of BANK2*/
      assert_param(IS_OB_PCROP(SectorBank2));
      *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <FLASH_OB_DisablePCROP+0x98>)
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4910      	ldr	r1, [pc, #64]	; (80026ec <FLASH_OB_DisablePCROP+0x98>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	800b      	strh	r3, [r1, #0]
    }

    /*Write protection on all sector  of BANK2*/
    if (Banks == FLASH_BANK_BOTH)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d113      	bne.n	80026de <FLASH_OB_DisablePCROP+0x8a>
    {
      assert_param(IS_OB_PCROP(SectorBank2));
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026b6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026ba:	f7ff fcc3 	bl	8002044 <FLASH_WaitForLastOperation>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10a      	bne.n	80026de <FLASH_OB_DisablePCROP+0x8a>
      {
        /*Write protection done on sectors of BANK2*/
        *(__IO uint16_t *)OPTCR1_BYTE2_ADDRESS &= (~SectorBank2);
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <FLASH_OB_DisablePCROP+0x98>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4905      	ldr	r1, [pc, #20]	; (80026ec <FLASH_OB_DisablePCROP+0x98>)
 80026d8:	4013      	ands	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	800b      	strh	r3, [r1, #0]
      }
    }

  }

  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]

}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023c16 	.word	0x40023c16
 80026ec:	40023c1a 	.word	0x40023c1a

080026f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <FLASH_FlushCaches+0x88>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d017      	beq.n	8002730 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002706:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <FLASH_FlushCaches+0x88>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <FLASH_FlushCaches+0x88>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a16      	ldr	r2, [pc, #88]	; (8002778 <FLASH_FlushCaches+0x88>)
 800271e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002722:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b14      	ldr	r3, [pc, #80]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <FLASH_FlushCaches+0x88>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002730:	4b11      	ldr	r3, [pc, #68]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <FLASH_FlushCaches+0x88>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002742:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <FLASH_FlushCaches+0x88>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <FLASH_FlushCaches+0x88>)
 800274e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a07      	ldr	r2, [pc, #28]	; (8002778 <FLASH_FlushCaches+0x88>)
 800275a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800275e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a04      	ldr	r2, [pc, #16]	; (8002778 <FLASH_FlushCaches+0x88>)
 8002766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800276a:	6013      	str	r3, [r2, #0]
  }
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00

0800277c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e177      	b.n	8002a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	f040 8166 	bne.w	8002a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d005      	beq.n	80027ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d130      	bne.n	8002830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002804:	2201      	movs	r2, #1
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 0201 	and.w	r2, r3, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b03      	cmp	r3, #3
 800283a:	d017      	beq.n	800286c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d123      	bne.n	80028c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3208      	adds	r2, #8
 8002880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	08da      	lsrs	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3208      	adds	r2, #8
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 0203 	and.w	r2, r3, #3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80c0 	beq.w	8002a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b66      	ldr	r3, [pc, #408]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 800290c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_GPIO_Init+0x324>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800291e:	4a61      	ldr	r2, [pc, #388]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	3302      	adds	r3, #2
 8002926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	220f      	movs	r2, #15
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_GPIO_Init+0x32c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d037      	beq.n	80029ba <HAL_GPIO_Init+0x23e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x330>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d031      	beq.n	80029b6 <HAL_GPIO_Init+0x23a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x334>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d02b      	beq.n	80029b2 <HAL_GPIO_Init+0x236>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a55      	ldr	r2, [pc, #340]	; (8002ab4 <HAL_GPIO_Init+0x338>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d025      	beq.n	80029ae <HAL_GPIO_Init+0x232>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x33c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d01f      	beq.n	80029aa <HAL_GPIO_Init+0x22e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a53      	ldr	r2, [pc, #332]	; (8002abc <HAL_GPIO_Init+0x340>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x22a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a52      	ldr	r2, [pc, #328]	; (8002ac0 <HAL_GPIO_Init+0x344>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x226>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_GPIO_Init+0x348>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x222>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_GPIO_Init+0x34c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x21e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4f      	ldr	r2, [pc, #316]	; (8002acc <HAL_GPIO_Init+0x350>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x21a>
 8002992:	2309      	movs	r3, #9
 8002994:	e012      	b.n	80029bc <HAL_GPIO_Init+0x240>
 8002996:	230a      	movs	r3, #10
 8002998:	e010      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299a:	2308      	movs	r3, #8
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x240>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x240>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	; (8002aa4 <HAL_GPIO_Init+0x328>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <HAL_GPIO_Init+0x354>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae84 	bls.w	8002798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022400 	.word	0x40022400
 8002ad0:	40013c00 	.word	0x40013c00

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af0:	e003      	b.n	8002afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af2:	887b      	ldrh	r3, [r7, #2]
 8002af4:	041a      	lsls	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	619a      	str	r2, [r3, #24]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b18:	887a      	ldrh	r2, [r7, #2]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	041a      	lsls	r2, r3, #16
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	400b      	ands	r3, r1
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_PWR_PVD_IRQHandler+0x20>)
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002b4c:	f000 f808 	bl	8002b60 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <HAL_PWR_PVD_IRQHandler+0x20>)
 8002b52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b56:	615a      	str	r2, [r3, #20]
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e267      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d075      	beq.n	8002c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8e:	4b88      	ldr	r3, [pc, #544]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d00c      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9a:	4b85      	ldr	r3, [pc, #532]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d112      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba6:	4b82      	ldr	r3, [pc, #520]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d05b      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d157      	bne.n	8002c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e242      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x74>
 8002bd6:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	e01d      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x98>
 8002bee:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a6f      	ldr	r2, [pc, #444]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a6c      	ldr	r2, [pc, #432]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCC_OscConfig+0xb0>
 8002c08:	4b69      	ldr	r3, [pc, #420]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	4b66      	ldr	r3, [pc, #408]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a65      	ldr	r2, [pc, #404]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d013      	beq.n	8002c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe fe8a 	bl	8001940 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe fe86 	bl	8001940 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e207      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0xc0>
 8002c4e:	e014      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7fe fe76 	bl	8001940 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c58:	f7fe fe72 	bl	8001940 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	; 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e1f3      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0xe8>
 8002c76:	e000      	b.n	8002c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	4b4a      	ldr	r3, [pc, #296]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b44      	ldr	r3, [pc, #272]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1c7      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e03a      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x244>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fe2b 	bl	8001940 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fe fe27 	bl	8001940 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1a8      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4925      	ldr	r1, [pc, #148]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_OscConfig+0x244>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe fe0a 	bl	8001940 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d30:	f7fe fe06 	bl	8001940 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e187      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d036      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_RCC_OscConfig+0x248>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe fdea 	bl	8001940 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fe fde6 	bl	8001940 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e167      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x200>
 8002d8e:	e01b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_RCC_OscConfig+0x248>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fdd3 	bl	8001940 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	e00e      	b.n	8002dbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7fe fdcf 	bl	8001940 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d907      	bls.n	8002dbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e150      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	42470000 	.word	0x42470000
 8002db8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ea      	bne.n	8002d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8097 	beq.w	8002f04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b7d      	ldr	r3, [pc, #500]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a7c      	ldr	r2, [pc, #496]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b7a      	ldr	r3, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b77      	ldr	r3, [pc, #476]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b74      	ldr	r3, [pc, #464]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a73      	ldr	r2, [pc, #460]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7fe fd8f 	bl	8001940 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe fd8b 	bl	8001940 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e10c      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_OscConfig+0x474>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x2ea>
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e50:	4a63      	ldr	r2, [pc, #396]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	; 0x70
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x324>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x30c>
 8002e62:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0x324>
 8002e7c:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	; 0x70
 8002e88:	4b55      	ldr	r3, [pc, #340]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a54      	ldr	r2, [pc, #336]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fd50 	bl	8001940 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fd4c 	bl	8001940 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0cb      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b49      	ldr	r3, [pc, #292]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x334>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fd3a 	bl	8001940 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fe fd36 	bl	8001940 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0b5      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	4b3e      	ldr	r3, [pc, #248]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b39      	ldr	r3, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a1 	beq.w	8003050 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d05c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d141      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fd0a 	bl	8001940 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe fd06 	bl	8001940 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e087      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b27      	ldr	r3, [pc, #156]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7e:	f7fe fcdf 	bl	8001940 <HAL_GetTick>
 8002f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f84:	e008      	b.n	8002f98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f86:	f7fe fcdb 	bl	8001940 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e05c      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f0      	beq.n	8002f86 <HAL_RCC_OscConfig+0x416>
 8002fa4:	e054      	b.n	8003050 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x478>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fcc8 	bl	8001940 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe fcc4 	bl	8001940 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e045      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_RCC_OscConfig+0x470>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x444>
 8002fd2:	e03d      	b.n	8003050 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e038      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <HAL_RCC_OscConfig+0x4ec>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d028      	beq.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d121      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d11a      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003024:	4293      	cmp	r3, r2
 8003026:	d111      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	3b01      	subs	r3, #1
 8003036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d107      	bne.n	800304c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0cc      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003074:	4b68      	ldr	r3, [pc, #416]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d90c      	bls.n	800309c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b63      	ldr	r3, [pc, #396]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0b8      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b4:	4b59      	ldr	r3, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a58      	ldr	r2, [pc, #352]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030cc:	4b53      	ldr	r3, [pc, #332]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a52      	ldr	r2, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d8:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	494d      	ldr	r1, [pc, #308]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d044      	beq.n	8003180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d119      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e07f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d003      	beq.n	800311e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	2b03      	cmp	r3, #3
 800311c:	d107      	bne.n	800312e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e06f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	4b3b      	ldr	r3, [pc, #236]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e067      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4934      	ldr	r1, [pc, #208]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	4313      	orrs	r3, r2
 800314e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003150:	f7fe fbf6 	bl	8001940 <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003156:	e00a      	b.n	800316e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003158:	f7fe fbf2 	bl	8001940 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e04f      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2b      	ldr	r3, [pc, #172]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 020c 	and.w	r2, r3, #12
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	429a      	cmp	r2, r3
 800317e:	d1eb      	bne.n	8003158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d20c      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_RCC_ClockConfig+0x1b8>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e032      	b.n	800320e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4916      	ldr	r1, [pc, #88]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	490e      	ldr	r1, [pc, #56]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e6:	f000 f821 	bl	800322c <HAL_RCC_GetSysClockFreq>
 80031ea:	4602      	mov	r2, r0
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	5ccb      	ldrb	r3, [r1, r3]
 80031fa:	fa22 f303 	lsr.w	r3, r2, r3
 80031fe:	4a09      	ldr	r2, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_ClockConfig+0x1c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe f8d6 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00
 800321c:	40023800 	.word	0x40023800
 8003220:	08007ab4 	.word	0x08007ab4
 8003224:	20000008 	.word	0x20000008
 8003228:	2000000c 	.word	0x2000000c

0800322c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b090      	sub	sp, #64	; 0x40
 8003232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
 8003238:	2300      	movs	r3, #0
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4b59      	ldr	r3, [pc, #356]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b08      	cmp	r3, #8
 800324e:	d00d      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x40>
 8003250:	2b08      	cmp	r3, #8
 8003252:	f200 80a1 	bhi.w	8003398 <HAL_RCC_GetSysClockFreq+0x16c>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_RCC_GetSysClockFreq+0x34>
 800325a:	2b04      	cmp	r3, #4
 800325c:	d003      	beq.n	8003266 <HAL_RCC_GetSysClockFreq+0x3a>
 800325e:	e09b      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003262:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003264:	e09b      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003266:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800326a:	e098      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003282:	4b4a      	ldr	r3, [pc, #296]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	2200      	movs	r2, #0
 800328a:	623b      	str	r3, [r7, #32]
 800328c:	627a      	str	r2, [r7, #36]	; 0x24
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003294:	2100      	movs	r1, #0
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003298:	fb03 f201 	mul.w	r2, r3, r1
 800329c:	2300      	movs	r3, #0
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	4a43      	ldr	r2, [pc, #268]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a6:	fba0 1202 	umull	r1, r2, r0, r2
 80032aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ac:	460a      	mov	r2, r1
 80032ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80032b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b2:	4413      	add	r3, r2
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	2200      	movs	r2, #0
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	61fa      	str	r2, [r7, #28]
 80032be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032c6:	f7fc ffe3 	bl	8000290 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4613      	mov	r3, r2
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d2:	e053      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	2200      	movs	r2, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	617a      	str	r2, [r7, #20]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032e6:	f04f 0b00 	mov.w	fp, #0
 80032ea:	4652      	mov	r2, sl
 80032ec:	465b      	mov	r3, fp
 80032ee:	f04f 0000 	mov.w	r0, #0
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	0159      	lsls	r1, r3, #5
 80032f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fc:	0150      	lsls	r0, r2, #5
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ebb2 080a 	subs.w	r8, r2, sl
 8003306:	eb63 090b 	sbc.w	r9, r3, fp
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003316:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800331a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800331e:	ebb2 0408 	subs.w	r4, r2, r8
 8003322:	eb63 0509 	sbc.w	r5, r3, r9
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	00eb      	lsls	r3, r5, #3
 8003330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003334:	00e2      	lsls	r2, r4, #3
 8003336:	4614      	mov	r4, r2
 8003338:	461d      	mov	r5, r3
 800333a:	eb14 030a 	adds.w	r3, r4, sl
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	eb45 030b 	adc.w	r3, r5, fp
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003352:	4629      	mov	r1, r5
 8003354:	028b      	lsls	r3, r1, #10
 8003356:	4621      	mov	r1, r4
 8003358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800335c:	4621      	mov	r1, r4
 800335e:	028a      	lsls	r2, r1, #10
 8003360:	4610      	mov	r0, r2
 8003362:	4619      	mov	r1, r3
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	2200      	movs	r2, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	60fa      	str	r2, [r7, #12]
 800336c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003370:	f7fc ff8e 	bl	8000290 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_GetSysClockFreq+0x180>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	0c1b      	lsrs	r3, r3, #16
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	3301      	adds	r3, #1
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003396:	e002      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800339c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3740      	adds	r7, #64	; 0x40
 80033a4:	46bd      	mov	sp, r7
 80033a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	017d7840 	.word	0x017d7840

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000008 	.word	0x20000008

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a9b      	lsrs	r3, r3, #10
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4903      	ldr	r1, [pc, #12]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40023800 	.word	0x40023800
 80033f4:	08007ac4 	.word	0x08007ac4

080033f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033fc:	f7ff ffdc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003400:	4602      	mov	r2, r0
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	0b5b      	lsrs	r3, r3, #13
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	4903      	ldr	r1, [pc, #12]	; (800341c <HAL_RCC_GetPCLK2Freq+0x24>)
 800340e:	5ccb      	ldrb	r3, [r1, r3]
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	08007ac4 	.word	0x08007ac4

08003420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	220f      	movs	r2, #15
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003430:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 0203 	and.w	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_GetClockConfig+0x5c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <HAL_RCC_GetClockConfig+0x60>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	40023c00 	.word	0x40023c00

08003484 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800348a:	f7fe fa59 	bl	8001940 <HAL_GetTick>
 800348e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003490:	4b72      	ldr	r3, [pc, #456]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a71      	ldr	r2, [pc, #452]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fe fa4f 	bl	8001940 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0d0      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80034b0:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80034bc:	4b67      	ldr	r3, [pc, #412]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a66      	ldr	r2, [pc, #408]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80034c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034c8:	f7fe fa3a 	bl	8001940 <HAL_GetTick>
 80034cc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80034d4:	e00a      	b.n	80034ec <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d6:	f7fe fa33 	bl	8001940 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0b2      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80034ec:	4b5b      	ldr	r3, [pc, #364]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1ee      	bne.n	80034d6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80034f8:	f7fe fa22 	bl	8001940 <HAL_GetTick>
 80034fc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80034fe:	4b57      	ldr	r3, [pc, #348]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a56      	ldr	r2, [pc, #344]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003504:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003508:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fe fa18 	bl	8001940 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e099      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800352a:	f7fe fa09 	bl	8001940 <HAL_GetTick>
 800352e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003530:	4b4a      	ldr	r3, [pc, #296]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a49      	ldr	r2, [pc, #292]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800353a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800353c:	e008      	b.n	8003550 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353e:	f7fe f9ff 	bl	8001940 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e080      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003550:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1f0      	bne.n	800353e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800355c:	f7fe f9f0 	bl	8001940 <HAL_GetTick>
 8003560:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a3d      	ldr	r2, [pc, #244]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003568:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800356c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003570:	f7fe f9e6 	bl	8001940 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e067      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800358e:	f7fe f9d7 	bl	8001940 <HAL_GetTick>
 8003592:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 800359a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359e:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035a2:	f7fe f9cd 	bl	8001940 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e04e      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <HAL_RCC_DeInit+0x1dc>)
 80035c4:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_RCC_DeInit+0x1e0>)
 80035ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 80035ce:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035d0:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_RCC_DeInit+0x1e0>)
 80035d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80035e0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003600:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003604:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 800360c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003610:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800361c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003622:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_RCC_DeInit+0x1d8>)
 8003630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003634:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_DeInit+0x1e4>)
 8003638:	4a0c      	ldr	r2, [pc, #48]	; (800366c <HAL_RCC_DeInit+0x1e8>)
 800363a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCC_DeInit+0x1ec>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fd feb9 	bl	80013b8 <HAL_InitTick>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8003650:	2300      	movs	r3, #0
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	04003010 	.word	0x04003010
 8003664:	24003000 	.word	0x24003000
 8003668:	20000008 	.word	0x20000008
 800366c:	00f42400 	.word	0x00f42400
 8003670:	2000000c 	.word	0x2000000c

08003674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e041      	b.n	800370a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f839 	bl	8003712 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f000 f9c0 	bl	8003a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04e      	b.n	80037de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a23      	ldr	r2, [pc, #140]	; (80037ec <HAL_TIM_Base_Start_IT+0xc4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376a:	d01d      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1f      	ldr	r2, [pc, #124]	; (80037f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a1e      	ldr	r2, [pc, #120]	; (80037f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a1b      	ldr	r2, [pc, #108]	; (80037fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_TIM_Base_Start_IT+0xd8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <HAL_TIM_Base_Start_IT+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d111      	bne.n	80037cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b06      	cmp	r3, #6
 80037b8:	d010      	beq.n	80037dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f042 0201 	orr.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ca:	e007      	b.n	80037dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40010400 	.word	0x40010400
 8003800:	40014000 	.word	0x40014000
 8003804:	40001800 	.word	0x40001800

08003808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d020      	beq.n	800386c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d01b      	beq.n	800386c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0202 	mvn.w	r2, #2
 800383c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f8d2 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8c4 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f8d5 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d020      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01b      	beq.n	80038b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0204 	mvn.w	r2, #4
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8ac 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f89e 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f8af 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d020      	beq.n	8003904 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d01b      	beq.n	8003904 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0208 	mvn.w	r2, #8
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f886 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f878 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f889 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d020      	beq.n	8003950 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01b      	beq.n	8003950 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f06f 0210 	mvn.w	r2, #16
 8003920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2208      	movs	r2, #8
 8003926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f860 	bl	80039fc <HAL_TIM_IC_CaptureCallback>
 800393c:	e005      	b.n	800394a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f852 	bl	80039e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f863 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00c      	beq.n	8003974 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d007      	beq.n	8003974 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0201 	mvn.w	r2, #1
 800396c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fcbe 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00c      	beq.n	8003998 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f906 	bl	8003ba4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f834 	bl	8003a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00c      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0220 	mvn.w	r2, #32
 80039d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f8d8 	bl	8003b90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <TIM_Base_SetConfig+0x12c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d00f      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a43      	ldr	r2, [pc, #268]	; (8003b68 <TIM_Base_SetConfig+0x130>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a42      	ldr	r2, [pc, #264]	; (8003b6c <TIM_Base_SetConfig+0x134>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d007      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a41      	ldr	r2, [pc, #260]	; (8003b70 <TIM_Base_SetConfig+0x138>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0x40>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <TIM_Base_SetConfig+0x13c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d108      	bne.n	8003a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a35      	ldr	r2, [pc, #212]	; (8003b64 <TIM_Base_SetConfig+0x12c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d02b      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d027      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <TIM_Base_SetConfig+0x130>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d023      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a31      	ldr	r2, [pc, #196]	; (8003b6c <TIM_Base_SetConfig+0x134>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a30      	ldr	r2, [pc, #192]	; (8003b70 <TIM_Base_SetConfig+0x138>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01b      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2f      	ldr	r2, [pc, #188]	; (8003b74 <TIM_Base_SetConfig+0x13c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d017      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2e      	ldr	r2, [pc, #184]	; (8003b78 <TIM_Base_SetConfig+0x140>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2d      	ldr	r2, [pc, #180]	; (8003b7c <TIM_Base_SetConfig+0x144>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00f      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_Base_SetConfig+0x148>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_Base_SetConfig+0x14c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_Base_SetConfig+0x150>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_Base_SetConfig+0x154>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d108      	bne.n	8003afc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a10      	ldr	r2, [pc, #64]	; (8003b64 <TIM_Base_SetConfig+0x12c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_Base_SetConfig+0xf8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <TIM_Base_SetConfig+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d103      	bne.n	8003b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f023 0201 	bic.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]
  }
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40010400 	.word	0x40010400
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800
 8003b84:	40001800 	.word	0x40001800
 8003b88:	40001c00 	.word	0x40001c00
 8003b8c:	40002000 	.word	0x40002000

08003b90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e042      	b.n	8003c50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fd80 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2224      	movs	r2, #36	; 0x24
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fe55 	bl	80048ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d175      	bne.n	8003d64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <HAL_UART_Transmit+0x2c>
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e06e      	b.n	8003d66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2221      	movs	r2, #33	; 0x21
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c96:	f7fd fe53 	bl	8001940 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d108      	bne.n	8003cc4 <HAL_UART_Transmit+0x6c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e003      	b.n	8003ccc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ccc:	e02e      	b.n	8003d2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fbb7 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e03a      	b.n	8003d66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e007      	b.n	8003d1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1cb      	bne.n	8003cce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fb83 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e006      	b.n	8003d66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08a      	sub	sp, #40	; 0x28
 8003d72:	af02      	add	r7, sp, #8
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	f040 8081 	bne.w	8003e92 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <HAL_UART_Receive+0x2e>
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e079      	b.n	8003e94 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2222      	movs	r2, #34	; 0x22
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db4:	f7fd fdc4 	bl	8001940 <HAL_GetTick>
 8003db8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	88fa      	ldrh	r2, [r7, #6]
 8003dbe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d108      	bne.n	8003de2 <HAL_UART_Receive+0x74>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d104      	bne.n	8003de2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
 8003de0:	e003      	b.n	8003dea <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003dea:	e047      	b.n	8003e7c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2120      	movs	r1, #32
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb28 	bl	800444c <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e042      	b.n	8003e94 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10c      	bne.n	8003e2e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e01f      	b.n	8003e6e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e36:	d007      	beq.n	8003e48 <HAL_UART_Receive+0xda>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_UART_Receive+0xe8>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e008      	b.n	8003e68 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1b2      	bne.n	8003dec <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d112      	bne.n	8003edc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_UART_Receive_IT+0x26>
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e00b      	b.n	8003ede <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fb13 	bl	80044fe <UART_Start_Receive_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e000      	b.n	8003ede <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0ba      	sub	sp, #232	; 0xe8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_UART_IRQHandler+0x66>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fbf2 	bl	8004730 <UART_Receive_IT>
      return;
 8003f4c:	e25b      	b.n	8004406 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80de 	beq.w	8004114 <HAL_UART_IRQHandler+0x22c>
 8003f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80d1 	beq.w	8004114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_UART_IRQHandler+0xae>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_UART_IRQHandler+0xd2>
 8003fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f043 0202 	orr.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_UART_IRQHandler+0xf6>
 8003fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_UART_IRQHandler+0x126>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f043 0208 	orr.w	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 81f2 	beq.w	80043fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x14e>
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb7d 	bl	8004730 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <HAL_UART_IRQHandler+0x17a>
 800405a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04f      	beq.n	8004102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa85 	bl	8004572 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d141      	bne.n	80040fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800408c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1d9      	bne.n	8004076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d013      	beq.n	80040f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	4a7e      	ldr	r2, [pc, #504]	; (80042c8 <HAL_UART_IRQHandler+0x3e0>)
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fd fe16 	bl	8001d08 <HAL_DMA_Abort_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040ec:	4610      	mov	r0, r2
 80040ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e00e      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f994 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e00a      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f990 	bl	8004420 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	e006      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f98c 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800410e:	e175      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	bf00      	nop
    return;
 8004112:	e173      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	f040 814f 	bne.w	80043bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8148 	beq.w	80043bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8141 	beq.w	80043bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	f040 80b6 	bne.w	80042cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800416c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8145 	beq.w	8004400 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417e:	429a      	cmp	r2, r3
 8004180:	f080 813e 	bcs.w	8004400 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800418a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	f000 8088 	beq.w	80042aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1d9      	bne.n	800419a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800420a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800420e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e1      	bne.n	80041e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800424c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e3      	bne.n	8004222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800428c:	65ba      	str	r2, [r7, #88]	; 0x58
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800429a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e3      	bne.n	8004268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fcbf 	bl	8001c28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2202      	movs	r2, #2
 80042ae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8b7 	bl	8004434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042c6:	e09b      	b.n	8004400 <HAL_UART_IRQHandler+0x518>
 80042c8:	08004639 	.word	0x08004639
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 808e 	beq.w	8004404 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8089 	beq.w	8004404 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004316:	647a      	str	r2, [r7, #68]	; 0x44
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800431c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e3      	bne.n	80042f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	623b      	str	r3, [r7, #32]
   return(result);
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800434e:	633a      	str	r2, [r7, #48]	; 0x30
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e3      	bne.n	800432a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	330c      	adds	r3, #12
 8004376:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0310 	bic.w	r3, r3, #16
 8004386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004394:	61fa      	str	r2, [r7, #28]
 8004396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	69b9      	ldr	r1, [r7, #24]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	617b      	str	r3, [r7, #20]
   return(result);
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e3      	bne.n	8004370 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f83d 	bl	8004434 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ba:	e023      	b.n	8004404 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d009      	beq.n	80043dc <HAL_UART_IRQHandler+0x4f4>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f943 	bl	8004660 <UART_Transmit_IT>
    return;
 80043da:	e014      	b.n	8004406 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00e      	beq.n	8004406 <HAL_UART_IRQHandler+0x51e>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f983 	bl	8004700 <UART_EndTransmit_IT>
    return;
 80043fa:	e004      	b.n	8004406 <HAL_UART_IRQHandler+0x51e>
    return;
 80043fc:	bf00      	nop
 80043fe:	e002      	b.n	8004406 <HAL_UART_IRQHandler+0x51e>
      return;
 8004400:	bf00      	nop
 8004402:	e000      	b.n	8004406 <HAL_UART_IRQHandler+0x51e>
      return;
 8004404:	bf00      	nop
  }
}
 8004406:	37e8      	adds	r7, #232	; 0xe8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445c:	e03b      	b.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d037      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004466:	f7fd fa6b 	bl	8001940 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	429a      	cmp	r2, r3
 8004474:	d302      	bcc.n	800447c <UART_WaitOnFlagUntilTimeout+0x30>
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e03a      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d023      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d020      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d01d      	beq.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d116      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f857 	bl	8004572 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2208      	movs	r2, #8
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e00f      	b.n	80044f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4013      	ands	r3, r2
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	bf0c      	ite	eq
 80044e6:	2301      	moveq	r3, #1
 80044e8:	2300      	movne	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	461a      	mov	r2, r3
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d0b4      	beq.n	800445e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	4613      	mov	r3, r2
 800450a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	88fa      	ldrh	r2, [r7, #6]
 8004516:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	88fa      	ldrh	r2, [r7, #6]
 800451c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2222      	movs	r2, #34	; 0x22
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004542:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0220 	orr.w	r2, r2, #32
 8004562:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004572:	b480      	push	{r7}
 8004574:	b095      	sub	sp, #84	; 0x54
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	330c      	adds	r3, #12
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800459a:	643a      	str	r2, [r7, #64]	; 0x40
 800459c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045a2:	e841 2300 	strex	r3, r2, [r1]
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e5      	bne.n	800457a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d119      	bne.n	800461e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	330c      	adds	r3, #12
 80045f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f023 0310 	bic.w	r3, r3, #16
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	330c      	adds	r3, #12
 8004608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460a:	61ba      	str	r2, [r7, #24]
 800460c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	613b      	str	r3, [r7, #16]
   return(result);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e5      	bne.n	80045ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800462c:	bf00      	nop
 800462e:	3754      	adds	r7, #84	; 0x54
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f7ff fee4 	bl	8004420 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b21      	cmp	r3, #33	; 0x21
 8004672:	d13e      	bne.n	80046f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d114      	bne.n	80046a8 <UART_Transmit_IT+0x48>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d110      	bne.n	80046a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800469a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	1c9a      	adds	r2, r3, #2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	621a      	str	r2, [r3, #32]
 80046a6:	e008      	b.n	80046ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	1c59      	adds	r1, r3, #1
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6211      	str	r1, [r2, #32]
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4619      	mov	r1, r3
 80046c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10f      	bne.n	80046ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004716:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fe73 	bl	800440c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	; 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b22      	cmp	r3, #34	; 0x22
 8004742:	f040 80ae 	bne.w	80048a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474e:	d117      	bne.n	8004780 <UART_Receive_IT+0x50>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d113      	bne.n	8004780 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476e:	b29a      	uxth	r2, r3
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	1c9a      	adds	r2, r3, #2
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
 800477e:	e026      	b.n	80047ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004792:	d007      	beq.n	80047a4 <UART_Receive_IT+0x74>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <UART_Receive_IT+0x82>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	701a      	strb	r2, [r3, #0]
 80047b0:	e008      	b.n	80047c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	4619      	mov	r1, r3
 80047dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d15d      	bne.n	800489e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0220 	bic.w	r2, r2, #32
 80047f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004800:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	2b01      	cmp	r3, #1
 8004826:	d135      	bne.n	8004894 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f023 0310 	bic.w	r3, r3, #16
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	330c      	adds	r3, #12
 800484c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484e:	623a      	str	r2, [r7, #32]
 8004850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004852:	69f9      	ldr	r1, [r7, #28]
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	61bb      	str	r3, [r7, #24]
   return(result);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e5      	bne.n	800482e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	d10a      	bne.n	8004886 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff fdd1 	bl	8004434 <HAL_UARTEx_RxEventCallback>
 8004892:	e002      	b.n	800489a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7fc fbf3 	bl	8001080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e002      	b.n	80048a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e000      	b.n	80048a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3730      	adds	r7, #48	; 0x30
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0c0      	sub	sp, #256	; 0x100
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	ea40 0301 	orr.w	r3, r0, r1
 80048d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004926:	6999      	ldr	r1, [r3, #24]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	ea40 0301 	orr.w	r3, r0, r1
 8004932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8f      	ldr	r3, [pc, #572]	; (8004b78 <UART_SetConfig+0x2cc>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d005      	beq.n	800494c <UART_SetConfig+0xa0>
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8d      	ldr	r3, [pc, #564]	; (8004b7c <UART_SetConfig+0x2d0>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d104      	bne.n	8004956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fd54 	bl	80033f8 <HAL_RCC_GetPCLK2Freq>
 8004950:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004956:	f7fe fd3b 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800495a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004968:	f040 810c 	bne.w	8004b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004976:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800497a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	1891      	adds	r1, r2, r2
 8004984:	65b9      	str	r1, [r7, #88]	; 0x58
 8004986:	415b      	adcs	r3, r3
 8004988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800498a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800498e:	4621      	mov	r1, r4
 8004990:	eb12 0801 	adds.w	r8, r2, r1
 8004994:	4629      	mov	r1, r5
 8004996:	eb43 0901 	adc.w	r9, r3, r1
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	eb18 0303 	adds.w	r3, r8, r3
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049bc:	462b      	mov	r3, r5
 80049be:	eb49 0303 	adc.w	r3, r9, r3
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049da:	460b      	mov	r3, r1
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	653b      	str	r3, [r7, #80]	; 0x50
 80049e0:	4613      	mov	r3, r2
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	657b      	str	r3, [r7, #84]	; 0x54
 80049e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049f0:	f7fb fc4e 	bl	8000290 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b61      	ldr	r3, [pc, #388]	; (8004b80 <UART_SetConfig+0x2d4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a24:	4641      	mov	r1, r8
 8004a26:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	4692      	mov	sl, r2
 8004a46:	469b      	mov	fp, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb4b 0303 	adc.w	r3, fp, r3
 8004a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	643b      	str	r3, [r7, #64]	; 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a86:	f7fb fc03 	bl	8000290 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4b3b      	ldr	r3, [pc, #236]	; (8004b80 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2301 	umull	r2, r3, r3, r1
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2264      	movs	r2, #100	; 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1acb      	subs	r3, r1, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004aa6:	4b36      	ldr	r3, [pc, #216]	; (8004b80 <UART_SetConfig+0x2d4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6339      	str	r1, [r7, #48]	; 0x30
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b42:	f7fb fba5 	bl	8000290 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	; 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	; 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <UART_SetConfig+0x2d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b74:	e106      	b.n	8004d84 <UART_SetConfig+0x4d8>
 8004b76:	bf00      	nop
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6239      	str	r1, [r7, #32]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0501 	adc.w	r5, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bcc:	464b      	mov	r3, r9
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	008a      	lsls	r2, r1, #2
 8004c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c04:	f7fb fb44 	bl	8000290 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <UART_SetConfig+0x4e4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6139      	str	r1, [r7, #16]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ca2:	f7fb faf5 	bl	8000290 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b38      	ldr	r3, [pc, #224]	; (8004d90 <UART_SetConfig+0x4e4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	; 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	; 0x32
 8004cc0:	4a33      	ldr	r2, [pc, #204]	; (8004d90 <UART_SetConfig+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cd6:	677a      	str	r2, [r7, #116]	; 0x74
 8004cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d1e:	464b      	mov	r3, r9
 8004d20:	460a      	mov	r2, r1
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	663b      	str	r3, [r7, #96]	; 0x60
 8004d32:	667a      	str	r2, [r7, #100]	; 0x64
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d52:	f7fb fa9d 	bl	8000290 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004da6:	2b84      	cmp	r3, #132	; 0x84
 8004da8:	d005      	beq.n	8004db6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004daa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4413      	add	r3, r2
 8004db2:	3303      	adds	r3, #3
 8004db4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004dc8:	f000 fe50 	bl	8005a6c <vTaskStartScheduler>
  
  return osOK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dd4:	b089      	sub	sp, #36	; 0x24
 8004dd6:	af04      	add	r7, sp, #16
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d020      	beq.n	8004e26 <osThreadCreate+0x54>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01c      	beq.n	8004e26 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685c      	ldr	r4, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691e      	ldr	r6, [r3, #16]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff ffc8 	bl	8004d94 <makeFreeRtosPriority>
 8004e04:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e0e:	9202      	str	r2, [sp, #8]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	9100      	str	r1, [sp, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4632      	mov	r2, r6
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f000 fc5e 	bl	80056dc <xTaskCreateStatic>
 8004e20:	4603      	mov	r3, r0
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e01c      	b.n	8004e60 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685c      	ldr	r4, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e32:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ffaa 	bl	8004d94 <makeFreeRtosPriority>
 8004e40:	4602      	mov	r2, r0
 8004e42:	f107 030c 	add.w	r3, r7, #12
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	9200      	str	r2, [sp, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4632      	mov	r2, r6
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4620      	mov	r0, r4
 8004e52:	f000 fca0 	bl	8005796 <xTaskCreate>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e000      	b.n	8004e62 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e60:	68fb      	ldr	r3, [r7, #12]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e6a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <osDelay+0x16>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e000      	b.n	8004e82 <osDelay+0x18>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fdbe 	bl	8005a04 <vTaskDelay>
  
  return osOK;
 8004e88:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b082      	sub	sp, #8
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f000 fa2a 	bl	8005302 <xQueueCreateMutexStatic>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	e003      	b.n	8004eba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f000 fa0d 	bl	80052d2 <xQueueCreateMutex>
 8004eb8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f103 0208 	add.w	r2, r3, #8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f103 0208 	add.w	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0208 	add.w	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	601a      	str	r2, [r3, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d103      	bne.n	8004f84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e00c      	b.n	8004f9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3308      	adds	r3, #8
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e002      	b.n	8004f92 <vListInsert+0x2e>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d2f6      	bcs.n	8004f8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6892      	ldr	r2, [r2, #8]
 8004fec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6852      	ldr	r2, [r2, #4]
 8004ff6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d103      	bne.n	800500a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005056:	f001 fbfd 	bl	8006854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	441a      	add	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	3b01      	subs	r3, #1
 8005088:	68f9      	ldr	r1, [r7, #12]
 800508a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d114      	bne.n	80050d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01a      	beq.n	80050ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3310      	adds	r3, #16
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 ff7b 	bl	8005fb4 <xTaskRemoveFromEventList>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d012      	beq.n	80050ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <xQueueGenericReset+0xcc>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	e009      	b.n	80050ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3310      	adds	r3, #16
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fef1 	bl	8004ec2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3324      	adds	r3, #36	; 0x24
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff feec 	bl	8004ec2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050ea:	f001 fbe3 	bl	80068b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050ee:	2301      	movs	r3, #1
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08e      	sub	sp, #56	; 0x38
 8005100:	af02      	add	r7, sp, #8
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <xQueueGenericCreateStatic+0x52>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <xQueueGenericCreateStatic+0x56>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <xQueueGenericCreateStatic+0x58>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	623b      	str	r3, [r7, #32]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <xQueueGenericCreateStatic+0x7e>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xQueueGenericCreateStatic+0x82>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueGenericCreateStatic+0x84>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10a      	bne.n	800519a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	61fb      	str	r3, [r7, #28]
}
 8005196:	bf00      	nop
 8005198:	e7fe      	b.n	8005198 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800519a:	2348      	movs	r3, #72	; 0x48
 800519c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b48      	cmp	r3, #72	; 0x48
 80051a2:	d00a      	beq.n	80051ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61bb      	str	r3, [r7, #24]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051ba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	4613      	mov	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f83f 	bl	8005260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3730      	adds	r7, #48	; 0x30
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af02      	add	r7, sp, #8
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3348      	adds	r3, #72	; 0x48
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fcdb 	bl	8006be0 <pvPortMalloc>
 800522a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3348      	adds	r3, #72	; 0x48
 800523a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005244:	79fa      	ldrb	r2, [r7, #7]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	4613      	mov	r3, r2
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f805 	bl	8005260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005256:	69bb      	ldr	r3, [r7, #24]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	3720      	adds	r7, #32
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d103      	bne.n	800527c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e002      	b.n	8005282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800528e:	2101      	movs	r1, #1
 8005290:	69b8      	ldr	r0, [r7, #24]
 8005292:	f7ff fecb 	bl	800502c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052be:	2300      	movs	r3, #0
 80052c0:	2200      	movs	r2, #0
 80052c2:	2100      	movs	r1, #0
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f837 	bl	8005338 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b086      	sub	sp, #24
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	4603      	mov	r3, r0
 80052da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	461a      	mov	r2, r3
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	f7ff ff7e 	bl	80051ec <xQueueGenericCreate>
 80052f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff ffd3 	bl	800529e <prvInitialiseMutex>

		return xNewQueue;
 80052f8:	68fb      	ldr	r3, [r7, #12]
	}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005302:	b580      	push	{r7, lr}
 8005304:	b088      	sub	sp, #32
 8005306:	af02      	add	r7, sp, #8
 8005308:	4603      	mov	r3, r0
 800530a:	6039      	str	r1, [r7, #0]
 800530c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800530e:	2301      	movs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
 8005312:	2300      	movs	r3, #0
 8005314:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2200      	movs	r2, #0
 800531e:	6939      	ldr	r1, [r7, #16]
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f7ff feeb 	bl	80050fc <xQueueGenericCreateStatic>
 8005326:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ffb8 	bl	800529e <prvInitialiseMutex>

		return xNewQueue;
 800532e:	68fb      	ldr	r3, [r7, #12]
	}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08e      	sub	sp, #56	; 0x38
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005346:	2300      	movs	r3, #0
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xQueueGenericSend+0x32>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d103      	bne.n	8005378 <xQueueGenericSend+0x40>
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <xQueueGenericSend+0x44>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <xQueueGenericSend+0x46>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <xQueueGenericSend+0x60>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005394:	bf00      	nop
 8005396:	e7fe      	b.n	8005396 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d103      	bne.n	80053a6 <xQueueGenericSend+0x6e>
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <xQueueGenericSend+0x72>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <xQueueGenericSend+0x74>
 80053aa:	2300      	movs	r3, #0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c6:	f001 f80b 	bl	80063e0 <xTaskGetSchedulerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <xQueueGenericSend+0x9e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xQueueGenericSend+0xa2>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <xQueueGenericSend+0xa4>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	61fb      	str	r3, [r7, #28]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053f6:	f001 fa2d 	bl	8006854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <xQueueGenericSend+0xd4>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d129      	bne.n	8005460 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005412:	f000 f88f 	bl	8005534 <prvCopyDataToQueue>
 8005416:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d010      	beq.n	8005442 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fdc5 	bl	8005fb4 <xTaskRemoveFromEventList>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <xQueueGenericSend+0x1f8>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	e00a      	b.n	8005458 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005448:	4b39      	ldr	r3, [pc, #228]	; (8005530 <xQueueGenericSend+0x1f8>)
 800544a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005458:	f001 fa2c 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	e063      	b.n	8005528 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d103      	bne.n	800546e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005466:	f001 fa25 	bl	80068b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800546a:	2300      	movs	r3, #0
 800546c:	e05c      	b.n	8005528 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800546e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fdff 	bl	800607c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800547e:	2301      	movs	r3, #1
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005482:	f001 fa17 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005486:	f000 fb51 	bl	8005b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800548a:	f001 f9e3 	bl	8006854 <vPortEnterCritical>
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005494:	b25b      	sxtb	r3, r3
 8005496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549a:	d103      	bne.n	80054a4 <xQueueGenericSend+0x16c>
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d103      	bne.n	80054ba <xQueueGenericSend+0x182>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ba:	f001 f9fb 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054be:	1d3a      	adds	r2, r7, #4
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	4611      	mov	r1, r2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fdee 	bl	80060a8 <xTaskCheckForTimeOut>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d124      	bne.n	800551c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d4:	f000 f8ea 	bl	80056ac <prvIsQueueFull>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d018      	beq.n	8005510 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	3310      	adds	r3, #16
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fd40 	bl	8005f6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ee:	f000 f88b 	bl	8005608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054f2:	f000 fb63 	bl	8005bbc <xTaskResumeAll>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f47f af7c 	bne.w	80053f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <xQueueGenericSend+0x1f8>)
 8005500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	e772      	b.n	80053f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005512:	f000 f879 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005516:	f000 fb51 	bl	8005bbc <xTaskResumeAll>
 800551a:	e76c      	b.n	80053f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551e:	f000 f873 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005522:	f000 fb4b 	bl	8005bbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005526:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005528:	4618      	mov	r0, r3
 800552a:	3738      	adds	r7, #56	; 0x38
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10d      	bne.n	800556e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d14d      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 ff5c 	bl	800641c <xTaskPriorityDisinherit>
 8005564:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	e043      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d119      	bne.n	80055a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6858      	ldr	r0, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	461a      	mov	r2, r3
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	f001 fd6c 	bl	800705c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	441a      	add	r2, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	d32b      	bcc.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	e026      	b.n	80055f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68d8      	ldr	r0, [r3, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	461a      	mov	r2, r3
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	f001 fd52 	bl	800705c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	425b      	negs	r3, r3
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	425b      	negs	r3, r3
 80055de:	441a      	add	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d105      	bne.n	80055f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005610:	f001 f920 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800561a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800561c:	e011      	b.n	8005642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3324      	adds	r3, #36	; 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fcc2 	bl	8005fb4 <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005636:	f000 fd99 	bl	800616c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	3b01      	subs	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dce9      	bgt.n	800561e <prvUnlockQueue+0x16>
 800564a:	e000      	b.n	800564e <prvUnlockQueue+0x46>
					break;
 800564c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005656:	f001 f92d 	bl	80068b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800565a:	f001 f8fb 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005666:	e011      	b.n	800568c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d012      	beq.n	8005696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fc9d 	bl	8005fb4 <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005680:	f000 fd74 	bl	800616c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	3b01      	subs	r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dce9      	bgt.n	8005668 <prvUnlockQueue+0x60>
 8005694:	e000      	b.n	8005698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	22ff      	movs	r2, #255	; 0xff
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056a0:	f001 f908 	bl	80068b4 <vPortExitCritical>
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 f8ce 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d102      	bne.n	80056ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e001      	b.n	80056ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f001 f8f1 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08e      	sub	sp, #56	; 0x38
 80056e0:	af04      	add	r7, sp, #16
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xTaskCreateStatic+0x2a>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	623b      	str	r3, [r7, #32]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTaskCreateStatic+0x46>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	61fb      	str	r3, [r7, #28]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005722:	2354      	movs	r3, #84	; 0x54
 8005724:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b54      	cmp	r3, #84	; 0x54
 800572a:	d00a      	beq.n	8005742 <xTaskCreateStatic+0x66>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	61bb      	str	r3, [r7, #24]
}
 800573e:	bf00      	nop
 8005740:	e7fe      	b.n	8005740 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005742:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01e      	beq.n	8005788 <xTaskCreateStatic+0xac>
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01b      	beq.n	8005788 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005758:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005762:	2300      	movs	r3, #0
 8005764:	9303      	str	r3, [sp, #12]
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	9301      	str	r3, [sp, #4]
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f850 	bl	8005820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005782:	f000 f8d5 	bl	8005930 <prvAddNewTaskToReadyList>
 8005786:	e001      	b.n	800578c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800578c:	697b      	ldr	r3, [r7, #20]
	}
 800578e:	4618      	mov	r0, r3
 8005790:	3728      	adds	r7, #40	; 0x28
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005796:	b580      	push	{r7, lr}
 8005798:	b08c      	sub	sp, #48	; 0x30
 800579a:	af04      	add	r7, sp, #16
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	603b      	str	r3, [r7, #0]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fa18 	bl	8006be0 <pvPortMalloc>
 80057b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057b8:	2054      	movs	r0, #84	; 0x54
 80057ba:	f001 fa11 	bl	8006be0 <pvPortMalloc>
 80057be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
 80057cc:	e005      	b.n	80057da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ce:	6978      	ldr	r0, [r7, #20]
 80057d0:	f001 fad2 	bl	8006d78 <vPortFree>
 80057d4:	e001      	b.n	80057da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d017      	beq.n	8005810 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	2300      	movs	r3, #0
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	9302      	str	r3, [sp, #8]
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f80e 	bl	8005820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005804:	69f8      	ldr	r0, [r7, #28]
 8005806:	f000 f893 	bl	8005930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800580a:	2301      	movs	r3, #1
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	e002      	b.n	8005816 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005816:	69bb      	ldr	r3, [r7, #24]
	}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005838:	3b01      	subs	r3, #1
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	617b      	str	r3, [r7, #20]
}
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d01f      	beq.n	80058ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	e012      	b.n	800589a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	7819      	ldrb	r1, [r3, #0]
 800587c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	3334      	adds	r3, #52	; 0x34
 8005884:	460a      	mov	r2, r1
 8005886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d006      	beq.n	80058a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	3301      	adds	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b0f      	cmp	r3, #15
 800589e:	d9e9      	bls.n	8005874 <prvInitialiseNewTask+0x54>
 80058a0:	e000      	b.n	80058a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80058a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058ac:	e003      	b.n	80058b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	2b06      	cmp	r3, #6
 80058ba:	d901      	bls.n	80058c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058bc:	2306      	movs	r3, #6
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2200      	movs	r2, #0
 80058d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	3304      	adds	r3, #4
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fb13 	bl	8004f02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	3318      	adds	r3, #24
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff fb0e 	bl	8004f02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	f1c3 0207 	rsb	r2, r3, #7
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	68f9      	ldr	r1, [r7, #12]
 800590e:	69b8      	ldr	r0, [r7, #24]
 8005910:	f000 fe70 	bl	80065f4 <pxPortInitialiseStack>
 8005914:	4602      	mov	r2, r0
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005926:	bf00      	nop
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005938:	f000 ff8c 	bl	8006854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <prvAddNewTaskToReadyList+0xb8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a29      	ldr	r2, [pc, #164]	; (80059e8 <prvAddNewTaskToReadyList+0xb8>)
 8005944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <prvAddNewTaskToReadyList+0xbc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800594e:	4a27      	ldr	r2, [pc, #156]	; (80059ec <prvAddNewTaskToReadyList+0xbc>)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005954:	4b24      	ldr	r3, [pc, #144]	; (80059e8 <prvAddNewTaskToReadyList+0xb8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d110      	bne.n	800597e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800595c:	f000 fc82 	bl	8006264 <prvInitialiseTaskLists>
 8005960:	e00d      	b.n	800597e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005962:	4b23      	ldr	r3, [pc, #140]	; (80059f0 <prvAddNewTaskToReadyList+0xc0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800596a:	4b20      	ldr	r3, [pc, #128]	; (80059ec <prvAddNewTaskToReadyList+0xbc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	429a      	cmp	r2, r3
 8005976:	d802      	bhi.n	800597e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005978:	4a1c      	ldr	r2, [pc, #112]	; (80059ec <prvAddNewTaskToReadyList+0xbc>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <prvAddNewTaskToReadyList+0xc4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <prvAddNewTaskToReadyList+0xc4>)
 8005986:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	2201      	movs	r2, #1
 800598e:	409a      	lsls	r2, r3
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <prvAddNewTaskToReadyList+0xc8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4313      	orrs	r3, r2
 8005996:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <prvAddNewTaskToReadyList+0xc8>)
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4a15      	ldr	r2, [pc, #84]	; (80059fc <prvAddNewTaskToReadyList+0xcc>)
 80059a8:	441a      	add	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7ff fab3 	bl	8004f1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059b6:	f000 ff7d 	bl	80068b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <prvAddNewTaskToReadyList+0xc0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00e      	beq.n	80059e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <prvAddNewTaskToReadyList+0xbc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d207      	bcs.n	80059e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <prvAddNewTaskToReadyList+0xd0>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200005fc 	.word	0x200005fc
 80059ec:	200004fc 	.word	0x200004fc
 80059f0:	20000608 	.word	0x20000608
 80059f4:	20000618 	.word	0x20000618
 80059f8:	20000604 	.word	0x20000604
 80059fc:	20000500 	.word	0x20000500
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d017      	beq.n	8005a46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <vTaskDelay+0x60>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <vTaskDelay+0x30>
	__asm volatile
 8005a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a22:	f383 8811 	msr	BASEPRI, r3
 8005a26:	f3bf 8f6f 	isb	sy
 8005a2a:	f3bf 8f4f 	dsb	sy
 8005a2e:	60bb      	str	r3, [r7, #8]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a34:	f000 f87a 	bl	8005b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd74 	bl	8006528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a40:	f000 f8bc 	bl	8005bbc <xTaskResumeAll>
 8005a44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d107      	bne.n	8005a5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <vTaskDelay+0x64>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000624 	.word	0x20000624
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a7a:	463a      	mov	r2, r7
 8005a7c:	1d39      	adds	r1, r7, #4
 8005a7e:	f107 0308 	add.w	r3, r7, #8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fb faa8 	bl	8000fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	9202      	str	r2, [sp, #8]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	460a      	mov	r2, r1
 8005a9a:	491e      	ldr	r1, [pc, #120]	; (8005b14 <vTaskStartScheduler+0xa8>)
 8005a9c:	481e      	ldr	r0, [pc, #120]	; (8005b18 <vTaskStartScheduler+0xac>)
 8005a9e:	f7ff fe1d 	bl	80056dc <xTaskCreateStatic>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <vTaskStartScheduler+0xb0>)
 8005aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005aa8:	4b1c      	ldr	r3, [pc, #112]	; (8005b1c <vTaskStartScheduler+0xb0>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e001      	b.n	8005aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d116      	bne.n	8005aee <vTaskStartScheduler+0x82>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	613b      	str	r3, [r7, #16]
}
 8005ad2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ad4:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <vTaskStartScheduler+0xb4>)
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005adc:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <vTaskStartScheduler+0xb8>)
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <vTaskStartScheduler+0xbc>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae8:	f000 fe12 	bl	8006710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005aec:	e00e      	b.n	8005b0c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d10a      	bne.n	8005b0c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60fb      	str	r3, [r7, #12]
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <vTaskStartScheduler+0x9e>
}
 8005b0c:	bf00      	nop
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08007aac 	.word	0x08007aac
 8005b18:	08006185 	.word	0x08006185
 8005b1c:	20000620 	.word	0x20000620
 8005b20:	2000061c 	.word	0x2000061c
 8005b24:	20000608 	.word	0x20000608
 8005b28:	20000600 	.word	0x20000600

08005b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <vTaskSuspendAll+0x18>)
 8005b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3a:	bf00      	nop
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	20000624 	.word	0x20000624

08005b48 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 8005b52:	2301      	movs	r3, #1
 8005b54:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <prvGetExpectedIdleTime+0x60>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d201      	bcs.n	8005b64 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8005b64:	4b11      	ldr	r3, [pc, #68]	; (8005bac <prvGetExpectedIdleTime+0x64>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	e012      	b.n	8005b9a <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <prvGetExpectedIdleTime+0x68>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d902      	bls.n	8005b82 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	e00b      	b.n	8005b9a <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e005      	b.n	8005b9a <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005b8e:	4b09      	ldr	r3, [pc, #36]	; (8005bb4 <prvGetExpectedIdleTime+0x6c>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <prvGetExpectedIdleTime+0x70>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	20000604 	.word	0x20000604
 8005bac:	200004fc 	.word	0x200004fc
 8005bb0:	20000500 	.word	0x20000500
 8005bb4:	2000061c 	.word	0x2000061c
 8005bb8:	20000600 	.word	0x20000600

08005bbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bca:	4b41      	ldr	r3, [pc, #260]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	603b      	str	r3, [r7, #0]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005be8:	f000 fe34 	bl	8006854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bec:	4b38      	ldr	r3, [pc, #224]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	4a37      	ldr	r2, [pc, #220]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005bf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf6:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <xTaskResumeAll+0x114>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d161      	bne.n	8005cc2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bfe:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <xTaskResumeAll+0x118>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d05d      	beq.n	8005cc2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c06:	e02e      	b.n	8005c66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <xTaskResumeAll+0x11c>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3318      	adds	r3, #24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff f9de 	bl	8004fd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff f9d9 	bl	8004fd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c28:	2201      	movs	r2, #1
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	4b2b      	ldr	r3, [pc, #172]	; (8005cdc <xTaskResumeAll+0x120>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	4a2a      	ldr	r2, [pc, #168]	; (8005cdc <xTaskResumeAll+0x120>)
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <xTaskResumeAll+0x124>)
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7ff f965 	bl	8004f1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <xTaskResumeAll+0x128>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c60:	4b21      	ldr	r3, [pc, #132]	; (8005ce8 <xTaskResumeAll+0x12c>)
 8005c62:	2201      	movs	r2, #1
 8005c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <xTaskResumeAll+0x11c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1cc      	bne.n	8005c08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c74:	f000 fb94 	bl	80063a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c78:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <xTaskResumeAll+0x130>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d010      	beq.n	8005ca6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c84:	f000 f85e 	bl	8005d44 <xTaskIncrementTick>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <xTaskResumeAll+0x12c>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f1      	bne.n	8005c84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <xTaskResumeAll+0x130>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ca6:	4b10      	ldr	r3, [pc, #64]	; (8005ce8 <xTaskResumeAll+0x12c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cb2:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <xTaskResumeAll+0x134>)
 8005cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cc2:	f000 fdf7 	bl	80068b4 <vPortExitCritical>

	return xAlreadyYielded;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000624 	.word	0x20000624
 8005cd4:	200005fc 	.word	0x200005fc
 8005cd8:	200005bc 	.word	0x200005bc
 8005cdc:	20000604 	.word	0x20000604
 8005ce0:	20000500 	.word	0x20000500
 8005ce4:	200004fc 	.word	0x200004fc
 8005ce8:	20000610 	.word	0x20000610
 8005cec:	2000060c 	.word	0x2000060c
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <vTaskStepTick+0x48>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	441a      	add	r2, r3
 8005d04:	4b0e      	ldr	r3, [pc, #56]	; (8005d40 <vTaskStepTick+0x4c>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d90a      	bls.n	8005d22 <vTaskStepTick+0x2e>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	60fb      	str	r3, [r7, #12]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <vTaskStepTick+0x48>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4413      	add	r3, r2
 8005d2a:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <vTaskStepTick+0x48>)
 8005d2c:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000600 	.word	0x20000600
 8005d40:	2000061c 	.word	0x2000061c

08005d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4e:	4b4e      	ldr	r3, [pc, #312]	; (8005e88 <xTaskIncrementTick+0x144>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f040 808e 	bne.w	8005e74 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d58:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <xTaskIncrementTick+0x148>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d60:	4a4a      	ldr	r2, [pc, #296]	; (8005e8c <xTaskIncrementTick+0x148>)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d120      	bne.n	8005dae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d6c:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <xTaskIncrementTick+0x14c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <xTaskIncrementTick+0x48>
	__asm volatile
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	603b      	str	r3, [r7, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <xTaskIncrementTick+0x46>
 8005d8c:	4b40      	ldr	r3, [pc, #256]	; (8005e90 <xTaskIncrementTick+0x14c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	4b40      	ldr	r3, [pc, #256]	; (8005e94 <xTaskIncrementTick+0x150>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a3e      	ldr	r2, [pc, #248]	; (8005e90 <xTaskIncrementTick+0x14c>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	4a3e      	ldr	r2, [pc, #248]	; (8005e94 <xTaskIncrementTick+0x150>)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	4b3d      	ldr	r3, [pc, #244]	; (8005e98 <xTaskIncrementTick+0x154>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a3c      	ldr	r2, [pc, #240]	; (8005e98 <xTaskIncrementTick+0x154>)
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	f000 faf9 	bl	80063a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dae:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <xTaskIncrementTick+0x158>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d348      	bcc.n	8005e4a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db8:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <xTaskIncrementTick+0x14c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d104      	bne.n	8005dcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <xTaskIncrementTick+0x158>)
 8005dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc8:	601a      	str	r2, [r3, #0]
					break;
 8005dca:	e03e      	b.n	8005e4a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dcc:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <xTaskIncrementTick+0x14c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d203      	bcs.n	8005dec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005de4:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <xTaskIncrementTick+0x158>)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dea:	e02e      	b.n	8005e4a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff f8f0 	bl	8004fd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d004      	beq.n	8005e08 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3318      	adds	r3, #24
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff f8e7 	bl	8004fd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <xTaskIncrementTick+0x15c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <xTaskIncrementTick+0x15c>)
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <xTaskIncrementTick+0x160>)
 8005e28:	441a      	add	r2, r3
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f7ff f873 	bl	8004f1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <xTaskIncrementTick+0x164>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d3b9      	bcc.n	8005db8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e48:	e7b6      	b.n	8005db8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <xTaskIncrementTick+0x164>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	4914      	ldr	r1, [pc, #80]	; (8005ea4 <xTaskIncrementTick+0x160>)
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d901      	bls.n	8005e66 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e66:	4b11      	ldr	r3, [pc, #68]	; (8005eac <xTaskIncrementTick+0x168>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e004      	b.n	8005e7e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <xTaskIncrementTick+0x16c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a0d      	ldr	r2, [pc, #52]	; (8005eb0 <xTaskIncrementTick+0x16c>)
 8005e7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e7e:	697b      	ldr	r3, [r7, #20]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000624 	.word	0x20000624
 8005e8c:	20000600 	.word	0x20000600
 8005e90:	200005b4 	.word	0x200005b4
 8005e94:	200005b8 	.word	0x200005b8
 8005e98:	20000614 	.word	0x20000614
 8005e9c:	2000061c 	.word	0x2000061c
 8005ea0:	20000604 	.word	0x20000604
 8005ea4:	20000500 	.word	0x20000500
 8005ea8:	200004fc 	.word	0x200004fc
 8005eac:	20000610 	.word	0x20000610
 8005eb0:	2000060c 	.word	0x2000060c

08005eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005eba:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <vTaskSwitchContext+0xa4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <vTaskSwitchContext+0xa8>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ec8:	e03f      	b.n	8005f4a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <vTaskSwitchContext+0xa8>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <vTaskSwitchContext+0xac>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	f1c3 031f 	rsb	r3, r3, #31
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	491f      	ldr	r1, [pc, #124]	; (8005f64 <vTaskSwitchContext+0xb0>)
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
 8005f0e:	e7fe      	b.n	8005f0e <vTaskSwitchContext+0x5a>
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4a12      	ldr	r2, [pc, #72]	; (8005f64 <vTaskSwitchContext+0xb0>)
 8005f1c:	4413      	add	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3308      	adds	r3, #8
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d104      	bne.n	8005f40 <vTaskSwitchContext+0x8c>
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <vTaskSwitchContext+0xb4>)
 8005f48:	6013      	str	r3, [r2, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000624 	.word	0x20000624
 8005f5c:	20000610 	.word	0x20000610
 8005f60:	20000604 	.word	0x20000604
 8005f64:	20000500 	.word	0x20000500
 8005f68:	200004fc 	.word	0x200004fc

08005f6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	60fb      	str	r3, [r7, #12]
}
 8005f8e:	bf00      	nop
 8005f90:	e7fe      	b.n	8005f90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <vTaskPlaceOnEventList+0x44>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3318      	adds	r3, #24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fe ffe2 	bl	8004f64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	6838      	ldr	r0, [r7, #0]
 8005fa4:	f000 fac0 	bl	8006528 <prvAddCurrentTaskToDelayedList>
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	200004fc 	.word	0x200004fc

08005fb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60fb      	str	r3, [r7, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	3318      	adds	r3, #24
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fff6 	bl	8004fd6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fea:	4b1e      	ldr	r3, [pc, #120]	; (8006064 <xTaskRemoveFromEventList+0xb0>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d11e      	bne.n	8006030 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe ffed 	bl	8004fd6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3
 8006004:	4b18      	ldr	r3, [pc, #96]	; (8006068 <xTaskRemoveFromEventList+0xb4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4313      	orrs	r3, r2
 800600a:	4a17      	ldr	r2, [pc, #92]	; (8006068 <xTaskRemoveFromEventList+0xb4>)
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006012:	4613      	mov	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4a14      	ldr	r2, [pc, #80]	; (800606c <xTaskRemoveFromEventList+0xb8>)
 800601c:	441a      	add	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f7fe ff79 	bl	8004f1c <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 800602a:	f000 f9b9 	bl	80063a0 <prvResetNextTaskUnblockTime>
 800602e:	e005      	b.n	800603c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3318      	adds	r3, #24
 8006034:	4619      	mov	r1, r3
 8006036:	480e      	ldr	r0, [pc, #56]	; (8006070 <xTaskRemoveFromEventList+0xbc>)
 8006038:	f7fe ff70 	bl	8004f1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <xTaskRemoveFromEventList+0xc0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	429a      	cmp	r2, r3
 8006048:	d905      	bls.n	8006056 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <xTaskRemoveFromEventList+0xc4>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e001      	b.n	800605a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006056:	2300      	movs	r3, #0
 8006058:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800605a:	697b      	ldr	r3, [r7, #20]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000624 	.word	0x20000624
 8006068:	20000604 	.word	0x20000604
 800606c:	20000500 	.word	0x20000500
 8006070:	200005bc 	.word	0x200005bc
 8006074:	200004fc 	.word	0x200004fc
 8006078:	20000610 	.word	0x20000610

0800607c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <vTaskInternalSetTimeOutState+0x24>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800608c:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <vTaskInternalSetTimeOutState+0x28>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	605a      	str	r2, [r3, #4]
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000614 	.word	0x20000614
 80060a4:	20000600 	.word	0x20000600

080060a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	613b      	str	r3, [r7, #16]
}
 80060ca:	bf00      	nop
 80060cc:	e7fe      	b.n	80060cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	60fb      	str	r3, [r7, #12]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060ea:	f000 fbb3 	bl	8006854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <xTaskCheckForTimeOut+0xbc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d102      	bne.n	800610e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006108:	2300      	movs	r3, #0
 800610a:	61fb      	str	r3, [r7, #28]
 800610c:	e023      	b.n	8006156 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <xTaskCheckForTimeOut+0xc0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d007      	beq.n	800612a <xTaskCheckForTimeOut+0x82>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	429a      	cmp	r2, r3
 8006122:	d302      	bcc.n	800612a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	61fb      	str	r3, [r7, #28]
 8006128:	e015      	b.n	8006156 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	d20b      	bcs.n	800614c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff ff9b 	bl	800607c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e004      	b.n	8006156 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006156:	f000 fbad 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 800615a:	69fb      	ldr	r3, [r7, #28]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20000600 	.word	0x20000600
 8006168:	20000614 	.word	0x20000614

0800616c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006170:	4b03      	ldr	r3, [pc, #12]	; (8006180 <vTaskMissedYield+0x14>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	20000610 	.word	0x20000610

08006184 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800618c:	f000 f8aa 	bl	80062e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006190:	4b19      	ldr	r3, [pc, #100]	; (80061f8 <prvIdleTask+0x74>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d907      	bls.n	80061a8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006198:	4b18      	ldr	r3, [pc, #96]	; (80061fc <prvIdleTask+0x78>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80061a8:	f7fa fee2 	bl	8000f70 <vApplicationIdleHook>
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80061ac:	f7ff fccc 	bl	8005b48 <prvGetExpectedIdleTime>
 80061b0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d9e9      	bls.n	800618c <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80061b8:	f7ff fcb8 	bl	8005b2c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80061bc:	4b10      	ldr	r3, [pc, #64]	; (8006200 <prvIdleTask+0x7c>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <prvIdleTask+0x80>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d20a      	bcs.n	80061de <prvIdleTask+0x5a>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	60bb      	str	r3, [r7, #8]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <prvIdleTask+0x58>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 80061de:	f7ff fcb3 	bl	8005b48 <prvGetExpectedIdleTime>
 80061e2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d902      	bls.n	80061f0 <prvIdleTask+0x6c>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fbe6 	bl	80069bc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 80061f0:	f7ff fce4 	bl	8005bbc <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 80061f4:	e7ca      	b.n	800618c <prvIdleTask+0x8>
 80061f6:	bf00      	nop
 80061f8:	20000500 	.word	0x20000500
 80061fc:	e000ed04 	.word	0xe000ed04
 8006200:	2000061c 	.word	0x2000061c
 8006204:	20000600 	.word	0x20000600

08006208 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006212:	2301      	movs	r3, #1
 8006214:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <eTaskConfirmSleepModeStatus+0x4c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800621e:	2300      	movs	r3, #0
 8006220:	71fb      	strb	r3, [r7, #7]
 8006222:	e010      	b.n	8006246 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8006224:	4b0c      	ldr	r3, [pc, #48]	; (8006258 <eTaskConfirmSleepModeStatus+0x50>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800622c:	2300      	movs	r3, #0
 800622e:	71fb      	strb	r3, [r7, #7]
 8006230:	e009      	b.n	8006246 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <eTaskConfirmSleepModeStatus+0x54>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <eTaskConfirmSleepModeStatus+0x58>)
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	1acb      	subs	r3, r1, r3
 800623e:	429a      	cmp	r2, r3
 8006240:	d101      	bne.n	8006246 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8006242:	2302      	movs	r3, #2
 8006244:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 8006246:	79fb      	ldrb	r3, [r7, #7]
	}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	200005bc 	.word	0x200005bc
 8006258:	20000610 	.word	0x20000610
 800625c:	200005e8 	.word	0x200005e8
 8006260:	200005fc 	.word	0x200005fc

08006264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e00c      	b.n	800628a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <prvInitialiseTaskLists+0x60>)
 800627c:	4413      	add	r3, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fe1f 	bl	8004ec2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b06      	cmp	r3, #6
 800628e:	d9ef      	bls.n	8006270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006290:	480d      	ldr	r0, [pc, #52]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 8006292:	f7fe fe16 	bl	8004ec2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006296:	480d      	ldr	r0, [pc, #52]	; (80062cc <prvInitialiseTaskLists+0x68>)
 8006298:	f7fe fe13 	bl	8004ec2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800629c:	480c      	ldr	r0, [pc, #48]	; (80062d0 <prvInitialiseTaskLists+0x6c>)
 800629e:	f7fe fe10 	bl	8004ec2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062a2:	480c      	ldr	r0, [pc, #48]	; (80062d4 <prvInitialiseTaskLists+0x70>)
 80062a4:	f7fe fe0d 	bl	8004ec2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a8:	480b      	ldr	r0, [pc, #44]	; (80062d8 <prvInitialiseTaskLists+0x74>)
 80062aa:	f7fe fe0a 	bl	8004ec2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvInitialiseTaskLists+0x78>)
 80062b0:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 80062b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <prvInitialiseTaskLists+0x7c>)
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <prvInitialiseTaskLists+0x68>)
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000500 	.word	0x20000500
 80062c8:	2000058c 	.word	0x2000058c
 80062cc:	200005a0 	.word	0x200005a0
 80062d0:	200005bc 	.word	0x200005bc
 80062d4:	200005d0 	.word	0x200005d0
 80062d8:	200005e8 	.word	0x200005e8
 80062dc:	200005b4 	.word	0x200005b4
 80062e0:	200005b8 	.word	0x200005b8

080062e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ea:	e019      	b.n	8006320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062ec:	f000 fab2 	bl	8006854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <prvCheckTasksWaitingTermination+0x50>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fe6a 	bl	8004fd6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3b01      	subs	r3, #1
 8006308:	4a0b      	ldr	r2, [pc, #44]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 800630a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3b01      	subs	r3, #1
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006316:	f000 facd 	bl	80068b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f810 	bl	8006340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e1      	bne.n	80062ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	200005d0 	.word	0x200005d0
 8006338:	200005fc 	.word	0x200005fc
 800633c:	200005e4 	.word	0x200005e4

08006340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800634e:	2b00      	cmp	r3, #0
 8006350:	d108      	bne.n	8006364 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd0e 	bl	8006d78 <vPortFree>
				vPortFree( pxTCB );
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fd0b 	bl	8006d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006362:	e018      	b.n	8006396 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800636a:	2b01      	cmp	r3, #1
 800636c:	d103      	bne.n	8006376 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fd02 	bl	8006d78 <vPortFree>
	}
 8006374:	e00f      	b.n	8006396 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800637c:	2b02      	cmp	r3, #2
 800637e:	d00a      	beq.n	8006396 <prvDeleteTCB+0x56>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <prvDeleteTCB+0x54>
	}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063a6:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <prvResetNextTaskUnblockTime+0x38>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d104      	bne.n	80063ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <prvResetNextTaskUnblockTime+0x3c>)
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063b8:	e008      	b.n	80063cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <prvResetNextTaskUnblockTime+0x38>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4a04      	ldr	r2, [pc, #16]	; (80063dc <prvResetNextTaskUnblockTime+0x3c>)
 80063ca:	6013      	str	r3, [r2, #0]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	200005b4 	.word	0x200005b4
 80063dc:	2000061c 	.word	0x2000061c

080063e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063e6:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <xTaskGetSchedulerState+0x34>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063ee:	2301      	movs	r3, #1
 80063f0:	607b      	str	r3, [r7, #4]
 80063f2:	e008      	b.n	8006406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <xTaskGetSchedulerState+0x38>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063fc:	2302      	movs	r3, #2
 80063fe:	607b      	str	r3, [r7, #4]
 8006400:	e001      	b.n	8006406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006406:	687b      	ldr	r3, [r7, #4]
	}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000608 	.word	0x20000608
 8006418:	20000624 	.word	0x20000624

0800641c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d06e      	beq.n	8006510 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006432:	4b3a      	ldr	r3, [pc, #232]	; (800651c <xTaskPriorityDisinherit+0x100>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d00a      	beq.n	8006452 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60fb      	str	r3, [r7, #12]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	60bb      	str	r3, [r7, #8]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006474:	1e5a      	subs	r2, r3, #1
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006482:	429a      	cmp	r2, r3
 8006484:	d044      	beq.n	8006510 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	2b00      	cmp	r3, #0
 800648c:	d140      	bne.n	8006510 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3304      	adds	r3, #4
 8006492:	4618      	mov	r0, r3
 8006494:	f7fe fd9f 	bl	8004fd6 <uxListRemove>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d115      	bne.n	80064ca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a2:	491f      	ldr	r1, [pc, #124]	; (8006520 <xTaskPriorityDisinherit+0x104>)
 80064a4:	4613      	mov	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <xTaskPriorityDisinherit+0xae>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	2201      	movs	r2, #1
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	43da      	mvns	r2, r3
 80064c0:	4b18      	ldr	r3, [pc, #96]	; (8006524 <xTaskPriorityDisinherit+0x108>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4013      	ands	r3, r2
 80064c6:	4a17      	ldr	r2, [pc, #92]	; (8006524 <xTaskPriorityDisinherit+0x108>)
 80064c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f1c3 0207 	rsb	r2, r3, #7
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	2201      	movs	r2, #1
 80064e4:	409a      	lsls	r2, r3
 80064e6:	4b0f      	ldr	r3, [pc, #60]	; (8006524 <xTaskPriorityDisinherit+0x108>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	4a0d      	ldr	r2, [pc, #52]	; (8006524 <xTaskPriorityDisinherit+0x108>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4a08      	ldr	r2, [pc, #32]	; (8006520 <xTaskPriorityDisinherit+0x104>)
 80064fe:	441a      	add	r2, r3
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	3304      	adds	r3, #4
 8006504:	4619      	mov	r1, r3
 8006506:	4610      	mov	r0, r2
 8006508:	f7fe fd08 	bl	8004f1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800650c:	2301      	movs	r3, #1
 800650e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006510:	697b      	ldr	r3, [r7, #20]
	}
 8006512:	4618      	mov	r0, r3
 8006514:	3718      	adds	r7, #24
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200004fc 	.word	0x200004fc
 8006520:	20000500 	.word	0x20000500
 8006524:	20000604 	.word	0x20000604

08006528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006532:	4b29      	ldr	r3, [pc, #164]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006538:	4b28      	ldr	r3, [pc, #160]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3304      	adds	r3, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fd49 	bl	8004fd6 <uxListRemove>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800654a:	4b24      	ldr	r3, [pc, #144]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	2201      	movs	r2, #1
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43da      	mvns	r2, r3
 8006558:	4b21      	ldr	r3, [pc, #132]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4013      	ands	r3, r2
 800655e:	4a20      	ldr	r2, [pc, #128]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d10a      	bne.n	8006580 <prvAddCurrentTaskToDelayedList+0x58>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	481a      	ldr	r0, [pc, #104]	; (80065e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800657a:	f7fe fccf 	bl	8004f1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800657e:	e026      	b.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006588:	4b14      	ldr	r3, [pc, #80]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d209      	bcs.n	80065ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006598:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3304      	adds	r3, #4
 80065a2:	4619      	mov	r1, r3
 80065a4:	4610      	mov	r0, r2
 80065a6:	f7fe fcdd 	bl	8004f64 <vListInsert>
}
 80065aa:	e010      	b.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b0a      	ldr	r3, [pc, #40]	; (80065dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fe fcd3 	bl	8004f64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065be:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d202      	bcs.n	80065ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80065c8:	4a09      	ldr	r2, [pc, #36]	; (80065f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6013      	str	r3, [r2, #0]
}
 80065ce:	bf00      	nop
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20000600 	.word	0x20000600
 80065dc:	200004fc 	.word	0x200004fc
 80065e0:	20000604 	.word	0x20000604
 80065e4:	200005e8 	.word	0x200005e8
 80065e8:	200005b8 	.word	0x200005b8
 80065ec:	200005b4 	.word	0x200005b4
 80065f0:	2000061c 	.word	0x2000061c

080065f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b04      	subs	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <pxPortInitialiseStack+0x64>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b14      	subs	r3, #20
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b20      	subs	r3, #32
 8006648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	0800665d 	.word	0x0800665d

0800665c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <prvTaskExitError+0x54>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d00a      	beq.n	8006686 <prvTaskExitError+0x2a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvTaskExitError+0x28>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800669a:	bf00      	nop
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0fc      	beq.n	800669c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20000014 	.word	0x20000014
	...

080066c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	200004fc 	.word	0x200004fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	; (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	bf00      	nop
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006716:	4b46      	ldr	r3, [pc, #280]	; (8006830 <xPortStartScheduler+0x120>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <xPortStartScheduler+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10a      	bne.n	8006736 <xPortStartScheduler+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <xPortStartScheduler+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xPortStartScheduler+0x128>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10a      	bne.n	8006756 <xPortStartScheduler+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <xPortStartScheduler+0x12c>)
 8006758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4b31      	ldr	r3, [pc, #196]	; (8006840 <xPortStartScheduler+0x130>)
 800677c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800677e:	4b31      	ldr	r3, [pc, #196]	; (8006844 <xPortStartScheduler+0x134>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006784:	e009      	b.n	800679a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <xPortStartScheduler+0x134>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <xPortStartScheduler+0x134>)
 800678e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d0ef      	beq.n	8006786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1c3 0307 	rsb	r3, r3, #7
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00a      	beq.n	80067c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <xPortStartScheduler+0x134>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <xPortStartScheduler+0x134>)
 80067d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <xPortStartScheduler+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067da:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <xPortStartScheduler+0x134>)
 80067dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <xPortStartScheduler+0x138>)
 80067ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <xPortStartScheduler+0x138>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <xPortStartScheduler+0x138>)
 80067f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067fe:	f000 f9a9 	bl	8006b54 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <xPortStartScheduler+0x13c>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006808:	f000 f9e0 	bl	8006bcc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <xPortStartScheduler+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <xPortStartScheduler+0x140>)
 8006812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006818:	f7ff ff66 	bl	80066e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800681c:	f7ff fb4a 	bl	8005eb4 <vTaskSwitchContext>
	prvTaskExitError();
 8006820:	f7ff ff1c 	bl	800665c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000ed00 	.word	0xe000ed00
 8006834:	410fc271 	.word	0x410fc271
 8006838:	410fc270 	.word	0x410fc270
 800683c:	e000e400 	.word	0xe000e400
 8006840:	20000634 	.word	0x20000634
 8006844:	20000638 	.word	0x20000638
 8006848:	e000ed20 	.word	0xe000ed20
 800684c:	20000014 	.word	0x20000014
 8006850:	e000ef34 	.word	0xe000ef34

08006854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	607b      	str	r3, [r7, #4]
}
 800686c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <vPortEnterCritical+0x58>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <vPortEnterCritical+0x58>)
 8006876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <vPortEnterCritical+0x58>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10f      	bne.n	80068a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <vPortEnterCritical+0x5c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vPortEnterCritical+0x4a>
	}
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000014 	.word	0x20000014
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <vPortExitCritical+0x50>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vPortExitCritical+0x24>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <vPortExitCritical+0x50>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3b01      	subs	r3, #1
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <vPortExitCritical+0x50>)
 80068e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <vPortExitCritical+0x50>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <vPortExitCritical+0x42>
 80068ea:	2300      	movs	r3, #0
 80068ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20000014 	.word	0x20000014
	...

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f01e 0f10 	tst.w	lr, #16
 8006920:	bf08      	it	eq
 8006922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006934:	f380 8811 	msr	BASEPRI, r0
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f7ff fab8 	bl	8005eb4 <vTaskSwitchContext>
 8006944:	f04f 0000 	mov.w	r0, #0
 8006948:	f380 8811 	msr	BASEPRI, r0
 800694c:	bc09      	pop	{r0, r3}
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	f01e 0f10 	tst.w	lr, #16
 800695a:	bf08      	it	eq
 800695c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006960:	f380 8809 	msr	PSP, r0
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst>:
 8006970:	200004fc 	.word	0x200004fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006992:	f7ff f9d7 	bl	8005d44 <xTaskIncrementTick>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <SysTick_Handler+0x40>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80069c4:	4b5d      	ldr	r3, [pc, #372]	; (8006b3c <vPortSuppressTicksAndSleep+0x180>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d902      	bls.n	80069d4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80069ce:	4b5b      	ldr	r3, [pc, #364]	; (8006b3c <vPortSuppressTicksAndSleep+0x180>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80069d4:	4b5a      	ldr	r3, [pc, #360]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a59      	ldr	r2, [pc, #356]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80069e0:	4b58      	ldr	r3, [pc, #352]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	4957      	ldr	r1, [pc, #348]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 80069ea:	6809      	ldr	r1, [r1, #0]
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80069f4:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <vPortSuppressTicksAndSleep+0x190>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d904      	bls.n	8006a08 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80069fe:	4b53      	ldr	r3, [pc, #332]	; (8006b4c <vPortSuppressTicksAndSleep+0x190>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8006a08:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8006a0a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8006a0e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8006a12:	f7ff fbf9 	bl	8006208 <eTaskConfirmSleepModeStatus>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d110      	bne.n	8006a3e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006a1c:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 8006a1e:	4a4c      	ldr	r2, [pc, #304]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006a24:	4b46      	ldr	r3, [pc, #280]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a45      	ldr	r2, [pc, #276]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006a30:	4b45      	ldr	r3, [pc, #276]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a46      	ldr	r2, [pc, #280]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006a36:	3b01      	subs	r3, #1
 8006a38:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8006a3a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8006a3c:	e079      	b.n	8006b32 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8006a3e:	4a44      	ldr	r2, [pc, #272]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a44:	4b3f      	ldr	r3, [pc, #252]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006a4a:	4b3d      	ldr	r3, [pc, #244]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3c      	ldr	r2, [pc, #240]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a50:	f043 0301 	orr.w	r3, r3, #1
 8006a54:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	6938      	ldr	r0, [r7, #16]
 8006a60:	f7fa faa6 	bl	8000fb0 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8006a6a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8006a6e:	bf30      	wfi
				__asm volatile( "isb" );
 8006a70:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fa faa5 	bl	8000fc4 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8006a7a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8006a7c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006a80:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8006a84:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8006a86:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006a8a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8006a8e:	4b2c      	ldr	r3, [pc, #176]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a90:	2206      	movs	r2, #6
 8006a92:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8006a94:	4b2a      	ldr	r3, [pc, #168]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01d      	beq.n	8006adc <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8006aa0:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	4b27      	ldr	r3, [pc, #156]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 8006aa6:	6819      	ldr	r1, [r3, #0]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1acb      	subs	r3, r1, r3
 8006aac:	4413      	add	r3, r2
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8006ab2:	4b26      	ldr	r3, [pc, #152]	; (8006b4c <vPortSuppressTicksAndSleep+0x190>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d304      	bcc.n	8006ac6 <vPortSuppressTicksAndSleep+0x10a>
 8006abc:	4b22      	ldr	r3, [pc, #136]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d903      	bls.n	8006ace <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8006ac6:	4b20      	ldr	r3, [pc, #128]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8006ace:	4a20      	ldr	r2, [pc, #128]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
 8006ada:	e018      	b.n	8006b0e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	fb03 f202 	mul.w	r2, r3, r2
 8006ae6:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8006aee:	4b16      	ldr	r3, [pc, #88]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	3301      	adds	r3, #1
 8006afe:	4a12      	ldr	r2, [pc, #72]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	fb03 f202 	mul.w	r2, r3, r2
 8006b06:	4912      	ldr	r1, [pc, #72]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <vPortSuppressTicksAndSleep+0x188>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <vPortSuppressTicksAndSleep+0x184>)
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
 8006b1e:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8006b20:	69b8      	ldr	r0, [r7, #24]
 8006b22:	f7ff f8e7 	bl	8005cf4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006b26:	4b08      	ldr	r3, [pc, #32]	; (8006b48 <vPortSuppressTicksAndSleep+0x18c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <vPortSuppressTicksAndSleep+0x194>)
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006b30:	b662      	cpsie	i
	}
 8006b32:	bf00      	nop
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2000062c 	.word	0x2000062c
 8006b40:	e000e010 	.word	0xe000e010
 8006b44:	e000e018 	.word	0xe000e018
 8006b48:	20000628 	.word	0x20000628
 8006b4c:	20000630 	.word	0x20000630
 8006b50:	e000e014 	.word	0xe000e014

08006b54 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b54:	b480      	push	{r7}
 8006b56:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006b58:	4b14      	ldr	r3, [pc, #80]	; (8006bac <vPortSetupTimerInterrupt+0x58>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <vPortSetupTimerInterrupt+0x5c>)
 8006b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	4a13      	ldr	r2, [pc, #76]	; (8006bb4 <vPortSetupTimerInterrupt+0x60>)
 8006b66:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <vPortSetupTimerInterrupt+0x60>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b74:	4a10      	ldr	r2, [pc, #64]	; (8006bb8 <vPortSetupTimerInterrupt+0x64>)
 8006b76:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8006b78:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <vPortSetupTimerInterrupt+0x68>)
 8006b7a:	222d      	movs	r2, #45	; 0x2d
 8006b7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b7e:	4b10      	ldr	r3, [pc, #64]	; (8006bc0 <vPortSetupTimerInterrupt+0x6c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b84:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <vPortSetupTimerInterrupt+0x70>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b8a:	4b08      	ldr	r3, [pc, #32]	; (8006bac <vPortSetupTimerInterrupt+0x58>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <vPortSetupTimerInterrupt+0x5c>)
 8006b90:	fba2 2303 	umull	r2, r3, r2, r3
 8006b94:	099b      	lsrs	r3, r3, #6
 8006b96:	4a0c      	ldr	r2, [pc, #48]	; (8006bc8 <vPortSetupTimerInterrupt+0x74>)
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b9c:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <vPortSetupTimerInterrupt+0x6c>)
 8006b9e:	2207      	movs	r2, #7
 8006ba0:	601a      	str	r2, [r3, #0]
}
 8006ba2:	bf00      	nop
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	20000008 	.word	0x20000008
 8006bb0:	10624dd3 	.word	0x10624dd3
 8006bb4:	20000628 	.word	0x20000628
 8006bb8:	2000062c 	.word	0x2000062c
 8006bbc:	20000630 	.word	0x20000630
 8006bc0:	e000e010 	.word	0xe000e010
 8006bc4:	e000e018 	.word	0xe000e018
 8006bc8:	e000e014 	.word	0xe000e014

08006bcc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bcc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006bdc <vPortEnableVFP+0x10>
 8006bd0:	6801      	ldr	r1, [r0, #0]
 8006bd2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006bd6:	6001      	str	r1, [r0, #0]
 8006bd8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bda:	bf00      	nop
 8006bdc:	e000ed88 	.word	0xe000ed88

08006be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bec:	f7fe ff9e 	bl	8005b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <pvPortMalloc+0x180>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf8:	f000 f920 	bl	8006e3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bfc:	4b59      	ldr	r3, [pc, #356]	; (8006d64 <pvPortMalloc+0x184>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 8093 	bne.w	8006d30 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01d      	beq.n	8006c4c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c10:	2208      	movs	r2, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d014      	beq.n	8006c4c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	3308      	adds	r3, #8
 8006c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <pvPortMalloc+0x6c>
	__asm volatile
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	617b      	str	r3, [r7, #20]
}
 8006c48:	bf00      	nop
 8006c4a:	e7fe      	b.n	8006c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d06e      	beq.n	8006d30 <pvPortMalloc+0x150>
 8006c52:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <pvPortMalloc+0x188>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d869      	bhi.n	8006d30 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5c:	4b43      	ldr	r3, [pc, #268]	; (8006d6c <pvPortMalloc+0x18c>)
 8006c5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c60:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <pvPortMalloc+0x18c>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c66:	e004      	b.n	8006c72 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d903      	bls.n	8006c84 <pvPortMalloc+0xa4>
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f1      	bne.n	8006c68 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c84:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <pvPortMalloc+0x180>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d050      	beq.n	8006d30 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2208      	movs	r2, #8
 8006c94:	4413      	add	r3, r2
 8006c96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	2308      	movs	r3, #8
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d91f      	bls.n	8006cf0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f003 0307 	and.w	r3, r3, #7
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <pvPortMalloc+0xf8>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	613b      	str	r3, [r7, #16]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f000 f908 	bl	8006f00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <pvPortMalloc+0x188>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	; (8006d68 <pvPortMalloc+0x188>)
 8006cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <pvPortMalloc+0x188>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <pvPortMalloc+0x190>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d0a:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <pvPortMalloc+0x188>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	; (8006d70 <pvPortMalloc+0x190>)
 8006d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b13      	ldr	r3, [pc, #76]	; (8006d64 <pvPortMalloc+0x184>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d26:	4b13      	ldr	r3, [pc, #76]	; (8006d74 <pvPortMalloc+0x194>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <pvPortMalloc+0x194>)
 8006d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d30:	f7fe ff44 	bl	8005bbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00a      	beq.n	8006d54 <pvPortMalloc+0x174>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60fb      	str	r3, [r7, #12]
}
 8006d50:	bf00      	nop
 8006d52:	e7fe      	b.n	8006d52 <pvPortMalloc+0x172>
	return pvReturn;
 8006d54:	69fb      	ldr	r3, [r7, #28]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	; 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20004244 	.word	0x20004244
 8006d64:	20004258 	.word	0x20004258
 8006d68:	20004248 	.word	0x20004248
 8006d6c:	2000423c 	.word	0x2000423c
 8006d70:	2000424c 	.word	0x2000424c
 8006d74:	20004250 	.word	0x20004250

08006d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04d      	beq.n	8006e26 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b24      	ldr	r3, [pc, #144]	; (8006e30 <vPortFree+0xb8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <vPortFree+0x44>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <vPortFree+0x62>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60bb      	str	r3, [r7, #8]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	4b14      	ldr	r3, [pc, #80]	; (8006e30 <vPortFree+0xb8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d01e      	beq.n	8006e26 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d11a      	bne.n	8006e26 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	4b0e      	ldr	r3, [pc, #56]	; (8006e30 <vPortFree+0xb8>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	43db      	mvns	r3, r3
 8006dfa:	401a      	ands	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e00:	f7fe fe94 	bl	8005b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <vPortFree+0xbc>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	4a09      	ldr	r2, [pc, #36]	; (8006e34 <vPortFree+0xbc>)
 8006e10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e12:	6938      	ldr	r0, [r7, #16]
 8006e14:	f000 f874 	bl	8006f00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e18:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <vPortFree+0xc0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	4a06      	ldr	r2, [pc, #24]	; (8006e38 <vPortFree+0xc0>)
 8006e20:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e22:	f7fe fecb 	bl	8005bbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e26:	bf00      	nop
 8006e28:	3718      	adds	r7, #24
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20004258 	.word	0x20004258
 8006e34:	20004248 	.word	0x20004248
 8006e38:	20004254 	.word	0x20004254

08006e3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e48:	4b27      	ldr	r3, [pc, #156]	; (8006ee8 <prvHeapInit+0xac>)
 8006e4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00c      	beq.n	8006e70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3307      	adds	r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <prvHeapInit+0xac>)
 8006e6c:	4413      	add	r3, r2
 8006e6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <prvHeapInit+0xb0>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e7a:	4b1c      	ldr	r3, [pc, #112]	; (8006eec <prvHeapInit+0xb0>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4413      	add	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e88:	2208      	movs	r2, #8
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1a9b      	subs	r3, r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4a15      	ldr	r2, [pc, #84]	; (8006ef0 <prvHeapInit+0xb4>)
 8006e9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <prvHeapInit+0xb4>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <prvHeapInit+0xb4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	1ad2      	subs	r2, r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <prvHeapInit+0xb4>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a0a      	ldr	r2, [pc, #40]	; (8006ef4 <prvHeapInit+0xb8>)
 8006eca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a09      	ldr	r2, [pc, #36]	; (8006ef8 <prvHeapInit+0xbc>)
 8006ed2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ed4:	4b09      	ldr	r3, [pc, #36]	; (8006efc <prvHeapInit+0xc0>)
 8006ed6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eda:	601a      	str	r2, [r3, #0]
}
 8006edc:	bf00      	nop
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	2000063c 	.word	0x2000063c
 8006eec:	2000423c 	.word	0x2000423c
 8006ef0:	20004244 	.word	0x20004244
 8006ef4:	2000424c 	.word	0x2000424c
 8006ef8:	20004248 	.word	0x20004248
 8006efc:	20004258 	.word	0x20004258

08006f00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f08:	4b28      	ldr	r3, [pc, #160]	; (8006fac <prvInsertBlockIntoFreeList+0xac>)
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	e002      	b.n	8006f14 <prvInsertBlockIntoFreeList+0x14>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d8f7      	bhi.n	8006f0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d108      	bne.n	8006f42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d118      	bne.n	8006f88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d00d      	beq.n	8006f7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	e008      	b.n	8006f90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <prvInsertBlockIntoFreeList+0xb0>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e003      	b.n	8006f90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d002      	beq.n	8006f9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	2000423c 	.word	0x2000423c
 8006fb0:	20004244 	.word	0x20004244

08006fb4 <_vsiprintf_r>:
 8006fb4:	b500      	push	{lr}
 8006fb6:	b09b      	sub	sp, #108	; 0x6c
 8006fb8:	9100      	str	r1, [sp, #0]
 8006fba:	9104      	str	r1, [sp, #16]
 8006fbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fc0:	9105      	str	r1, [sp, #20]
 8006fc2:	9102      	str	r1, [sp, #8]
 8006fc4:	4905      	ldr	r1, [pc, #20]	; (8006fdc <_vsiprintf_r+0x28>)
 8006fc6:	9103      	str	r1, [sp, #12]
 8006fc8:	4669      	mov	r1, sp
 8006fca:	f000 f9a7 	bl	800731c <_svfiprintf_r>
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
 8006fd4:	b01b      	add	sp, #108	; 0x6c
 8006fd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fda:	bf00      	nop
 8006fdc:	ffff0208 	.word	0xffff0208

08006fe0 <vsiprintf>:
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	4802      	ldr	r0, [pc, #8]	; (8006ff0 <vsiprintf+0x10>)
 8006fe8:	6800      	ldr	r0, [r0, #0]
 8006fea:	f7ff bfe3 	b.w	8006fb4 <_vsiprintf_r>
 8006fee:	bf00      	nop
 8006ff0:	20000064 	.word	0x20000064

08006ff4 <memset>:
 8006ff4:	4402      	add	r2, r0
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d100      	bne.n	8006ffe <memset+0xa>
 8006ffc:	4770      	bx	lr
 8006ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8007002:	e7f9      	b.n	8006ff8 <memset+0x4>

08007004 <__errno>:
 8007004:	4b01      	ldr	r3, [pc, #4]	; (800700c <__errno+0x8>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	20000064 	.word	0x20000064

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4d0d      	ldr	r5, [pc, #52]	; (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	; (800704c <__libc_init_array+0x3c>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2600      	movs	r6, #0
 800701c:	42a6      	cmp	r6, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4d0b      	ldr	r5, [pc, #44]	; (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	; (8007054 <__libc_init_array+0x44>)
 8007024:	f000 fc6a 	bl	80078fc <_init>
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2600      	movs	r6, #0
 800702e:	42a6      	cmp	r6, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f855 3b04 	ldr.w	r3, [r5], #4
 8007038:	4798      	blx	r3
 800703a:	3601      	adds	r6, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007042:	4798      	blx	r3
 8007044:	3601      	adds	r6, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	08007b08 	.word	0x08007b08
 800704c:	08007b08 	.word	0x08007b08
 8007050:	08007b08 	.word	0x08007b08
 8007054:	08007b0c 	.word	0x08007b0c

08007058 <__retarget_lock_acquire_recursive>:
 8007058:	4770      	bx	lr

0800705a <__retarget_lock_release_recursive>:
 800705a:	4770      	bx	lr

0800705c <memcpy>:
 800705c:	440a      	add	r2, r1
 800705e:	4291      	cmp	r1, r2
 8007060:	f100 33ff 	add.w	r3, r0, #4294967295
 8007064:	d100      	bne.n	8007068 <memcpy+0xc>
 8007066:	4770      	bx	lr
 8007068:	b510      	push	{r4, lr}
 800706a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007072:	4291      	cmp	r1, r2
 8007074:	d1f9      	bne.n	800706a <memcpy+0xe>
 8007076:	bd10      	pop	{r4, pc}

08007078 <_free_r>:
 8007078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800707a:	2900      	cmp	r1, #0
 800707c:	d044      	beq.n	8007108 <_free_r+0x90>
 800707e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007082:	9001      	str	r0, [sp, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f1a1 0404 	sub.w	r4, r1, #4
 800708a:	bfb8      	it	lt
 800708c:	18e4      	addlt	r4, r4, r3
 800708e:	f000 f8df 	bl	8007250 <__malloc_lock>
 8007092:	4a1e      	ldr	r2, [pc, #120]	; (800710c <_free_r+0x94>)
 8007094:	9801      	ldr	r0, [sp, #4]
 8007096:	6813      	ldr	r3, [r2, #0]
 8007098:	b933      	cbnz	r3, 80070a8 <_free_r+0x30>
 800709a:	6063      	str	r3, [r4, #4]
 800709c:	6014      	str	r4, [r2, #0]
 800709e:	b003      	add	sp, #12
 80070a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070a4:	f000 b8da 	b.w	800725c <__malloc_unlock>
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d908      	bls.n	80070be <_free_r+0x46>
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	1961      	adds	r1, r4, r5
 80070b0:	428b      	cmp	r3, r1
 80070b2:	bf01      	itttt	eq
 80070b4:	6819      	ldreq	r1, [r3, #0]
 80070b6:	685b      	ldreq	r3, [r3, #4]
 80070b8:	1949      	addeq	r1, r1, r5
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	e7ed      	b.n	800709a <_free_r+0x22>
 80070be:	461a      	mov	r2, r3
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	b10b      	cbz	r3, 80070c8 <_free_r+0x50>
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d9fa      	bls.n	80070be <_free_r+0x46>
 80070c8:	6811      	ldr	r1, [r2, #0]
 80070ca:	1855      	adds	r5, r2, r1
 80070cc:	42a5      	cmp	r5, r4
 80070ce:	d10b      	bne.n	80070e8 <_free_r+0x70>
 80070d0:	6824      	ldr	r4, [r4, #0]
 80070d2:	4421      	add	r1, r4
 80070d4:	1854      	adds	r4, r2, r1
 80070d6:	42a3      	cmp	r3, r4
 80070d8:	6011      	str	r1, [r2, #0]
 80070da:	d1e0      	bne.n	800709e <_free_r+0x26>
 80070dc:	681c      	ldr	r4, [r3, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	6053      	str	r3, [r2, #4]
 80070e2:	440c      	add	r4, r1
 80070e4:	6014      	str	r4, [r2, #0]
 80070e6:	e7da      	b.n	800709e <_free_r+0x26>
 80070e8:	d902      	bls.n	80070f0 <_free_r+0x78>
 80070ea:	230c      	movs	r3, #12
 80070ec:	6003      	str	r3, [r0, #0]
 80070ee:	e7d6      	b.n	800709e <_free_r+0x26>
 80070f0:	6825      	ldr	r5, [r4, #0]
 80070f2:	1961      	adds	r1, r4, r5
 80070f4:	428b      	cmp	r3, r1
 80070f6:	bf04      	itt	eq
 80070f8:	6819      	ldreq	r1, [r3, #0]
 80070fa:	685b      	ldreq	r3, [r3, #4]
 80070fc:	6063      	str	r3, [r4, #4]
 80070fe:	bf04      	itt	eq
 8007100:	1949      	addeq	r1, r1, r5
 8007102:	6021      	streq	r1, [r4, #0]
 8007104:	6054      	str	r4, [r2, #4]
 8007106:	e7ca      	b.n	800709e <_free_r+0x26>
 8007108:	b003      	add	sp, #12
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	2000439c 	.word	0x2000439c

08007110 <sbrk_aligned>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0e      	ldr	r6, [pc, #56]	; (800714c <sbrk_aligned+0x3c>)
 8007114:	460c      	mov	r4, r1
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	4605      	mov	r5, r0
 800711a:	b911      	cbnz	r1, 8007122 <sbrk_aligned+0x12>
 800711c:	f000 fba6 	bl	800786c <_sbrk_r>
 8007120:	6030      	str	r0, [r6, #0]
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 fba1 	bl	800786c <_sbrk_r>
 800712a:	1c43      	adds	r3, r0, #1
 800712c:	d00a      	beq.n	8007144 <sbrk_aligned+0x34>
 800712e:	1cc4      	adds	r4, r0, #3
 8007130:	f024 0403 	bic.w	r4, r4, #3
 8007134:	42a0      	cmp	r0, r4
 8007136:	d007      	beq.n	8007148 <sbrk_aligned+0x38>
 8007138:	1a21      	subs	r1, r4, r0
 800713a:	4628      	mov	r0, r5
 800713c:	f000 fb96 	bl	800786c <_sbrk_r>
 8007140:	3001      	adds	r0, #1
 8007142:	d101      	bne.n	8007148 <sbrk_aligned+0x38>
 8007144:	f04f 34ff 	mov.w	r4, #4294967295
 8007148:	4620      	mov	r0, r4
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	200043a0 	.word	0x200043a0

08007150 <_malloc_r>:
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007154:	1ccd      	adds	r5, r1, #3
 8007156:	f025 0503 	bic.w	r5, r5, #3
 800715a:	3508      	adds	r5, #8
 800715c:	2d0c      	cmp	r5, #12
 800715e:	bf38      	it	cc
 8007160:	250c      	movcc	r5, #12
 8007162:	2d00      	cmp	r5, #0
 8007164:	4607      	mov	r7, r0
 8007166:	db01      	blt.n	800716c <_malloc_r+0x1c>
 8007168:	42a9      	cmp	r1, r5
 800716a:	d905      	bls.n	8007178 <_malloc_r+0x28>
 800716c:	230c      	movs	r3, #12
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	2600      	movs	r6, #0
 8007172:	4630      	mov	r0, r6
 8007174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007178:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800724c <_malloc_r+0xfc>
 800717c:	f000 f868 	bl	8007250 <__malloc_lock>
 8007180:	f8d8 3000 	ldr.w	r3, [r8]
 8007184:	461c      	mov	r4, r3
 8007186:	bb5c      	cbnz	r4, 80071e0 <_malloc_r+0x90>
 8007188:	4629      	mov	r1, r5
 800718a:	4638      	mov	r0, r7
 800718c:	f7ff ffc0 	bl	8007110 <sbrk_aligned>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	4604      	mov	r4, r0
 8007194:	d155      	bne.n	8007242 <_malloc_r+0xf2>
 8007196:	f8d8 4000 	ldr.w	r4, [r8]
 800719a:	4626      	mov	r6, r4
 800719c:	2e00      	cmp	r6, #0
 800719e:	d145      	bne.n	800722c <_malloc_r+0xdc>
 80071a0:	2c00      	cmp	r4, #0
 80071a2:	d048      	beq.n	8007236 <_malloc_r+0xe6>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	4631      	mov	r1, r6
 80071a8:	4638      	mov	r0, r7
 80071aa:	eb04 0903 	add.w	r9, r4, r3
 80071ae:	f000 fb5d 	bl	800786c <_sbrk_r>
 80071b2:	4581      	cmp	r9, r0
 80071b4:	d13f      	bne.n	8007236 <_malloc_r+0xe6>
 80071b6:	6821      	ldr	r1, [r4, #0]
 80071b8:	1a6d      	subs	r5, r5, r1
 80071ba:	4629      	mov	r1, r5
 80071bc:	4638      	mov	r0, r7
 80071be:	f7ff ffa7 	bl	8007110 <sbrk_aligned>
 80071c2:	3001      	adds	r0, #1
 80071c4:	d037      	beq.n	8007236 <_malloc_r+0xe6>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	442b      	add	r3, r5
 80071ca:	6023      	str	r3, [r4, #0]
 80071cc:	f8d8 3000 	ldr.w	r3, [r8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d038      	beq.n	8007246 <_malloc_r+0xf6>
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	42a2      	cmp	r2, r4
 80071d8:	d12b      	bne.n	8007232 <_malloc_r+0xe2>
 80071da:	2200      	movs	r2, #0
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	e00f      	b.n	8007200 <_malloc_r+0xb0>
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	1b52      	subs	r2, r2, r5
 80071e4:	d41f      	bmi.n	8007226 <_malloc_r+0xd6>
 80071e6:	2a0b      	cmp	r2, #11
 80071e8:	d917      	bls.n	800721a <_malloc_r+0xca>
 80071ea:	1961      	adds	r1, r4, r5
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	6025      	str	r5, [r4, #0]
 80071f0:	bf18      	it	ne
 80071f2:	6059      	strne	r1, [r3, #4]
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	bf08      	it	eq
 80071f8:	f8c8 1000 	streq.w	r1, [r8]
 80071fc:	5162      	str	r2, [r4, r5]
 80071fe:	604b      	str	r3, [r1, #4]
 8007200:	4638      	mov	r0, r7
 8007202:	f104 060b 	add.w	r6, r4, #11
 8007206:	f000 f829 	bl	800725c <__malloc_unlock>
 800720a:	f026 0607 	bic.w	r6, r6, #7
 800720e:	1d23      	adds	r3, r4, #4
 8007210:	1af2      	subs	r2, r6, r3
 8007212:	d0ae      	beq.n	8007172 <_malloc_r+0x22>
 8007214:	1b9b      	subs	r3, r3, r6
 8007216:	50a3      	str	r3, [r4, r2]
 8007218:	e7ab      	b.n	8007172 <_malloc_r+0x22>
 800721a:	42a3      	cmp	r3, r4
 800721c:	6862      	ldr	r2, [r4, #4]
 800721e:	d1dd      	bne.n	80071dc <_malloc_r+0x8c>
 8007220:	f8c8 2000 	str.w	r2, [r8]
 8007224:	e7ec      	b.n	8007200 <_malloc_r+0xb0>
 8007226:	4623      	mov	r3, r4
 8007228:	6864      	ldr	r4, [r4, #4]
 800722a:	e7ac      	b.n	8007186 <_malloc_r+0x36>
 800722c:	4634      	mov	r4, r6
 800722e:	6876      	ldr	r6, [r6, #4]
 8007230:	e7b4      	b.n	800719c <_malloc_r+0x4c>
 8007232:	4613      	mov	r3, r2
 8007234:	e7cc      	b.n	80071d0 <_malloc_r+0x80>
 8007236:	230c      	movs	r3, #12
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4638      	mov	r0, r7
 800723c:	f000 f80e 	bl	800725c <__malloc_unlock>
 8007240:	e797      	b.n	8007172 <_malloc_r+0x22>
 8007242:	6025      	str	r5, [r4, #0]
 8007244:	e7dc      	b.n	8007200 <_malloc_r+0xb0>
 8007246:	605b      	str	r3, [r3, #4]
 8007248:	deff      	udf	#255	; 0xff
 800724a:	bf00      	nop
 800724c:	2000439c 	.word	0x2000439c

08007250 <__malloc_lock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_lock+0x8>)
 8007252:	f7ff bf01 	b.w	8007058 <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	20004398 	.word	0x20004398

0800725c <__malloc_unlock>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__malloc_unlock+0x8>)
 800725e:	f7ff befc 	b.w	800705a <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	20004398 	.word	0x20004398

08007268 <__ssputs_r>:
 8007268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726c:	688e      	ldr	r6, [r1, #8]
 800726e:	461f      	mov	r7, r3
 8007270:	42be      	cmp	r6, r7
 8007272:	680b      	ldr	r3, [r1, #0]
 8007274:	4682      	mov	sl, r0
 8007276:	460c      	mov	r4, r1
 8007278:	4690      	mov	r8, r2
 800727a:	d82c      	bhi.n	80072d6 <__ssputs_r+0x6e>
 800727c:	898a      	ldrh	r2, [r1, #12]
 800727e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007282:	d026      	beq.n	80072d2 <__ssputs_r+0x6a>
 8007284:	6965      	ldr	r5, [r4, #20]
 8007286:	6909      	ldr	r1, [r1, #16]
 8007288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800728c:	eba3 0901 	sub.w	r9, r3, r1
 8007290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007294:	1c7b      	adds	r3, r7, #1
 8007296:	444b      	add	r3, r9
 8007298:	106d      	asrs	r5, r5, #1
 800729a:	429d      	cmp	r5, r3
 800729c:	bf38      	it	cc
 800729e:	461d      	movcc	r5, r3
 80072a0:	0553      	lsls	r3, r2, #21
 80072a2:	d527      	bpl.n	80072f4 <__ssputs_r+0x8c>
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7ff ff53 	bl	8007150 <_malloc_r>
 80072aa:	4606      	mov	r6, r0
 80072ac:	b360      	cbz	r0, 8007308 <__ssputs_r+0xa0>
 80072ae:	6921      	ldr	r1, [r4, #16]
 80072b0:	464a      	mov	r2, r9
 80072b2:	f7ff fed3 	bl	800705c <memcpy>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c0:	81a3      	strh	r3, [r4, #12]
 80072c2:	6126      	str	r6, [r4, #16]
 80072c4:	6165      	str	r5, [r4, #20]
 80072c6:	444e      	add	r6, r9
 80072c8:	eba5 0509 	sub.w	r5, r5, r9
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	60a5      	str	r5, [r4, #8]
 80072d0:	463e      	mov	r6, r7
 80072d2:	42be      	cmp	r6, r7
 80072d4:	d900      	bls.n	80072d8 <__ssputs_r+0x70>
 80072d6:	463e      	mov	r6, r7
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	4632      	mov	r2, r6
 80072dc:	4641      	mov	r1, r8
 80072de:	f000 faab 	bl	8007838 <memmove>
 80072e2:	68a3      	ldr	r3, [r4, #8]
 80072e4:	1b9b      	subs	r3, r3, r6
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	4433      	add	r3, r6
 80072ec:	6023      	str	r3, [r4, #0]
 80072ee:	2000      	movs	r0, #0
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	462a      	mov	r2, r5
 80072f6:	f000 fac9 	bl	800788c <_realloc_r>
 80072fa:	4606      	mov	r6, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d1e0      	bne.n	80072c2 <__ssputs_r+0x5a>
 8007300:	6921      	ldr	r1, [r4, #16]
 8007302:	4650      	mov	r0, sl
 8007304:	f7ff feb8 	bl	8007078 <_free_r>
 8007308:	230c      	movs	r3, #12
 800730a:	f8ca 3000 	str.w	r3, [sl]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295
 800731a:	e7e9      	b.n	80072f0 <__ssputs_r+0x88>

0800731c <_svfiprintf_r>:
 800731c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007320:	4698      	mov	r8, r3
 8007322:	898b      	ldrh	r3, [r1, #12]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	b09d      	sub	sp, #116	; 0x74
 8007328:	4607      	mov	r7, r0
 800732a:	460d      	mov	r5, r1
 800732c:	4614      	mov	r4, r2
 800732e:	d50e      	bpl.n	800734e <_svfiprintf_r+0x32>
 8007330:	690b      	ldr	r3, [r1, #16]
 8007332:	b963      	cbnz	r3, 800734e <_svfiprintf_r+0x32>
 8007334:	2140      	movs	r1, #64	; 0x40
 8007336:	f7ff ff0b 	bl	8007150 <_malloc_r>
 800733a:	6028      	str	r0, [r5, #0]
 800733c:	6128      	str	r0, [r5, #16]
 800733e:	b920      	cbnz	r0, 800734a <_svfiprintf_r+0x2e>
 8007340:	230c      	movs	r3, #12
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e0d0      	b.n	80074ec <_svfiprintf_r+0x1d0>
 800734a:	2340      	movs	r3, #64	; 0x40
 800734c:	616b      	str	r3, [r5, #20]
 800734e:	2300      	movs	r3, #0
 8007350:	9309      	str	r3, [sp, #36]	; 0x24
 8007352:	2320      	movs	r3, #32
 8007354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007358:	f8cd 800c 	str.w	r8, [sp, #12]
 800735c:	2330      	movs	r3, #48	; 0x30
 800735e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007504 <_svfiprintf_r+0x1e8>
 8007362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007366:	f04f 0901 	mov.w	r9, #1
 800736a:	4623      	mov	r3, r4
 800736c:	469a      	mov	sl, r3
 800736e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007372:	b10a      	cbz	r2, 8007378 <_svfiprintf_r+0x5c>
 8007374:	2a25      	cmp	r2, #37	; 0x25
 8007376:	d1f9      	bne.n	800736c <_svfiprintf_r+0x50>
 8007378:	ebba 0b04 	subs.w	fp, sl, r4
 800737c:	d00b      	beq.n	8007396 <_svfiprintf_r+0x7a>
 800737e:	465b      	mov	r3, fp
 8007380:	4622      	mov	r2, r4
 8007382:	4629      	mov	r1, r5
 8007384:	4638      	mov	r0, r7
 8007386:	f7ff ff6f 	bl	8007268 <__ssputs_r>
 800738a:	3001      	adds	r0, #1
 800738c:	f000 80a9 	beq.w	80074e2 <_svfiprintf_r+0x1c6>
 8007390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007392:	445a      	add	r2, fp
 8007394:	9209      	str	r2, [sp, #36]	; 0x24
 8007396:	f89a 3000 	ldrb.w	r3, [sl]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a1 	beq.w	80074e2 <_svfiprintf_r+0x1c6>
 80073a0:	2300      	movs	r3, #0
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073aa:	f10a 0a01 	add.w	sl, sl, #1
 80073ae:	9304      	str	r3, [sp, #16]
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b6:	931a      	str	r3, [sp, #104]	; 0x68
 80073b8:	4654      	mov	r4, sl
 80073ba:	2205      	movs	r2, #5
 80073bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073c0:	4850      	ldr	r0, [pc, #320]	; (8007504 <_svfiprintf_r+0x1e8>)
 80073c2:	f7f8 ff15 	bl	80001f0 <memchr>
 80073c6:	9a04      	ldr	r2, [sp, #16]
 80073c8:	b9d8      	cbnz	r0, 8007402 <_svfiprintf_r+0xe6>
 80073ca:	06d0      	lsls	r0, r2, #27
 80073cc:	bf44      	itt	mi
 80073ce:	2320      	movmi	r3, #32
 80073d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d4:	0711      	lsls	r1, r2, #28
 80073d6:	bf44      	itt	mi
 80073d8:	232b      	movmi	r3, #43	; 0x2b
 80073da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b2a      	cmp	r3, #42	; 0x2a
 80073e4:	d015      	beq.n	8007412 <_svfiprintf_r+0xf6>
 80073e6:	9a07      	ldr	r2, [sp, #28]
 80073e8:	4654      	mov	r4, sl
 80073ea:	2000      	movs	r0, #0
 80073ec:	f04f 0c0a 	mov.w	ip, #10
 80073f0:	4621      	mov	r1, r4
 80073f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f6:	3b30      	subs	r3, #48	; 0x30
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d94d      	bls.n	8007498 <_svfiprintf_r+0x17c>
 80073fc:	b1b0      	cbz	r0, 800742c <_svfiprintf_r+0x110>
 80073fe:	9207      	str	r2, [sp, #28]
 8007400:	e014      	b.n	800742c <_svfiprintf_r+0x110>
 8007402:	eba0 0308 	sub.w	r3, r0, r8
 8007406:	fa09 f303 	lsl.w	r3, r9, r3
 800740a:	4313      	orrs	r3, r2
 800740c:	9304      	str	r3, [sp, #16]
 800740e:	46a2      	mov	sl, r4
 8007410:	e7d2      	b.n	80073b8 <_svfiprintf_r+0x9c>
 8007412:	9b03      	ldr	r3, [sp, #12]
 8007414:	1d19      	adds	r1, r3, #4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	bfbb      	ittet	lt
 800741e:	425b      	neglt	r3, r3
 8007420:	f042 0202 	orrlt.w	r2, r2, #2
 8007424:	9307      	strge	r3, [sp, #28]
 8007426:	9307      	strlt	r3, [sp, #28]
 8007428:	bfb8      	it	lt
 800742a:	9204      	strlt	r2, [sp, #16]
 800742c:	7823      	ldrb	r3, [r4, #0]
 800742e:	2b2e      	cmp	r3, #46	; 0x2e
 8007430:	d10c      	bne.n	800744c <_svfiprintf_r+0x130>
 8007432:	7863      	ldrb	r3, [r4, #1]
 8007434:	2b2a      	cmp	r3, #42	; 0x2a
 8007436:	d134      	bne.n	80074a2 <_svfiprintf_r+0x186>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	1d1a      	adds	r2, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	9203      	str	r2, [sp, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfb8      	it	lt
 8007444:	f04f 33ff 	movlt.w	r3, #4294967295
 8007448:	3402      	adds	r4, #2
 800744a:	9305      	str	r3, [sp, #20]
 800744c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007514 <_svfiprintf_r+0x1f8>
 8007450:	7821      	ldrb	r1, [r4, #0]
 8007452:	2203      	movs	r2, #3
 8007454:	4650      	mov	r0, sl
 8007456:	f7f8 fecb 	bl	80001f0 <memchr>
 800745a:	b138      	cbz	r0, 800746c <_svfiprintf_r+0x150>
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	eba0 000a 	sub.w	r0, r0, sl
 8007462:	2240      	movs	r2, #64	; 0x40
 8007464:	4082      	lsls	r2, r0
 8007466:	4313      	orrs	r3, r2
 8007468:	3401      	adds	r4, #1
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007470:	4825      	ldr	r0, [pc, #148]	; (8007508 <_svfiprintf_r+0x1ec>)
 8007472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007476:	2206      	movs	r2, #6
 8007478:	f7f8 feba 	bl	80001f0 <memchr>
 800747c:	2800      	cmp	r0, #0
 800747e:	d038      	beq.n	80074f2 <_svfiprintf_r+0x1d6>
 8007480:	4b22      	ldr	r3, [pc, #136]	; (800750c <_svfiprintf_r+0x1f0>)
 8007482:	bb1b      	cbnz	r3, 80074cc <_svfiprintf_r+0x1b0>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	3307      	adds	r3, #7
 8007488:	f023 0307 	bic.w	r3, r3, #7
 800748c:	3308      	adds	r3, #8
 800748e:	9303      	str	r3, [sp, #12]
 8007490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007492:	4433      	add	r3, r6
 8007494:	9309      	str	r3, [sp, #36]	; 0x24
 8007496:	e768      	b.n	800736a <_svfiprintf_r+0x4e>
 8007498:	fb0c 3202 	mla	r2, ip, r2, r3
 800749c:	460c      	mov	r4, r1
 800749e:	2001      	movs	r0, #1
 80074a0:	e7a6      	b.n	80073f0 <_svfiprintf_r+0xd4>
 80074a2:	2300      	movs	r3, #0
 80074a4:	3401      	adds	r4, #1
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	4619      	mov	r1, r3
 80074aa:	f04f 0c0a 	mov.w	ip, #10
 80074ae:	4620      	mov	r0, r4
 80074b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b4:	3a30      	subs	r2, #48	; 0x30
 80074b6:	2a09      	cmp	r2, #9
 80074b8:	d903      	bls.n	80074c2 <_svfiprintf_r+0x1a6>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0c6      	beq.n	800744c <_svfiprintf_r+0x130>
 80074be:	9105      	str	r1, [sp, #20]
 80074c0:	e7c4      	b.n	800744c <_svfiprintf_r+0x130>
 80074c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c6:	4604      	mov	r4, r0
 80074c8:	2301      	movs	r3, #1
 80074ca:	e7f0      	b.n	80074ae <_svfiprintf_r+0x192>
 80074cc:	ab03      	add	r3, sp, #12
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	462a      	mov	r2, r5
 80074d2:	4b0f      	ldr	r3, [pc, #60]	; (8007510 <_svfiprintf_r+0x1f4>)
 80074d4:	a904      	add	r1, sp, #16
 80074d6:	4638      	mov	r0, r7
 80074d8:	f3af 8000 	nop.w
 80074dc:	1c42      	adds	r2, r0, #1
 80074de:	4606      	mov	r6, r0
 80074e0:	d1d6      	bne.n	8007490 <_svfiprintf_r+0x174>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	065b      	lsls	r3, r3, #25
 80074e6:	f53f af2d 	bmi.w	8007344 <_svfiprintf_r+0x28>
 80074ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ec:	b01d      	add	sp, #116	; 0x74
 80074ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	ab03      	add	r3, sp, #12
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	462a      	mov	r2, r5
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <_svfiprintf_r+0x1f4>)
 80074fa:	a904      	add	r1, sp, #16
 80074fc:	4638      	mov	r0, r7
 80074fe:	f000 f879 	bl	80075f4 <_printf_i>
 8007502:	e7eb      	b.n	80074dc <_svfiprintf_r+0x1c0>
 8007504:	08007acc 	.word	0x08007acc
 8007508:	08007ad6 	.word	0x08007ad6
 800750c:	00000000 	.word	0x00000000
 8007510:	08007269 	.word	0x08007269
 8007514:	08007ad2 	.word	0x08007ad2

08007518 <_printf_common>:
 8007518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800751c:	4616      	mov	r6, r2
 800751e:	4699      	mov	r9, r3
 8007520:	688a      	ldr	r2, [r1, #8]
 8007522:	690b      	ldr	r3, [r1, #16]
 8007524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007528:	4293      	cmp	r3, r2
 800752a:	bfb8      	it	lt
 800752c:	4613      	movlt	r3, r2
 800752e:	6033      	str	r3, [r6, #0]
 8007530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007534:	4607      	mov	r7, r0
 8007536:	460c      	mov	r4, r1
 8007538:	b10a      	cbz	r2, 800753e <_printf_common+0x26>
 800753a:	3301      	adds	r3, #1
 800753c:	6033      	str	r3, [r6, #0]
 800753e:	6823      	ldr	r3, [r4, #0]
 8007540:	0699      	lsls	r1, r3, #26
 8007542:	bf42      	ittt	mi
 8007544:	6833      	ldrmi	r3, [r6, #0]
 8007546:	3302      	addmi	r3, #2
 8007548:	6033      	strmi	r3, [r6, #0]
 800754a:	6825      	ldr	r5, [r4, #0]
 800754c:	f015 0506 	ands.w	r5, r5, #6
 8007550:	d106      	bne.n	8007560 <_printf_common+0x48>
 8007552:	f104 0a19 	add.w	sl, r4, #25
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	6832      	ldr	r2, [r6, #0]
 800755a:	1a9b      	subs	r3, r3, r2
 800755c:	42ab      	cmp	r3, r5
 800755e:	dc26      	bgt.n	80075ae <_printf_common+0x96>
 8007560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007564:	1e13      	subs	r3, r2, #0
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	bf18      	it	ne
 800756a:	2301      	movne	r3, #1
 800756c:	0692      	lsls	r2, r2, #26
 800756e:	d42b      	bmi.n	80075c8 <_printf_common+0xb0>
 8007570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007574:	4649      	mov	r1, r9
 8007576:	4638      	mov	r0, r7
 8007578:	47c0      	blx	r8
 800757a:	3001      	adds	r0, #1
 800757c:	d01e      	beq.n	80075bc <_printf_common+0xa4>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6922      	ldr	r2, [r4, #16]
 8007582:	f003 0306 	and.w	r3, r3, #6
 8007586:	2b04      	cmp	r3, #4
 8007588:	bf02      	ittt	eq
 800758a:	68e5      	ldreq	r5, [r4, #12]
 800758c:	6833      	ldreq	r3, [r6, #0]
 800758e:	1aed      	subeq	r5, r5, r3
 8007590:	68a3      	ldr	r3, [r4, #8]
 8007592:	bf0c      	ite	eq
 8007594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007598:	2500      	movne	r5, #0
 800759a:	4293      	cmp	r3, r2
 800759c:	bfc4      	itt	gt
 800759e:	1a9b      	subgt	r3, r3, r2
 80075a0:	18ed      	addgt	r5, r5, r3
 80075a2:	2600      	movs	r6, #0
 80075a4:	341a      	adds	r4, #26
 80075a6:	42b5      	cmp	r5, r6
 80075a8:	d11a      	bne.n	80075e0 <_printf_common+0xc8>
 80075aa:	2000      	movs	r0, #0
 80075ac:	e008      	b.n	80075c0 <_printf_common+0xa8>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4652      	mov	r2, sl
 80075b2:	4649      	mov	r1, r9
 80075b4:	4638      	mov	r0, r7
 80075b6:	47c0      	blx	r8
 80075b8:	3001      	adds	r0, #1
 80075ba:	d103      	bne.n	80075c4 <_printf_common+0xac>
 80075bc:	f04f 30ff 	mov.w	r0, #4294967295
 80075c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c4:	3501      	adds	r5, #1
 80075c6:	e7c6      	b.n	8007556 <_printf_common+0x3e>
 80075c8:	18e1      	adds	r1, r4, r3
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	2030      	movs	r0, #48	; 0x30
 80075ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075d2:	4422      	add	r2, r4
 80075d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075dc:	3302      	adds	r3, #2
 80075de:	e7c7      	b.n	8007570 <_printf_common+0x58>
 80075e0:	2301      	movs	r3, #1
 80075e2:	4622      	mov	r2, r4
 80075e4:	4649      	mov	r1, r9
 80075e6:	4638      	mov	r0, r7
 80075e8:	47c0      	blx	r8
 80075ea:	3001      	adds	r0, #1
 80075ec:	d0e6      	beq.n	80075bc <_printf_common+0xa4>
 80075ee:	3601      	adds	r6, #1
 80075f0:	e7d9      	b.n	80075a6 <_printf_common+0x8e>
	...

080075f4 <_printf_i>:
 80075f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	7e0f      	ldrb	r7, [r1, #24]
 80075fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075fc:	2f78      	cmp	r7, #120	; 0x78
 80075fe:	4691      	mov	r9, r2
 8007600:	4680      	mov	r8, r0
 8007602:	460c      	mov	r4, r1
 8007604:	469a      	mov	sl, r3
 8007606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800760a:	d807      	bhi.n	800761c <_printf_i+0x28>
 800760c:	2f62      	cmp	r7, #98	; 0x62
 800760e:	d80a      	bhi.n	8007626 <_printf_i+0x32>
 8007610:	2f00      	cmp	r7, #0
 8007612:	f000 80d4 	beq.w	80077be <_printf_i+0x1ca>
 8007616:	2f58      	cmp	r7, #88	; 0x58
 8007618:	f000 80c0 	beq.w	800779c <_printf_i+0x1a8>
 800761c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007624:	e03a      	b.n	800769c <_printf_i+0xa8>
 8007626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800762a:	2b15      	cmp	r3, #21
 800762c:	d8f6      	bhi.n	800761c <_printf_i+0x28>
 800762e:	a101      	add	r1, pc, #4	; (adr r1, 8007634 <_printf_i+0x40>)
 8007630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007634:	0800768d 	.word	0x0800768d
 8007638:	080076a1 	.word	0x080076a1
 800763c:	0800761d 	.word	0x0800761d
 8007640:	0800761d 	.word	0x0800761d
 8007644:	0800761d 	.word	0x0800761d
 8007648:	0800761d 	.word	0x0800761d
 800764c:	080076a1 	.word	0x080076a1
 8007650:	0800761d 	.word	0x0800761d
 8007654:	0800761d 	.word	0x0800761d
 8007658:	0800761d 	.word	0x0800761d
 800765c:	0800761d 	.word	0x0800761d
 8007660:	080077a5 	.word	0x080077a5
 8007664:	080076cd 	.word	0x080076cd
 8007668:	0800775f 	.word	0x0800775f
 800766c:	0800761d 	.word	0x0800761d
 8007670:	0800761d 	.word	0x0800761d
 8007674:	080077c7 	.word	0x080077c7
 8007678:	0800761d 	.word	0x0800761d
 800767c:	080076cd 	.word	0x080076cd
 8007680:	0800761d 	.word	0x0800761d
 8007684:	0800761d 	.word	0x0800761d
 8007688:	08007767 	.word	0x08007767
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	1d1a      	adds	r2, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	602a      	str	r2, [r5, #0]
 8007694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800769c:	2301      	movs	r3, #1
 800769e:	e09f      	b.n	80077e0 <_printf_i+0x1ec>
 80076a0:	6820      	ldr	r0, [r4, #0]
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	0607      	lsls	r7, r0, #24
 80076a6:	f103 0104 	add.w	r1, r3, #4
 80076aa:	6029      	str	r1, [r5, #0]
 80076ac:	d501      	bpl.n	80076b2 <_printf_i+0xbe>
 80076ae:	681e      	ldr	r6, [r3, #0]
 80076b0:	e003      	b.n	80076ba <_printf_i+0xc6>
 80076b2:	0646      	lsls	r6, r0, #25
 80076b4:	d5fb      	bpl.n	80076ae <_printf_i+0xba>
 80076b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	da03      	bge.n	80076c6 <_printf_i+0xd2>
 80076be:	232d      	movs	r3, #45	; 0x2d
 80076c0:	4276      	negs	r6, r6
 80076c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c6:	485a      	ldr	r0, [pc, #360]	; (8007830 <_printf_i+0x23c>)
 80076c8:	230a      	movs	r3, #10
 80076ca:	e012      	b.n	80076f2 <_printf_i+0xfe>
 80076cc:	682b      	ldr	r3, [r5, #0]
 80076ce:	6820      	ldr	r0, [r4, #0]
 80076d0:	1d19      	adds	r1, r3, #4
 80076d2:	6029      	str	r1, [r5, #0]
 80076d4:	0605      	lsls	r5, r0, #24
 80076d6:	d501      	bpl.n	80076dc <_printf_i+0xe8>
 80076d8:	681e      	ldr	r6, [r3, #0]
 80076da:	e002      	b.n	80076e2 <_printf_i+0xee>
 80076dc:	0641      	lsls	r1, r0, #25
 80076de:	d5fb      	bpl.n	80076d8 <_printf_i+0xe4>
 80076e0:	881e      	ldrh	r6, [r3, #0]
 80076e2:	4853      	ldr	r0, [pc, #332]	; (8007830 <_printf_i+0x23c>)
 80076e4:	2f6f      	cmp	r7, #111	; 0x6f
 80076e6:	bf0c      	ite	eq
 80076e8:	2308      	moveq	r3, #8
 80076ea:	230a      	movne	r3, #10
 80076ec:	2100      	movs	r1, #0
 80076ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076f2:	6865      	ldr	r5, [r4, #4]
 80076f4:	60a5      	str	r5, [r4, #8]
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	bfa2      	ittt	ge
 80076fa:	6821      	ldrge	r1, [r4, #0]
 80076fc:	f021 0104 	bicge.w	r1, r1, #4
 8007700:	6021      	strge	r1, [r4, #0]
 8007702:	b90e      	cbnz	r6, 8007708 <_printf_i+0x114>
 8007704:	2d00      	cmp	r5, #0
 8007706:	d04b      	beq.n	80077a0 <_printf_i+0x1ac>
 8007708:	4615      	mov	r5, r2
 800770a:	fbb6 f1f3 	udiv	r1, r6, r3
 800770e:	fb03 6711 	mls	r7, r3, r1, r6
 8007712:	5dc7      	ldrb	r7, [r0, r7]
 8007714:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007718:	4637      	mov	r7, r6
 800771a:	42bb      	cmp	r3, r7
 800771c:	460e      	mov	r6, r1
 800771e:	d9f4      	bls.n	800770a <_printf_i+0x116>
 8007720:	2b08      	cmp	r3, #8
 8007722:	d10b      	bne.n	800773c <_printf_i+0x148>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	07de      	lsls	r6, r3, #31
 8007728:	d508      	bpl.n	800773c <_printf_i+0x148>
 800772a:	6923      	ldr	r3, [r4, #16]
 800772c:	6861      	ldr	r1, [r4, #4]
 800772e:	4299      	cmp	r1, r3
 8007730:	bfde      	ittt	le
 8007732:	2330      	movle	r3, #48	; 0x30
 8007734:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007738:	f105 35ff 	addle.w	r5, r5, #4294967295
 800773c:	1b52      	subs	r2, r2, r5
 800773e:	6122      	str	r2, [r4, #16]
 8007740:	f8cd a000 	str.w	sl, [sp]
 8007744:	464b      	mov	r3, r9
 8007746:	aa03      	add	r2, sp, #12
 8007748:	4621      	mov	r1, r4
 800774a:	4640      	mov	r0, r8
 800774c:	f7ff fee4 	bl	8007518 <_printf_common>
 8007750:	3001      	adds	r0, #1
 8007752:	d14a      	bne.n	80077ea <_printf_i+0x1f6>
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	b004      	add	sp, #16
 800775a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	f043 0320 	orr.w	r3, r3, #32
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	4833      	ldr	r0, [pc, #204]	; (8007834 <_printf_i+0x240>)
 8007768:	2778      	movs	r7, #120	; 0x78
 800776a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	6829      	ldr	r1, [r5, #0]
 8007772:	061f      	lsls	r7, r3, #24
 8007774:	f851 6b04 	ldr.w	r6, [r1], #4
 8007778:	d402      	bmi.n	8007780 <_printf_i+0x18c>
 800777a:	065f      	lsls	r7, r3, #25
 800777c:	bf48      	it	mi
 800777e:	b2b6      	uxthmi	r6, r6
 8007780:	07df      	lsls	r7, r3, #31
 8007782:	bf48      	it	mi
 8007784:	f043 0320 	orrmi.w	r3, r3, #32
 8007788:	6029      	str	r1, [r5, #0]
 800778a:	bf48      	it	mi
 800778c:	6023      	strmi	r3, [r4, #0]
 800778e:	b91e      	cbnz	r6, 8007798 <_printf_i+0x1a4>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	f023 0320 	bic.w	r3, r3, #32
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	2310      	movs	r3, #16
 800779a:	e7a7      	b.n	80076ec <_printf_i+0xf8>
 800779c:	4824      	ldr	r0, [pc, #144]	; (8007830 <_printf_i+0x23c>)
 800779e:	e7e4      	b.n	800776a <_printf_i+0x176>
 80077a0:	4615      	mov	r5, r2
 80077a2:	e7bd      	b.n	8007720 <_printf_i+0x12c>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	6826      	ldr	r6, [r4, #0]
 80077a8:	6961      	ldr	r1, [r4, #20]
 80077aa:	1d18      	adds	r0, r3, #4
 80077ac:	6028      	str	r0, [r5, #0]
 80077ae:	0635      	lsls	r5, r6, #24
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	d501      	bpl.n	80077b8 <_printf_i+0x1c4>
 80077b4:	6019      	str	r1, [r3, #0]
 80077b6:	e002      	b.n	80077be <_printf_i+0x1ca>
 80077b8:	0670      	lsls	r0, r6, #25
 80077ba:	d5fb      	bpl.n	80077b4 <_printf_i+0x1c0>
 80077bc:	8019      	strh	r1, [r3, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	4615      	mov	r5, r2
 80077c4:	e7bc      	b.n	8007740 <_printf_i+0x14c>
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	1d1a      	adds	r2, r3, #4
 80077ca:	602a      	str	r2, [r5, #0]
 80077cc:	681d      	ldr	r5, [r3, #0]
 80077ce:	6862      	ldr	r2, [r4, #4]
 80077d0:	2100      	movs	r1, #0
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7f8 fd0c 	bl	80001f0 <memchr>
 80077d8:	b108      	cbz	r0, 80077de <_printf_i+0x1ea>
 80077da:	1b40      	subs	r0, r0, r5
 80077dc:	6060      	str	r0, [r4, #4]
 80077de:	6863      	ldr	r3, [r4, #4]
 80077e0:	6123      	str	r3, [r4, #16]
 80077e2:	2300      	movs	r3, #0
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e8:	e7aa      	b.n	8007740 <_printf_i+0x14c>
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	462a      	mov	r2, r5
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d0ad      	beq.n	8007754 <_printf_i+0x160>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	079b      	lsls	r3, r3, #30
 80077fc:	d413      	bmi.n	8007826 <_printf_i+0x232>
 80077fe:	68e0      	ldr	r0, [r4, #12]
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	4298      	cmp	r0, r3
 8007804:	bfb8      	it	lt
 8007806:	4618      	movlt	r0, r3
 8007808:	e7a6      	b.n	8007758 <_printf_i+0x164>
 800780a:	2301      	movs	r3, #1
 800780c:	4632      	mov	r2, r6
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	47d0      	blx	sl
 8007814:	3001      	adds	r0, #1
 8007816:	d09d      	beq.n	8007754 <_printf_i+0x160>
 8007818:	3501      	adds	r5, #1
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	9903      	ldr	r1, [sp, #12]
 800781e:	1a5b      	subs	r3, r3, r1
 8007820:	42ab      	cmp	r3, r5
 8007822:	dcf2      	bgt.n	800780a <_printf_i+0x216>
 8007824:	e7eb      	b.n	80077fe <_printf_i+0x20a>
 8007826:	2500      	movs	r5, #0
 8007828:	f104 0619 	add.w	r6, r4, #25
 800782c:	e7f5      	b.n	800781a <_printf_i+0x226>
 800782e:	bf00      	nop
 8007830:	08007add 	.word	0x08007add
 8007834:	08007aee 	.word	0x08007aee

08007838 <memmove>:
 8007838:	4288      	cmp	r0, r1
 800783a:	b510      	push	{r4, lr}
 800783c:	eb01 0402 	add.w	r4, r1, r2
 8007840:	d902      	bls.n	8007848 <memmove+0x10>
 8007842:	4284      	cmp	r4, r0
 8007844:	4623      	mov	r3, r4
 8007846:	d807      	bhi.n	8007858 <memmove+0x20>
 8007848:	1e43      	subs	r3, r0, #1
 800784a:	42a1      	cmp	r1, r4
 800784c:	d008      	beq.n	8007860 <memmove+0x28>
 800784e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007856:	e7f8      	b.n	800784a <memmove+0x12>
 8007858:	4402      	add	r2, r0
 800785a:	4601      	mov	r1, r0
 800785c:	428a      	cmp	r2, r1
 800785e:	d100      	bne.n	8007862 <memmove+0x2a>
 8007860:	bd10      	pop	{r4, pc}
 8007862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800786a:	e7f7      	b.n	800785c <memmove+0x24>

0800786c <_sbrk_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d06      	ldr	r5, [pc, #24]	; (8007888 <_sbrk_r+0x1c>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7f9 fe6a 	bl	8001550 <_sbrk>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_sbrk_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_sbrk_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20004394 	.word	0x20004394

0800788c <_realloc_r>:
 800788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	4680      	mov	r8, r0
 8007892:	4614      	mov	r4, r2
 8007894:	460e      	mov	r6, r1
 8007896:	b921      	cbnz	r1, 80078a2 <_realloc_r+0x16>
 8007898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789c:	4611      	mov	r1, r2
 800789e:	f7ff bc57 	b.w	8007150 <_malloc_r>
 80078a2:	b92a      	cbnz	r2, 80078b0 <_realloc_r+0x24>
 80078a4:	f7ff fbe8 	bl	8007078 <_free_r>
 80078a8:	4625      	mov	r5, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b0:	f000 f81b 	bl	80078ea <_malloc_usable_size_r>
 80078b4:	4284      	cmp	r4, r0
 80078b6:	4607      	mov	r7, r0
 80078b8:	d802      	bhi.n	80078c0 <_realloc_r+0x34>
 80078ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078be:	d812      	bhi.n	80078e6 <_realloc_r+0x5a>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4640      	mov	r0, r8
 80078c4:	f7ff fc44 	bl	8007150 <_malloc_r>
 80078c8:	4605      	mov	r5, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d0ed      	beq.n	80078aa <_realloc_r+0x1e>
 80078ce:	42bc      	cmp	r4, r7
 80078d0:	4622      	mov	r2, r4
 80078d2:	4631      	mov	r1, r6
 80078d4:	bf28      	it	cs
 80078d6:	463a      	movcs	r2, r7
 80078d8:	f7ff fbc0 	bl	800705c <memcpy>
 80078dc:	4631      	mov	r1, r6
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fbca 	bl	8007078 <_free_r>
 80078e4:	e7e1      	b.n	80078aa <_realloc_r+0x1e>
 80078e6:	4635      	mov	r5, r6
 80078e8:	e7df      	b.n	80078aa <_realloc_r+0x1e>

080078ea <_malloc_usable_size_r>:
 80078ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ee:	1f18      	subs	r0, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbc      	itt	lt
 80078f4:	580b      	ldrlt	r3, [r1, r0]
 80078f6:	18c0      	addlt	r0, r0, r3
 80078f8:	4770      	bx	lr
	...

080078fc <_init>:
 80078fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fe:	bf00      	nop
 8007900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007902:	bc08      	pop	{r3}
 8007904:	469e      	mov	lr, r3
 8007906:	4770      	bx	lr

08007908 <_fini>:
 8007908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790a:	bf00      	nop
 800790c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800790e:	bc08      	pop	{r3}
 8007910:	469e      	mov	lr, r3
 8007912:	4770      	bx	lr
